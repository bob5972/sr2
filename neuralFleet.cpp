/*
 * neuralFleet.cpp -- part of SpaceRobots2
 * Copyright (C) 2022 Michael Banack <github@banack.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

extern "C" {
#include "fleet.h"
#include "Random.h"
#include "battle.h"
}

#include "mutate.h"
#include "MBUtil.h"

#include "sensorGrid.hpp"
#include "basicShipAI.hpp"
#include "MBMap.hpp"
#include "MBString.hpp"
#include "ml.hpp"
#include "floatNet.hpp"
#include "textDump.hpp"

#include "neuralNet.hpp"

#define NEURAL_MAX_NODE_DEGREE  8
#define NEURAL_MAX_INPUTS      25
#define NEURAL_MAX_OUTPUTS     25
#define NEURAL_MAX_NODES       100

#define NEURAL_SCRAMBLE_KEY "neuralFleet.scrambleMutation"

typedef struct NeuralConfigValue {
    const char *key;
    const char *value;
} NeuralConfigValue;

class NeuralAIGovernor : public BasicAIGovernor
{
public:
    // Members
    FloatNet myNeuralNet;
    MBVector<NeuralValueDesc> myInputDescs;
    MBVector<NeuralValueDesc> myOutputDescs;
    MBVector<float> myInputs;
    MBVector<float> myOutputs;
    uint myNumNodes;
    bool myUseAttackForces;
    NeuralNetContext myNNC;

public:
    NeuralAIGovernor(FleetAI *ai, MappingSensorGrid *sg)
    :BasicAIGovernor(ai, sg)
    {
        myNNC.rs = &myRandomState;
        myNNC.sg = sg;
        myNNC.ai = myFleetAI;
    }

    virtual ~NeuralAIGovernor() { }

    class NeuralShipAI : public BasicShipAI
    {
        public:
        NeuralShipAI(MobID mobid, NeuralAIGovernor *gov)
        :BasicShipAI(mobid, gov)
        { }

        virtual ~NeuralShipAI() {}
    };

    void dumpSanitizedParams(MBRegistry *mreg) {
        myNeuralNet.save(mreg, "floatNet.");
    }

    virtual NeuralShipAI *newShip(MobID mobid) {
        return new NeuralShipAI(mobid, this);
    }

    void putDefaults(MBRegistry *mreg, FleetAIType aiType) {
        NeuralConfigValue defaults[] = {
            { "attackExtendedRange",         "TRUE"      },
            { "attackRange",                 "117.644791"},
            { "baseDefenseRadius",           "143.515045"},
            { "baseSpawnJitter",             "1"         },
            { "creditReserve",               "200"       },

            { "evadeFighters",               "FALSE"     },
            { "evadeRange",                  "289.852631"},
            { "evadeStrictDistance",         "105.764320"},
            { "evadeUseStrictDistance",      "TRUE"      },

            { "gatherAbandonStale",          "FALSE"     },
            { "gatherRange",                 "50"        },
            { "guardRange",                  "0"         },

            { "nearBaseRandomIdle.forceOn",  "TRUE"      },
            { "randomIdle.forceOn",          "TRUE"      },
            { "randomizeStoppedVelocity.forceOn", "TRUE" },
            { "rotateStartingAngle",         "TRUE",     },
            { "simpleAttack.forceOn",        "TRUE"      },

            { "nearBaseRadius",              "100.0"     },
            { "baseDefenseRadius",           "250.0"     },

            { "sensorGrid.staleCoreTime",    "28.385160" },
            { "sensorGrid.staleFighterTime", "16.703636" },

            { "startingMaxRadius",           "300"       },
            { "startingMinRadius",           "250"       },

            { "useAttackForces",             "FALSE"     },
        };

        NeuralConfigValue configs1[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "148.066803" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "186.610748" },
            { "evadeStrictDistance", "137.479996" },
            { "evadeUseStrictDistance", "FALSE" },
            { "floatNet.node[20].inputs", "{13, 10, 7, 10, 13, 0, 9, 9, }" },
            { "floatNet.node[20].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[20].params", "{1.050000, 0.167232, 9.493267, 0.000000, 247.688858, 9.984236, 1.000000, 1.000000, }" },
            { "floatNet.node[30].inputs", "{23, 14, 29, 15, 28, 6, 16, 1, }" },
            { "floatNet.node[30].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[30].params", "{1.000000, 0.940282, 1094.104126, 0.808425, 1060.474121, 10.000000, 0.950000, 1.000000, }" },
            { "floatNet.node[31].inputs", "{28, 8, 26, 16, 23, 2, 20, 30, }" },
            { "floatNet.node[31].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[31].params", "{0.900000, 227.969955, 1291.191284, 1.050000, 0.950000, 0.343430, 0.941271, 1.050000, }" },
            { "floatNet.node[32].inputs", "{3, 25, 12, 12, 16, 23, 5, 4, }" },
            { "floatNet.node[32].op", "ML_FOP_1x1_QUADRATIC_UP" },
            { "floatNet.node[32].params", "{981.047180, 1.000000, 1.000000, 0.570663, 0.371041, 0.511033, 1.000000, 0.783566, }" },
            { "floatNet.node[33].inputs", "{13, 20, 16, 28, 24, 19, 26, 26, }" },
            { "floatNet.node[33].op", "ML_FOP_1x0_NEGATE" },
            { "floatNet.node[33].params", "{0.729000, 0.778732, 1.000000, 1.000000, 990.312561, 0.449541, 0.367953, 3000.000000, }" },
            { "floatNet.node[34].inputs", "{13, 30, 25, 14, 20, 24, 19, 0, }" },
            { "floatNet.node[34].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[34].params", "{0.950000, 0.182962, 1.000000, 0.950000, 0.482863, 0.018417, 10.000000, 600.039978, }" },
            { "floatNet.node[35].inputs", "{10, 11, 30, 13, 28, 17, 21, 19, }" },
            { "floatNet.node[35].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[35].params", "{0.763107, 1.557925, 1.000000, 1.000000, 0.900000, 0.818662, 20.037409, 1.504580, }" },
            { "floatNet.node[36].inputs", "{30, 14, 13, 12, 17, 32, 12, 3, }" },
            { "floatNet.node[36].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[36].params", "{1.212750, 0.434509, 1.000000, 0.487149, 1.000000, 10.000000, 7.966716, 1.000000, }" },
            { "floatNet.node[37].inputs", "{22, 32, 36, 15, 20, 24, 30, 28, }" },
            { "floatNet.node[37].op", "ML_FOP_NxN_LINEAR_COMBINATION" },
            { "floatNet.node[37].params", "{0.262960, 1.000000, 1.000000, 1423.661255, 0.950000, 1.000000, 0.733408, 1.050000, }" },
            { "floatNet.node[38].inputs", "{20, 3, 22, 15, 29, 16, 33, 4, }" },
            { "floatNet.node[38].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[38].params", "{1.000000, 1.000000, 0.761416, 0.283246, 1.000000, 3005.644287, 10.000000, 1.050000, }" },
            { "floatNet.node[39].inputs", "{32, 13, 27, 14, 35, 12, 32, 17, }" },
            { "floatNet.node[39].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[39].params", "{0.550351, 0.694501, 0.793074, 0.382523, 0.714323, 0.997500, 1.969741, 0.146499, }" },
            { "floatNet.node[21].inputs", "{0, 1, 14, 7, 1, 13, 19, 1, }" },
            { "floatNet.node[21].op", "ML_FOP_NxN_LINEAR_COMBINATION" },
            { "floatNet.node[21].params", "{0.076838, 1.642655, 0.814816, 3.706571, 0.816026, 1.000000, 7.485513, 10.000000, }" },
            { "floatNet.node[22].inputs", "{18, 20, 8, 9, 12, 4, 2, 16, }" },
            { "floatNet.node[22].op", "ML_FOP_NxN_SCALED_MAX" },
            { "floatNet.node[22].params", "{1.000000, 1.000000, 0.850500, 2054.450195, 1381.724854, 157.438812, 1.050000, 184.877609, }" },
            { "floatNet.node[23].inputs", "{3, 18, 3, 0, 6, 5, 13, 11, }" },
            { "floatNet.node[23].op", "ML_FOP_NxN_SCALED_MIN" },
            { "floatNet.node[23].params", "{9.176544, 240.673782, 0.706809, 1.050000, 0.763494, -1.000000, 1.298177, 1.000000, }" },
            { "floatNet.node[24].inputs", "{10, 14, 17, 16, 7, 19, 23, 20, }" },
            { "floatNet.node[24].op", "ML_FOP_NxN_LINEAR_COMBINATION" },
            { "floatNet.node[24].params", "{-1.000000, 10.000000, 0.850500, 0.129628, 1.984586, 3.957525, 6644.178223, 0.594585, }" },
            { "floatNet.node[25].inputs", "{14, 17, 11, 15, 24, 9, 18, 21, }" },
            { "floatNet.node[25].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[25].params", "{0.000000, 0.549446, 0.990000, 0.080289, 0.522399, 3467.296143, 0.800638, 1.000000, }" },
            { "floatNet.node[26].inputs", "{7, 25, 10, 0, 5, 1, 14, 7, }" },
            { "floatNet.node[26].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[26].params", "{0.950000, 0.871663, 152.331863, 9.500000, 1.000000, -1.000000, 0.257858, 1.000000, }" },
            { "floatNet.node[27].inputs", "{14, 21, 12, 23, 16, 14, 10, 22, }" },
            { "floatNet.node[27].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[27].params", "{0.538959, 0.695539, 0.330331, 149.907135, 1.050000, 0.211076, 0.557956, 0.465225, }" },
            { "floatNet.node[28].inputs", "{15, 22, 6, 1, 24, 4, 8, 0, }" },
            { "floatNet.node[28].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[28].params", "{1.050000, 1.000000, 8.814820, 0.313138, 1.000000, 10.500000, 0.120743, 0.950000, }" },
            { "floatNet.node[29].inputs", "{6, 22, 8, 13, 8, 20, 6, 9, }" },
            { "floatNet.node[29].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[29].params", "{239.458893, 0.147459, 1.000000, 0.723297, 1.050000, 0.184670, 997.662720, 27.000000, }" },
            { "floatNet.numInputs", "20" },
            { "floatNet.numNodes", "20" },
            { "floatNet.numOutputs", "20" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "67.846550" },
            { "guardRange", "200.824371" },
            { "input[0].forceType", "NEURAL_FORCE_EDGES" },
            { "input[0].radius", "1379.394165" },
            { "input[0].useTangent", "TRUE" },
            { "input[0].valueType", "NEURAL_VALUE_CROWD" },
            { "input[10].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[10].radius", "26.197947" },
            { "input[10].useTangent", "TRUE" },
            { "input[10].valueType", "NEURAL_VALUE_CROWD" },
            { "input[11].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[11].radius", "1410.684570" },
            { "input[11].useTangent", "FALSE" },
            { "input[11].valueType", "NEURAL_VALUE_FORCE" },
            { "input[12].forceType", "NEURAL_FORCE_ZERO" },
            { "input[12].radius", "821.751221" },
            { "input[12].useTangent", "FALSE" },
            { "input[12].valueType", "NEURAL_VALUE_TICK" },
            { "input[13].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[13].radius", "3000.000000" },
            { "input[13].useTangent", "FALSE" },
            { "input[13].valueType", "NEURAL_VALUE_MOBID" },
            { "input[14].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[14].radius", "2820.190674" },
            { "input[14].useTangent", "FALSE" },
            { "input[14].valueType", "NEURAL_VALUE_CROWD" },
            { "input[15].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[15].radius", "152.445862" },
            { "input[15].useTangent", "TRUE" },
            { "input[15].valueType", "NEURAL_VALUE_FORCE" },
            { "input[16].forceType", "NEURAL_FORCE_ZERO" },
            { "input[16].radius", "1642.232056" },
            { "input[16].useTangent", "FALSE" },
            { "input[16].valueType", "NEURAL_VALUE_FORCE" },
            { "input[17].forceType", "NEURAL_FORCE_EDGES" },
            { "input[17].radius", "938.246948" },
            { "input[17].useTangent", "TRUE" },
            { "input[17].valueType", "NEURAL_VALUE_FORCE" },
            { "input[18].forceType", "NEURAL_FORCE_ZERO" },
            { "input[18].radius", "1578.296631" },
            { "input[18].useTangent", "FALSE" },
            { "input[18].valueType", "NEURAL_VALUE_FORCE" },
            { "input[19].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[19].radius", "2423.319824" },
            { "input[19].useTangent", "TRUE" },
            { "input[19].valueType", "NEURAL_VALUE_FORCE" },
            { "input[1].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[1].radius", "2067.721191" },
            { "input[1].useTangent", "FALSE" },
            { "input[1].valueType", "NEURAL_VALUE_FORCE" },
            { "input[2].forceType", "NEURAL_FORCE_HEADING" },
            { "input[2].radius", "1371.876465" },
            { "input[2].useTangent", "TRUE" },
            { "input[2].valueType", "NEURAL_VALUE_ZERO" },
            { "input[3].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[3].radius", "1263.489990" },
            { "input[3].useTangent", "FALSE" },
            { "input[3].valueType", "NEURAL_VALUE_CROWD" },
            { "input[4].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[4].radius", "2304.703857" },
            { "input[4].useTangent", "TRUE" },
            { "input[4].valueType", "NEURAL_VALUE_MOBID" },
            { "input[5].forceType", "NEURAL_FORCE_ZERO" },
            { "input[5].radius", "1718.594727" },
            { "input[5].useTangent", "TRUE" },
            { "input[5].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[6].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[6].radius", "2545.418213" },
            { "input[6].useTangent", "TRUE" },
            { "input[6].valueType", "NEURAL_VALUE_MOBID" },
            { "input[7].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[7].radius", "2474.785889" },
            { "input[7].useTangent", "FALSE" },
            { "input[7].valueType", "NEURAL_VALUE_FORCE" },
            { "input[8].forceType", "NEURAL_FORCE_CENTER" },
            { "input[8].radius", "2051.518799" },
            { "input[8].useTangent", "FALSE" },
            { "input[8].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[9].forceType", "NEURAL_FORCE_EDGES" },
            { "input[9].radius", "1191.592407" },
            { "input[9].useTangent", "FALSE" },
            { "input[9].valueType", "NEURAL_VALUE_MOBID" },
            { "output[20].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[20].radius", "2464.956787" },
            { "output[20].useTangent", "FALSE" },
            { "output[20].valueType", "NEURAL_VALUE_FORCE" },
            { "output[30].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[30].radius", "2050.290771" },
            { "output[30].useTangent", "TRUE" },
            { "output[30].valueType", "NEURAL_VALUE_FORCE" },
            { "output[31].forceType", "NEURAL_FORCE_ZERO" },
            { "output[31].radius", "602.595520" },
            { "output[31].useTangent", "TRUE" },
            { "output[31].valueType", "NEURAL_VALUE_FORCE" },
            { "output[32].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[32].radius", "1519.014038" },
            { "output[32].useTangent", "FALSE" },
            { "output[32].valueType", "NEURAL_VALUE_FORCE" },
            { "output[33].forceType", "NEURAL_FORCE_COHERE" },
            { "output[33].radius", "3000.000000" },
            { "output[33].useTangent", "TRUE" },
            { "output[33].valueType", "NEURAL_VALUE_FORCE" },
            { "output[34].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[34].radius", "2529.224365" },
            { "output[34].useTangent", "FALSE" },
            { "output[34].valueType", "NEURAL_VALUE_FORCE" },
            { "output[35].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[35].radius", "211.022003" },
            { "output[35].useTangent", "TRUE" },
            { "output[35].valueType", "NEURAL_VALUE_FORCE" },
            { "output[36].forceType", "NEURAL_FORCE_EDGES" },
            { "output[36].radius", "1125.137329" },
            { "output[36].useTangent", "TRUE" },
            { "output[36].valueType", "NEURAL_VALUE_FORCE" },
            { "output[37].forceType", "NEURAL_FORCE_HEADING" },
            { "output[37].radius", "1372.211548" },
            { "output[37].useTangent", "FALSE" },
            { "output[37].valueType", "NEURAL_VALUE_FORCE" },
            { "output[38].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[38].radius", "812.498596" },
            { "output[38].useTangent", "FALSE" },
            { "output[38].valueType", "NEURAL_VALUE_FORCE" },
            { "output[39].forceType", "NEURAL_FORCE_CORNERS" },
            { "output[39].radius", "2725.875488" },
            { "output[39].useTangent", "FALSE" },
            { "output[39].valueType", "NEURAL_VALUE_FORCE" },
            { "output[21].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[21].radius", "1413.617065" },
            { "output[21].useTangent", "TRUE" },
            { "output[21].valueType", "NEURAL_VALUE_FORCE" },
            { "output[22].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[22].radius", "2569.132568" },
            { "output[22].useTangent", "TRUE" },
            { "output[22].valueType", "NEURAL_VALUE_FORCE" },
            { "output[23].forceType", "NEURAL_FORCE_HEADING" },
            { "output[23].radius", "1969.989868" },
            { "output[23].useTangent", "TRUE" },
            { "output[23].valueType", "NEURAL_VALUE_FORCE" },
            { "output[24].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[24].radius", "2281.656494" },
            { "output[24].useTangent", "TRUE" },
            { "output[24].valueType", "NEURAL_VALUE_FORCE" },
            { "output[25].forceType", "NEURAL_FORCE_CORES" },
            { "output[25].radius", "2072.078369" },
            { "output[25].useTangent", "TRUE" },
            { "output[25].valueType", "NEURAL_VALUE_FORCE" },
            { "output[26].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[26].radius", "1009.818115" },
            { "output[26].useTangent", "FALSE" },
            { "output[26].valueType", "NEURAL_VALUE_FORCE" },
            { "output[27].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[27].radius", "1700.157471" },
            { "output[27].useTangent", "TRUE" },
            { "output[27].valueType", "NEURAL_VALUE_FORCE" },
            { "output[28].forceType", "NEURAL_FORCE_CENTER" },
            { "output[28].radius", "1027.284424" },
            { "output[28].useTangent", "TRUE" },
            { "output[28].valueType", "NEURAL_VALUE_FORCE" },
            { "output[29].forceType", "NEURAL_FORCE_COHERE" },
            { "output[29].radius", "1428.817993" },
            { "output[29].useTangent", "TRUE" },
            { "output[29].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "TRUE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1888.944092" },
            { "startingMinRadius", "460.407959" },
        };

        NeuralConfigValue configs2[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "147.381485" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "121.319000" },
            { "evadeStrictDistance", "149.183762" },
            { "evadeUseStrictDistance", "TRUE" },
            { "floatNet.node[100].inputs", "{}" },
            { "floatNet.node[100].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[100].params", "{2541.818359, 1.000000, 0.000000, 0.023998, }" },
            { "floatNet.node[101].inputs", "{57, 0, 14, 0, }" },
            { "floatNet.node[101].op", "ML_FOP_NxN_SCALED_MAX" },
            { "floatNet.node[101].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[102].inputs", "{92, 94, 70, 0, }" },
            { "floatNet.node[102].op", "ML_FOP_1x1_QUADRATIC_UP" },
            { "floatNet.node[102].params", "{0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[103].inputs", "{21, 86, 81, }" },
            { "floatNet.node[103].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[103].params", "{1.050000, 0.486219, 0.855000, 1.482098, 0.000000, }" },
            { "floatNet.node[104].inputs", "{0, 40, 93, }" },
            { "floatNet.node[104].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[104].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[105].inputs", "{}" },
            { "floatNet.node[105].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[105].params", "{}" },
            { "floatNet.node[106].inputs", "{69, 51, 21, 62, }" },
            { "floatNet.node[106].op", "ML_FOP_NxN_SCALED_MIN" },
            { "floatNet.node[106].params", "{0.217571, 0.199052, 0.000000, 0.000000, }" },
            { "floatNet.node[107].inputs", "{16, 12, 0, 0, }" },
            { "floatNet.node[107].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[107].params", "{}" },
            { "floatNet.node[108].inputs", "{}" },
            { "floatNet.node[108].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[108].params", "{}" },
            { "floatNet.node[109].inputs", "{20, 0, }" },
            { "floatNet.node[109].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[109].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[110].inputs", "{9, 24, }" },
            { "floatNet.node[110].op", "ML_FOP_NxN_SCALED_MAX" },
            { "floatNet.node[110].params", "{0.000000, }" },
            { "floatNet.node[111].inputs", "{51, 77, 0, }" },
            { "floatNet.node[111].op", "ML_FOP_NxN_SELECT_GTE" },
            { "floatNet.node[111].params", "{}" },
            { "floatNet.node[112].inputs", "{4, 45, 0, 0, }" },
            { "floatNet.node[112].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[112].params", "{0.000000, }" },
            { "floatNet.node[113].inputs", "{}" },
            { "floatNet.node[113].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[113].params", "{0.206842, }" },
            { "floatNet.node[114].inputs", "{66, 0, }" },
            { "floatNet.node[114].op", "ML_FOP_Nx0_SUM" },
            { "floatNet.node[114].params", "{0.000000, }" },
            { "floatNet.node[115].inputs", "{28, 46, 25, 30, 21, 46, }" },
            { "floatNet.node[115].op", "ML_FOP_0x1_CONSTANT" },
            { "floatNet.node[115].params", "{0.997500, 0.855000, 0.158037, 868.201111, 0.000000, 0.475405, }" },
            { "floatNet.node[116].inputs", "{30, 27, 44, 33, 94, 0, 0, }" },
            { "floatNet.node[116].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[116].params", "{}" },
            { "floatNet.node[117].inputs", "{}" },
            { "floatNet.node[117].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[117].params", "{0.213439, 249.438278, 1.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[118].inputs", "{}" },
            { "floatNet.node[118].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[118].params", "{}" },
            { "floatNet.node[119].inputs", "{23, 59, 76, 11, }" },
            { "floatNet.node[119].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[119].params", "{1.000000, }" },
            { "floatNet.node[120].inputs", "{0, }" },
            { "floatNet.node[120].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[120].params", "{1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[121].inputs", "{0, }" },
            { "floatNet.node[121].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[121].params", "{10.000000, 989.854614, 10.000000, 0.000000, 1024.776733, 1.511374, 1.000000, 1.000000, }" },
            { "floatNet.node[122].inputs", "{}" },
            { "floatNet.node[122].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[122].params", "{}" },
            { "floatNet.node[123].inputs", "{0, }" },
            { "floatNet.node[123].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[123].params", "{1.000000, }" },
            { "floatNet.node[124].inputs", "{}" },
            { "floatNet.node[124].op", "ML_FOP_1x0_IDENTITY" },
            { "floatNet.node[124].params", "{1.000000, 1.000000, 1.000000, 0.900000, 30.000000, 0.000000, }" },
            { "floatNet.node[25].inputs", "{0, 20, 19, 3, 0, }" },
            { "floatNet.node[25].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[25].params", "{}" },
            { "floatNet.node[26].inputs", "{}" },
            { "floatNet.node[26].op", "ML_FOP_1x0_IDENTITY" },
            { "floatNet.node[26].params", "{9.500000, 1.000000, 0.809990, 1.000000, 239.752808, 2.557461, 0.000000, }" },
            { "floatNet.node[27].inputs", "{15, 9, }" },
            { "floatNet.node[27].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[27].params", "{}" },
            { "floatNet.node[28].inputs", "{0, 0, 4, 0, }" },
            { "floatNet.node[28].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[28].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[29].inputs", "{}" },
            { "floatNet.node[29].op", "ML_FOP_1x1_LTE" },
            { "floatNet.node[29].params", "{1.000000, 0.493627, }" },
            { "floatNet.node[30].inputs", "{12, 6, 1, 1, 0, }" },
            { "floatNet.node[30].op", "ML_FOP_1x0_SQRT" },
            { "floatNet.node[30].params", "{0.000000, }" },
            { "floatNet.node[31].inputs", "{16, }" },
            { "floatNet.node[31].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[31].params", "{0.000000, }" },
            { "floatNet.node[32].inputs", "{17, 23, }" },
            { "floatNet.node[32].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[32].params", "{0.318496, 2.703238, }" },
            { "floatNet.node[33].inputs", "{0, }" },
            { "floatNet.node[33].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[33].params", "{}" },
            { "floatNet.node[34].inputs", "{0, 5, }" },
            { "floatNet.node[34].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[34].params", "{9.675898, }" },
            { "floatNet.node[35].inputs", "{27, 24, 10, 8, 3, }" },
            { "floatNet.node[35].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[35].params", "{0.946803, 0.834379, 0.000000, }" },
            { "floatNet.node[36].inputs", "{17, 0, 23, 18, 0, 0, }" },
            { "floatNet.node[36].op", "ML_FOP_1x1_GTE" },
            { "floatNet.node[36].params", "{}" },
            { "floatNet.node[37].inputs", "{25, 4, 0, 0, }" },
            { "floatNet.node[37].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[37].params", "{1.889511, 0.297522, 0.542448, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[38].inputs", "{16, 25, 21, 8, }" },
            { "floatNet.node[38].op", "ML_FOP_1x1_QUADRATIC_UP" },
            { "floatNet.node[38].params", "{147.677063, 1.000000, -0.180388, }" },
            { "floatNet.node[39].inputs", "{0, 16, }" },
            { "floatNet.node[39].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[39].params", "{1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[40].inputs", "{32, 33, 36, 37, 9, 0, }" },
            { "floatNet.node[40].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[40].params", "{11.000000, 0.022183, 12.594612, 1.000000, 1.000000, 0.000000, 0.480767, }" },
            { "floatNet.node[41].inputs", "{}" },
            { "floatNet.node[41].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[41].params", "{1.000000, 0.000000, 1.726690, 0.212026, 969.475098, }" },
            { "floatNet.node[42].inputs", "{4, 2, 30, 26, 1, 9, 3, 0, }" },
            { "floatNet.node[42].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[42].params", "{230.393173, 0.186008, 0.552235, 0.452753, 0.026679, 2.261700, 1.505523, 0.000000, }" },
            { "floatNet.node[43].inputs", "{36, 0, }" },
            { "floatNet.node[43].op", "ML_FOP_1x1_STRICT_ON" },
            { "floatNet.node[43].params", "{0.218088, 0.192591, }" },
            { "floatNet.node[44].inputs", "{}" },
            { "floatNet.node[44].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[44].params", "{}" },
            { "floatNet.node[45].inputs", "{9, 5, 35, }" },
            { "floatNet.node[45].op", "ML_FOP_2x0_POW" },
            { "floatNet.node[45].params", "{1.000000, 2915.194580, 247.507675, 0.000000, 0.000000, }" },
            { "floatNet.node[46].inputs", "{}" },
            { "floatNet.node[46].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[46].params", "{0.994774, 0.000000, }" },
            { "floatNet.node[47].inputs", "{0, }" },
            { "floatNet.node[47].op", "ML_FOP_NxN_SELECT_GTE" },
            { "floatNet.node[47].params", "{3.272798, 1.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[48].inputs", "{45, }" },
            { "floatNet.node[48].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[48].params", "{2.569540, 0.982609, 0.208709, 0.000000, }" },
            { "floatNet.node[49].inputs", "{14, 0, }" },
            { "floatNet.node[49].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[49].params", "{}" },
            { "floatNet.node[50].inputs", "{20, 15, 3, 17, 0, }" },
            { "floatNet.node[50].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[50].params", "{151.020752, 0.209279, }" },
            { "floatNet.node[51].inputs", "{47, 0, }" },
            { "floatNet.node[51].op", "ML_FOP_1x3_IF_GTE_ELSE" },
            { "floatNet.node[51].params", "{0.000000, }" },
            { "floatNet.node[52].inputs", "{}" },
            { "floatNet.node[52].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[52].params", "{0.950000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[53].inputs", "{7, }" },
            { "floatNet.node[53].op", "ML_FOP_NxN_LINEAR_COMBINATION" },
            { "floatNet.node[53].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[54].inputs", "{30, 38, 0, }" },
            { "floatNet.node[54].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[54].params", "{0.000000, }" },
            { "floatNet.node[55].inputs", "{26, 17, 26, 0, 0, }" },
            { "floatNet.node[55].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[55].params", "{}" },
            { "floatNet.node[56].inputs", "{0, }" },
            { "floatNet.node[56].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[56].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[57].inputs", "{42, 46, }" },
            { "floatNet.node[57].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[57].params", "{1.000000, 1.050000, 0.000000, }" },
            { "floatNet.node[58].inputs", "{}" },
            { "floatNet.node[58].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[58].params", "{0.000000, }" },
            { "floatNet.node[59].inputs", "{0, 18, }" },
            { "floatNet.node[59].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[59].params", "{1.000000, 1.721286, 1.479195, 0.164023, 0.000000, 30.000000, 0.000000, }" },
            { "floatNet.node[60].inputs", "{52, }" },
            { "floatNet.node[60].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[60].params", "{0.881979, 1.000000, 0.000000, 1.007488, 1.723415, }" },
            { "floatNet.node[61].inputs", "{33, }" },
            { "floatNet.node[61].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[61].params", "{1.000000, 0.718616, 1.000000, 0.378065, 1.161303, 8.090465, 8.900914, 0.000000, }" },
            { "floatNet.node[62].inputs", "{34, 10, 36, 46, 29, 0, }" },
            { "floatNet.node[62].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[62].params", "{0.214919, 1.000000, 0.816799, 1.604426, 0.803607, 0.000000, 0.000000, }" },
            { "floatNet.node[63].inputs", "{}" },
            { "floatNet.node[63].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[63].params", "{1.629984, 0.947625, 1338.149170, 977.586731, 0.000000, 0.000000, }" },
            { "floatNet.node[64].inputs", "{}" },
            { "floatNet.node[64].op", "ML_FOP_1x2_CLAMPED_SCALE_FROM_UNIT" },
            { "floatNet.node[64].params", "{1.000000, 2922.915283, 1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[65].inputs", "{60, 0, }" },
            { "floatNet.node[65].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[65].params", "{}" },
            { "floatNet.node[66].inputs", "{2, 0, }" },
            { "floatNet.node[66].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[66].params", "{}" },
            { "floatNet.node[67].inputs", "{}" },
            { "floatNet.node[67].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[67].params", "{10.000000, 0.180421, 0.000000, 0.000000, }" },
            { "floatNet.node[68].inputs", "{50, 47, 23, 0, }" },
            { "floatNet.node[68].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[68].params", "{1.000000, 1.476961, 1.542832, 0.000000, }" },
            { "floatNet.node[69].inputs", "{42, 0, }" },
            { "floatNet.node[69].op", "ML_FOP_1x0_ABS" },
            { "floatNet.node[69].params", "{1.000000, 0.651541, 1.000000, 1.050000, 0.000000, 0.000000, }" },
            { "floatNet.node[70].inputs", "{5, }" },
            { "floatNet.node[70].op", "ML_FOP_Nx0_MIN" },
            { "floatNet.node[70].params", "{}" },
            { "floatNet.node[71].inputs", "{0, }" },
            { "floatNet.node[71].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[71].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[72].inputs", "{34, }" },
            { "floatNet.node[72].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[72].params", "{1.000000, 0.000000, 8821.981445, 0.000000, }" },
            { "floatNet.node[73].inputs", "{}" },
            { "floatNet.node[73].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[73].params", "{0.783255, 9241.718750, 323.068756, 0.000000, 0.000000, }" },
            { "floatNet.node[74].inputs", "{}" },
            { "floatNet.node[74].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[74].params", "{0.202690, 0.000000, 0.000000, }" },
            { "floatNet.node[75].inputs", "{5, 4, 0, 0, }" },
            { "floatNet.node[75].op", "ML_FOP_1x1_GTE" },
            { "floatNet.node[75].params", "{5000.000000, 0.118993, 0.000000, 6057.990723, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[76].inputs", "{62, 0, }" },
            { "floatNet.node[76].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[76].params", "{0.000000, }" },
            { "floatNet.node[77].inputs", "{73, 0, 73, }" },
            { "floatNet.node[77].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[77].params", "{0.000000, 1.000000, }" },
            { "floatNet.node[78].inputs", "{}" },
            { "floatNet.node[78].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[78].params", "{}" },
            { "floatNet.node[79].inputs", "{17, }" },
            { "floatNet.node[79].op", "ML_FOP_1x0_ARC_COSINE" },
            { "floatNet.node[79].params", "{1.000000, 0.000000, 1.000000, 2.540294, }" },
            { "floatNet.node[80].inputs", "{14, 72, 12, 32, }" },
            { "floatNet.node[80].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[80].params", "{0.000000, 0.205995, 0.208297, 10.000000, 0.410165, 0.000000, }" },
            { "floatNet.node[81].inputs", "{0, }" },
            { "floatNet.node[81].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[81].params", "{1.000000, 0.000000, }" },
            { "floatNet.node[82].inputs", "{0, }" },
            { "floatNet.node[82].op", "ML_FOP_1x0_SQRT" },
            { "floatNet.node[82].params", "{255.564316, }" },
            { "floatNet.node[83].inputs", "{0, }" },
            { "floatNet.node[83].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[83].params", "{996.419739, }" },
            { "floatNet.node[84].inputs", "{0, }" },
            { "floatNet.node[84].op", "ML_FOP_0x0_ONE" },
            { "floatNet.node[84].params", "{0.780481, 1.000000, 1671.849487, 0.000000, }" },
            { "floatNet.node[85].inputs", "{0, 82, }" },
            { "floatNet.node[85].op", "ML_FOP_Nx0_MIN" },
            { "floatNet.node[85].params", "{1.741242, }" },
            { "floatNet.node[86].inputs", "{40, 7, 0, }" },
            { "floatNet.node[86].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[86].params", "{0.000000, 0.520110, 0.205290, 0.000000, }" },
            { "floatNet.node[87].inputs", "{57, 0, }" },
            { "floatNet.node[87].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[87].params", "{2.539918, 0.212144, 990.963989, 0.181965, 0.000000, -0.213307, }" },
            { "floatNet.node[88].inputs", "{79, 0, }" },
            { "floatNet.node[88].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[88].params", "{}" },
            { "floatNet.node[89].inputs", "{49, }" },
            { "floatNet.node[89].op", "ML_FOP_1x1_QUADRATIC_UP" },
            { "floatNet.node[89].params", "{1.000000, 0.000000, }" },
            { "floatNet.node[90].inputs", "{0, }" },
            { "floatNet.node[90].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[90].params", "{}" },
            { "floatNet.node[91].inputs", "{76, 53, 0, 0, }" },
            { "floatNet.node[91].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[91].params", "{}" },
            { "floatNet.node[92].inputs", "{}" },
            { "floatNet.node[92].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[92].params", "{}" },
            { "floatNet.node[93].inputs", "{0, }" },
            { "floatNet.node[93].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[93].params", "{1.000000, }" },
            { "floatNet.node[94].inputs", "{}" },
            { "floatNet.node[94].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[94].params", "{}" },
            { "floatNet.node[95].inputs", "{90, 86, 19, 0, }" },
            { "floatNet.node[95].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[95].params", "{0.198811, }" },
            { "floatNet.node[96].inputs", "{61, }" },
            { "floatNet.node[96].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[96].params", "{}" },
            { "floatNet.node[97].inputs", "{}" },
            { "floatNet.node[97].op", "ML_FOP_1x1_LTE" },
            { "floatNet.node[97].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[98].inputs", "{40, 58, 12, 0, 0, }" },
            { "floatNet.node[98].op", "ML_FOP_1x0_IDENTITY" },
            { "floatNet.node[98].params", "{0.220758, 0.950000, 0.526828, 0.000000, 0.187072, 978.703247, }" },
            { "floatNet.node[99].inputs", "{70, 29, }" },
            { "floatNet.node[99].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[99].params", "{}" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "47.517754" },
            { "guardRange", "85.632729" },
            { "input[0].crowdType", "NEURAL_CROWD_CORES" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "TRUE" },
            { "input[0].valueType", "NEURAL_VALUE_MOBID" },
            { "input[10].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[10].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[10].radius", "0.000000" },
            { "input[10].useTangent", "TRUE" },
            { "input[10].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[11].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[11].forceType", "NEURAL_FORCE_ZERO" },
            { "input[11].radius", "0.000000" },
            { "input[11].useTangent", "TRUE" },
            { "input[11].valueType", "NEURAL_VALUE_FORCE" },
            { "input[12].forceType", "NEURAL_FORCE_BASE" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "TRUE" },
            { "input[12].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[13].crowdType", "NEURAL_CROWD_CORES" },
            { "input[13].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[13].radius", "0.000000" },
            { "input[13].valueType", "NEURAL_VALUE_TICK" },
            { "input[14].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[14].forceType", "NEURAL_FORCE_ZERO" },
            { "input[14].radius", "0.000000" },
            { "input[14].useTangent", "FALSE" },
            { "input[14].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[15].crowdType", "NEURAL_CROWD_CORES" },
            { "input[15].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[15].radius", "0.000000" },
            { "input[15].useTangent", "TRUE" },
            { "input[15].valueType", "NEURAL_VALUE_CROWD" },
            { "input[16].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[16].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "FALSE" },
            { "input[16].valueType", "NEURAL_VALUE_FORCE" },
            { "input[17].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[17].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "TRUE" },
            { "input[17].valueType", "NEURAL_VALUE_CROWD" },
            { "input[18].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[18].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[18].radius", "0.000000" },
            { "input[18].useTangent", "FALSE" },
            { "input[18].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[19].crowdType", "NEURAL_CROWD_CORES" },
            { "input[19].radius", "0.000000" },
            { "input[19].valueType", "NEURAL_VALUE_MOBID" },
            { "input[1].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[1].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[1].radius", "0.000000" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[20].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[20].radius", "0.000000" },
            { "input[20].useTangent", "TRUE" },
            { "input[20].valueType", "NEURAL_VALUE_TICK" },
            { "input[21].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[21].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[21].radius", "0.000000" },
            { "input[21].useTangent", "TRUE" },
            { "input[21].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[22].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[22].forceType", "NEURAL_FORCE_COHERE" },
            { "input[22].radius", "-1.000000" },
            { "input[22].useTangent", "TRUE" },
            { "input[22].valueType", "NEURAL_VALUE_MOBID" },
            { "input[23].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[23].forceType", "NEURAL_FORCE_CENTER" },
            { "input[23].radius", "0.000000" },
            { "input[23].useTangent", "FALSE" },
            { "input[23].valueType", "NEURAL_VALUE_FORCE" },
            { "input[24].crowdType", "NEURAL_CROWD_CORES" },
            { "input[24].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[24].radius", "1876.846924" },
            { "input[24].useTangent", "FALSE" },
            { "input[24].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[2].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[2].forceType", "NEURAL_FORCE_CORES" },
            { "input[2].radius", "142.804443" },
            { "input[2].useTangent", "FALSE" },
            { "input[2].valueType", "NEURAL_VALUE_TICK" },
            { "input[3].crowdType", "NEURAL_CROWD_CORES" },
            { "input[3].forceType", "NEURAL_FORCE_CENTER" },
            { "input[3].radius", "0.000000" },
            { "input[3].useTangent", "FALSE" },
            { "input[3].valueType", "NEURAL_VALUE_CROWD" },
            { "input[4].crowdType", "NEURAL_CROWD_CORES" },
            { "input[4].forceType", "NEURAL_FORCE_COHERE" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "FALSE" },
            { "input[4].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[5].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[5].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "FALSE" },
            { "input[5].valueType", "NEURAL_VALUE_CROWD" },
            { "input[6].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[6].forceType", "NEURAL_FORCE_EDGES" },
            { "input[6].radius", "0.000000" },
            { "input[6].useTangent", "TRUE" },
            { "input[6].valueType", "NEURAL_VALUE_FORCE" },
            { "input[7].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[7].forceType", "NEURAL_FORCE_BASE" },
            { "input[7].radius", "0.000000" },
            { "input[7].useTangent", "TRUE" },
            { "input[7].valueType", "NEURAL_VALUE_FORCE" },
            { "input[8].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[8].forceType", "NEURAL_FORCE_HEADING" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "TRUE" },
            { "input[8].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[9].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[9].radius", "0.000000" },
            { "input[9].useTangent", "FALSE" },
            { "input[9].valueType", "NEURAL_VALUE_MOBID" },
            { "output[100].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[100].radius", "-1.000000" },
            { "output[100].useTangent", "FALSE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[101].radius", "0.000000" },
            { "output[101].useTangent", "TRUE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_HEADING" },
            { "output[102].radius", "0.000000" },
            { "output[102].useTangent", "FALSE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_CORES" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "FALSE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[104].radius", "1716.954956" },
            { "output[104].useTangent", "TRUE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_ZERO" },
            { "output[105].radius", "0.000000" },
            { "output[105].useTangent", "FALSE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[106].radius", "-0.857375" },
            { "output[106].useTangent", "TRUE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[107].radius", "0.000000" },
            { "output[107].useTangent", "TRUE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[108].radius", "0.000000" },
            { "output[108].useTangent", "TRUE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_BASE" },
            { "output[109].radius", "426.598633" },
            { "output[109].useTangent", "TRUE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[110].radius", "0.000000" },
            { "output[110].useTangent", "TRUE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[111].radius", "0.000000" },
            { "output[111].useTangent", "TRUE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_CORNERS" },
            { "output[112].radius", "0.000000" },
            { "output[112].useTangent", "TRUE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[113].radius", "0.000000" },
            { "output[113].useTangent", "FALSE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_CORES" },
            { "output[114].radius", "0.000000" },
            { "output[114].useTangent", "TRUE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[115].radius", "0.000000" },
            { "output[115].useTangent", "FALSE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "FALSE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_ZERO" },
            { "output[117].radius", "-1.000000" },
            { "output[117].useTangent", "TRUE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[118].radius", "0.000000" },
            { "output[118].useTangent", "FALSE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[119].radius", "0.000000" },
            { "output[119].useTangent", "FALSE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[120].radius", "0.000000" },
            { "output[120].useTangent", "FALSE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_EDGES" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "TRUE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_COHERE" },
            { "output[122].radius", "0.000000" },
            { "output[122].useTangent", "FALSE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[123].radius", "0.000000" },
            { "output[123].useTangent", "FALSE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_CORNERS" },
            { "output[124].radius", "0.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "TRUE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1650.026733" },
            { "startingMinRadius", "395.996002" },
        };
        NeuralConfigValue configs3[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "140.012405" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "451.825134" },
            { "evadeStrictDistance", "150.789139" },
            { "evadeUseStrictDistance", "FALSE" },
            { "floatNet.node[100].inputs", "{}" },
            { "floatNet.node[100].op", "ML_FOP_NxN_SELECT_GTE" },
            { "floatNet.node[100].params", "{-1.000000, 260.331909, 1.000000, 256.135132, 2295.589844, 1.000000, 0.000000, }" },
            { "floatNet.node[101].inputs", "{8, 35, 85, 0, 0, 60, 26, }" },
            { "floatNet.node[101].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[101].params", "{}" },
            { "floatNet.node[102].inputs", "{100, 0, }" },
            { "floatNet.node[102].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[102].params", "{0.000000, 0.950000, 2.018069, 0.178028, 0.197230, 154.894684, 0.000000, }" },
            { "floatNet.node[103].inputs", "{68, 63, 80, 36, 0, 87, }" },
            { "floatNet.node[103].op", "ML_FOP_1x0_ARC_COSINE" },
            { "floatNet.node[103].params", "{0.085139, 1.000000, 1041.193604, 0.828878, 1014.713684, 0.000000, 0.417343, 0.208894, }" },
            { "floatNet.node[104].inputs", "{75, 22, 85, }" },
            { "floatNet.node[104].op", "ML_FOP_1x0_SQUARE" },
            { "floatNet.node[104].params", "{0.000000, 0.000000, 0.742274, 3000.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[105].inputs", "{15, 58, 0, }" },
            { "floatNet.node[105].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[105].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[106].inputs", "{19, 8, 0, 86, 0, }" },
            { "floatNet.node[106].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[106].params", "{4.723891, }" },
            { "floatNet.node[107].inputs", "{29, 51, 66, 106, 0, }" },
            { "floatNet.node[107].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[107].params", "{}" },
            { "floatNet.node[108].inputs", "{0, 79, }" },
            { "floatNet.node[108].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[108].params", "{0.000000, }" },
            { "floatNet.node[109].inputs", "{76, }" },
            { "floatNet.node[109].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[109].params", "{1.000000, 6916.288574, 1.038797, 30.000000, }" },
            { "floatNet.node[110].inputs", "{45, 43, 67, 0, 44, 0, }" },
            { "floatNet.node[110].op", "ML_FOP_NxN_SCALED_MAX" },
            { "floatNet.node[110].params", "{}" },
            { "floatNet.node[111].inputs", "{89, 99, 44, 75, }" },
            { "floatNet.node[111].op", "ML_FOP_1x1_LTE" },
            { "floatNet.node[111].params", "{0.524702, }" },
            { "floatNet.node[112].inputs", "{}" },
            { "floatNet.node[112].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[112].params", "{1.000000, 0.000000, }" },
            { "floatNet.node[113].inputs", "{7, 46, 54, }" },
            { "floatNet.node[113].op", "ML_FOP_1x0_ABS" },
            { "floatNet.node[113].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[114].inputs", "{55, 73, 54, }" },
            { "floatNet.node[114].op", "ML_FOP_0x0_ONE" },
            { "floatNet.node[114].params", "{4.642954, 1095.483643, 0.000000, }" },
            { "floatNet.node[115].inputs", "{1, }" },
            { "floatNet.node[115].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[115].params", "{1640.494385, 255.866455, 0.900000, 0.486635, 0.000000, 151.069748, 0.000000, 0.000000, }" },
            { "floatNet.node[116].inputs", "{102, 1, 44, 109, 104, 23, 87, 0, }" },
            { "floatNet.node[116].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[116].params", "{0.743281, 0.000000, 0.215876, }" },
            { "floatNet.node[117].inputs", "{}" },
            { "floatNet.node[117].op", "ML_FOP_1x2_OUTSIDE_RANGE" },
            { "floatNet.node[117].params", "{1.000000, 0.238153, 1.000000, 0.004479, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[118].inputs", "{}" },
            { "floatNet.node[118].op", "ML_FOP_1x2_CLAMPED_SCALE_FROM_UNIT" },
            { "floatNet.node[118].params", "{0.195664, }" },
            { "floatNet.node[119].inputs", "{19, 87, 71, 77, }" },
            { "floatNet.node[119].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[119].params", "{1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[120].inputs", "{0, 0, }" },
            { "floatNet.node[120].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[120].params", "{1.000000, 0.181950, 244.659668, 1.494534, 0.000000, }" },
            { "floatNet.node[121].inputs", "{}" },
            { "floatNet.node[121].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[121].params", "{0.216702, 0.000000, }" },
            { "floatNet.node[122].inputs", "{107, }" },
            { "floatNet.node[122].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[122].params", "{0.000000, 0.000000, 0.000000, 0.000000, 1.034437, }" },
            { "floatNet.node[123].inputs", "{}" },
            { "floatNet.node[123].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[123].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[124].inputs", "{0, }" },
            { "floatNet.node[124].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[124].params", "{8097.275879, 1.000000, 10.000000, 1.000000, 4.943307, 0.730045, }" },
            { "floatNet.node[25].inputs", "{7, 0, 17, 0, 0, }" },
            { "floatNet.node[25].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[25].params", "{0.276595, 0.072324, 0.727179, 939.326782, 1.000000, }" },
            { "floatNet.node[26].inputs", "{23, 19, 25, 22, 0, }" },
            { "floatNet.node[26].op", "ML_FOP_Nx0_MIN" },
            { "floatNet.node[26].params", "{0.696340, 10.000000, -0.015580, 1.000000, }" },
            { "floatNet.node[27].inputs", "{19, 15, 16, 4, 3, 11, }" },
            { "floatNet.node[27].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[27].params", "{1.000000, }" },
            { "floatNet.node[28].inputs", "{2, 20, 15, 13, 5, 7, 11, 8, }" },
            { "floatNet.node[28].op", "ML_FOP_NxN_SCALED_MAX" },
            { "floatNet.node[28].params", "{}" },
            { "floatNet.node[29].inputs", "{}" },
            { "floatNet.node[29].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[29].params", "{1.000000, 1.744278, }" },
            { "floatNet.node[30].inputs", "{3, 5, 0, }" },
            { "floatNet.node[30].op", "ML_FOP_NxN_SELECT_GTE" },
            { "floatNet.node[30].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[31].inputs", "{29, 8, 24, 14, 0, 28, 6, 0, }" },
            { "floatNet.node[31].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[31].params", "{1.904890, 1.000000, 1.000000, 0.900000, 0.000000, 0.000000, }" },
            { "floatNet.node[32].inputs", "{28, 13, 15, 31, 13, 31, 29, 13, }" },
            { "floatNet.node[32].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[32].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[33].inputs", "{1, 18, 27, 25, 24, 0, }" },
            { "floatNet.node[33].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[33].params", "{0.494063, 0.000000, }" },
            { "floatNet.node[34].inputs", "{16, 15, 17, 0, }" },
            { "floatNet.node[34].op", "ML_FOP_1x1_GTE" },
            { "floatNet.node[34].params", "{0.000000, }" },
            { "floatNet.node[35].inputs", "{19, 32, 15, 9, 30, }" },
            { "floatNet.node[35].op", "ML_FOP_NxN_SCALED_MAX" },
            { "floatNet.node[35].params", "{0.000000, }" },
            { "floatNet.node[36].inputs", "{26, 0, 18, 12, 26, 4, 0, }" },
            { "floatNet.node[36].op", "ML_FOP_1x1_STRICT_ON" },
            { "floatNet.node[36].params", "{0.192192, 0.183078, }" },
            { "floatNet.node[37].inputs", "{22, }" },
            { "floatNet.node[37].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[37].params", "{0.783102, 1.000000, 1.000000, 0.210748, 0.000000, }" },
            { "floatNet.node[38].inputs", "{30, 24, 14, 19, 13, 0, 0, }" },
            { "floatNet.node[38].op", "ML_FOP_1x0_ABS" },
            { "floatNet.node[38].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[39].inputs", "{22, 8, 0, 9, 8, 13, 9, }" },
            { "floatNet.node[39].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[39].params", "{5000.000000, 1.022362, 0.514056, 0.203762, 249.913193, 0.000000, 0.000000, }" },
            { "floatNet.node[40].inputs", "{11, 5, 12, 0, }" },
            { "floatNet.node[40].op", "ML_FOP_Nx0_SUM" },
            { "floatNet.node[40].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[41].inputs", "{0, }" },
            { "floatNet.node[41].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[41].params", "{30.000000, 1.000000, 1.813025, 0.212026, 1963.231567, 0.000000, 0.000000, }" },
            { "floatNet.node[42].inputs", "{39, 12, 8, 17, }" },
            { "floatNet.node[42].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[42].params", "{3000.000000, 0.729000, 0.945000, 9.371091, 1.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[43].inputs", "{}" },
            { "floatNet.node[43].op", "ML_FOP_1x0_ARC_COSINE" },
            { "floatNet.node[43].params", "{0.000000, }" },
            { "floatNet.node[44].inputs", "{1, 3, 11, }" },
            { "floatNet.node[44].op", "ML_FOP_0x0_ONE" },
            { "floatNet.node[44].params", "{0.188125, 0.000000, 1.000000, }" },
            { "floatNet.node[45].inputs", "{6, 5, 30, 27, 0, 14, 0, }" },
            { "floatNet.node[45].op", "ML_FOP_1x3_IF_GTE_ELSE" },
            { "floatNet.node[45].params", "{0.950000, 1.000000, 0.000000, 1.000000, 0.220142, 0.000000, }" },
            { "floatNet.node[46].inputs", "{0, 0, }" },
            { "floatNet.node[46].op", "ML_FOP_1x0_NEGATE" },
            { "floatNet.node[46].params", "{0.507555, 0.000000, }" },
            { "floatNet.node[47].inputs", "{6, 0, }" },
            { "floatNet.node[47].op", "ML_FOP_NxN_SELECT_GTE" },
            { "floatNet.node[47].params", "{3.272798, 1.000000, 979.790344, 0.183023, 0.000000, }" },
            { "floatNet.node[48].inputs", "{27, 20, }" },
            { "floatNet.node[48].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[48].params", "{0.950000, 1.000000, 1.000000, 0.456655, 0.946878, 0.000000, }" },
            { "floatNet.node[49].inputs", "{26, 0, 37, 0, 0, }" },
            { "floatNet.node[49].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[49].params", "{0.000000, }" },
            { "floatNet.node[50].inputs", "{39, 29, 16, 12, 4, 38, }" },
            { "floatNet.node[50].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[50].params", "{}" },
            { "floatNet.node[51].inputs", "{46, 39, 22, 18, 27, 0, 0, 8, }" },
            { "floatNet.node[51].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[51].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[52].inputs", "{25, 28, 49, }" },
            { "floatNet.node[52].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[52].params", "{}" },
            { "floatNet.node[53].inputs", "{47, 37, 9, 15, }" },
            { "floatNet.node[53].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[53].params", "{1.000000, 0.000000, 0.382849, 0.000000, }" },
            { "floatNet.node[54].inputs", "{2, }" },
            { "floatNet.node[54].op", "ML_FOP_1x0_SQUARE" },
            { "floatNet.node[54].params", "{0.806550, 0.950000, 1.000000, }" },
            { "floatNet.node[55].inputs", "{}" },
            { "floatNet.node[55].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[55].params", "{0.000000, }" },
            { "floatNet.node[56].inputs", "{0, }" },
            { "floatNet.node[56].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[56].params", "{0.000000, }" },
            { "floatNet.node[57].inputs", "{}" },
            { "floatNet.node[57].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[57].params", "{0.929074, 0.000000, 0.192525, }" },
            { "floatNet.node[58].inputs", "{0, }" },
            { "floatNet.node[58].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[58].params", "{0.771745, 10.000000, 0.369992, 0.000000, }" },
            { "floatNet.node[59].inputs", "{46, 39, 2, 15, 21, 18, 0, 0, }" },
            { "floatNet.node[59].op", "ML_FOP_NxN_SCALED_MAX" },
            { "floatNet.node[59].params", "{1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[60].inputs", "{17, 22, 54, 0, }" },
            { "floatNet.node[60].op", "ML_FOP_Nx0_MIN" },
            { "floatNet.node[60].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[61].inputs", "{25, 37, 49, 51, 53, }" },
            { "floatNet.node[61].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[61].params", "{1477.891724, 1.050000, 9.233714, 0.219896, 247.116440, }" },
            { "floatNet.node[62].inputs", "{48, 1, 51, 50, 11, 30, }" },
            { "floatNet.node[62].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[62].params", "{0.202131, 0.341515, 1.000000, 0.210529, 0.184538, 0.494634, 1.000000, }" },
            { "floatNet.node[63].inputs", "{5, 29, 2, 0, }" },
            { "floatNet.node[63].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[63].params", "{18.531652, 251.665039, 0.000000, 6.476663, 1.000985, }" },
            { "floatNet.node[64].inputs", "{0, }" },
            { "floatNet.node[64].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[64].params", "{0.799507, 0.950000, 0.000000, 1.000000, 0.000000, 0.000000, 0.218037, 1.000000, }" },
            { "floatNet.node[65].inputs", "{10, 28, 8, 0, }" },
            { "floatNet.node[65].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[65].params", "{0.900000, 30.000000, }" },
            { "floatNet.node[66].inputs", "{45, 54, 30, 25, 0, 20, 13, 47, }" },
            { "floatNet.node[66].op", "ML_FOP_0x1_CONSTANT" },
            { "floatNet.node[66].params", "{0.163419, 2824.060547, 0.199304, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[67].inputs", "{7, 0, 0, }" },
            { "floatNet.node[67].op", "ML_FOP_1x0_NEGATE" },
            { "floatNet.node[67].params", "{1.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[68].inputs", "{3, 49, 26, }" },
            { "floatNet.node[68].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[68].params", "{1.000000, 1.542832, 0.000000, 0.000000, }" },
            { "floatNet.node[69].inputs", "{8, 44, 17, 25, 37, }" },
            { "floatNet.node[69].op", "ML_FOP_1x0_SQUARE" },
            { "floatNet.node[69].params", "{0.439065, 1.000000, 2.559875, 0.217528, 0.000000, }" },
            { "floatNet.node[70].inputs", "{23, }" },
            { "floatNet.node[70].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[70].params", "{1.000000, 0.900000, 0.000000, 0.000000, }" },
            { "floatNet.node[71].inputs", "{17, 65, }" },
            { "floatNet.node[71].op", "ML_FOP_2x0_POW" },
            { "floatNet.node[71].params", "{0.000000, 0.850273, }" },
            { "floatNet.node[72].inputs", "{58, 0, }" },
            { "floatNet.node[72].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[72].params", "{0.000000, 2021.459839, 0.000000, }" },
            { "floatNet.node[73].inputs", "{19, 53, 20, 0, 0, }" },
            { "floatNet.node[73].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[73].params", "{0.000000, 0.000000, 2.492972, 0.000000, }" },
            { "floatNet.node[74].inputs", "{51, 0, }" },
            { "floatNet.node[74].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[74].params", "{-1.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[75].inputs", "{39, 7, 24, 40, }" },
            { "floatNet.node[75].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[75].params", "{1.000000, }" },
            { "floatNet.node[76].inputs", "{42, 23, 4, 56, 0, 37, }" },
            { "floatNet.node[76].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[76].params", "{1.000000, 0.950000, 1.000000, 0.206722, 0.439854, 0.212336, 0.000000, 0.000000, }" },
            { "floatNet.node[77].inputs", "{0, }" },
            { "floatNet.node[77].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[77].params", "{0.000000, }" },
            { "floatNet.node[78].inputs", "{38, 61, 30, }" },
            { "floatNet.node[78].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[78].params", "{0.186872, 0.324876, 0.000000, }" },
            { "floatNet.node[79].inputs", "{}" },
            { "floatNet.node[79].op", "ML_FOP_1x3_IF_GTE_ELSE" },
            { "floatNet.node[79].params", "{1.224218, 0.000000, }" },
            { "floatNet.node[80].inputs", "{39, 61, 42, 79, 70, 36, 54, }" },
            { "floatNet.node[80].op", "ML_FOP_1x3_IF_GTE_ELSE" },
            { "floatNet.node[80].params", "{49.972191, 3.511973, 2700.396240, 0.803550, 1052.060791, 0.493428, 0.000000, }" },
            { "floatNet.node[81].inputs", "{}" },
            { "floatNet.node[81].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[81].params", "{1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[82].inputs", "{49, 53, 24, 50, 69, 0, }" },
            { "floatNet.node[82].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[82].params", "{1.050000, 1.000000, 1.881488, 1.000000, 0.900000, 0.000000, 1042.328857, }" },
            { "floatNet.node[83].inputs", "{15, }" },
            { "floatNet.node[83].op", "ML_FOP_1x1_STRICT_ON" },
            { "floatNet.node[83].params", "{}" },
            { "floatNet.node[84].inputs", "{30, }" },
            { "floatNet.node[84].op", "ML_FOP_1x2_CLAMPED_SCALE_FROM_UNIT" },
            { "floatNet.node[84].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[85].inputs", "{31, 14, }" },
            { "floatNet.node[85].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[85].params", "{0.413553, 5.536458, 0.000000, }" },
            { "floatNet.node[86].inputs", "{68, 17, 0, 9, 0, 0, }" },
            { "floatNet.node[86].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[86].params", "{1.000000, 0.546115, 1.000000, 17806.046875, 1.000000, 2345.271240, 1.000000, 0.000000, }" },
            { "floatNet.node[87].inputs", "{80, }" },
            { "floatNet.node[87].op", "ML_FOP_2x0_POW" },
            { "floatNet.node[87].params", "{10.000000, 0.000000, 0.000000, 0.900000, }" },
            { "floatNet.node[88].inputs", "{66, 0, }" },
            { "floatNet.node[88].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[88].params", "{0.000000, }" },
            { "floatNet.node[89].inputs", "{48, 4, 76, 0, 0, }" },
            { "floatNet.node[89].op", "ML_FOP_1x0_ABS" },
            { "floatNet.node[89].params", "{1787.042603, 919.113525, 0.900000, 1.000000, 1.050000, 0.952309, }" },
            { "floatNet.node[90].inputs", "{}" },
            { "floatNet.node[90].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[90].params", "{}" },
            { "floatNet.node[91].inputs", "{46, 34, 71, 77, 42, 0, 0, }" },
            { "floatNet.node[91].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[91].params", "{0.000000, }" },
            { "floatNet.node[92].inputs", "{}" },
            { "floatNet.node[92].op", "ML_FOP_Nx0_MIN" },
            { "floatNet.node[92].params", "{0.000000, }" },
            { "floatNet.node[93].inputs", "{18, 85, 55, 0, }" },
            { "floatNet.node[93].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[93].params", "{}" },
            { "floatNet.node[94].inputs", "{}" },
            { "floatNet.node[94].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[94].params", "{}" },
            { "floatNet.node[95].inputs", "{74, 13, 86, 23, 34, 71, 0, 91, }" },
            { "floatNet.node[95].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[95].params", "{0.900000, 981.451355, }" },
            { "floatNet.node[96].inputs", "{50, 11, 52, 87, }" },
            { "floatNet.node[96].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[96].params", "{1.050000, }" },
            { "floatNet.node[97].inputs", "{0, }" },
            { "floatNet.node[97].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[97].params", "{3000.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[98].inputs", "{7, 68, 79, 10, 55, }" },
            { "floatNet.node[98].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[98].params", "{0.807975, 1.000000, 1123.613403, 1.000000, 2.617517, 0.950000, }" },
            { "floatNet.node[99].inputs", "{91, }" },
            { "floatNet.node[99].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[99].params", "{0.000000, }" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "51.553398" },
            { "guardRange", "84.483688" },
            { "input[0].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "TRUE" },
            { "input[0].valueType", "NEURAL_VALUE_CROWD" },
            { "input[10].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[10].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[10].radius", "0.000000" },
            { "input[10].useTangent", "TRUE" },
            { "input[10].valueType", "NEURAL_VALUE_MOBID" },
            { "input[11].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[11].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[11].radius", "0.000000" },
            { "input[11].useTangent", "TRUE" },
            { "input[11].valueType", "NEURAL_VALUE_TICK" },
            { "input[12].forceType", "NEURAL_FORCE_BASE" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "TRUE" },
            { "input[12].valueType", "NEURAL_VALUE_TICK" },
            { "input[13].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[13].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[13].radius", "0.000000" },
            { "input[13].useTangent", "TRUE" },
            { "input[13].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[14].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[14].forceType", "NEURAL_FORCE_ZERO" },
            { "input[14].radius", "0.000000" },
            { "input[14].useTangent", "FALSE" },
            { "input[14].valueType", "NEURAL_VALUE_TICK" },
            { "input[15].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[15].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[15].radius", "0.000000" },
            { "input[15].useTangent", "TRUE" },
            { "input[15].valueType", "NEURAL_VALUE_TICK" },
            { "input[16].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[16].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "TRUE" },
            { "input[16].valueType", "NEURAL_VALUE_FORCE" },
            { "input[17].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[17].forceType", "NEURAL_FORCE_ZERO" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "TRUE" },
            { "input[17].valueType", "NEURAL_VALUE_CROWD" },
            { "input[18].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[18].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[18].radius", "0.000000" },
            { "input[18].useTangent", "TRUE" },
            { "input[18].valueType", "NEURAL_VALUE_MOBID" },
            { "input[19].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[19].radius", "-1.000000" },
            { "input[19].useTangent", "FALSE" },
            { "input[19].valueType", "NEURAL_VALUE_FORCE" },
            { "input[1].crowdType", "NEURAL_CROWD_CORES" },
            { "input[1].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[1].radius", "0.000000" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[20].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[20].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[20].radius", "0.000000" },
            { "input[20].useTangent", "TRUE" },
            { "input[20].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[21].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[21].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[21].radius", "0.000000" },
            { "input[21].useTangent", "TRUE" },
            { "input[21].valueType", "NEURAL_VALUE_FORCE" },
            { "input[22].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[22].forceType", "NEURAL_FORCE_BASE" },
            { "input[22].radius", "-1.000000" },
            { "input[22].useTangent", "FALSE" },
            { "input[22].valueType", "NEURAL_VALUE_FORCE" },
            { "input[23].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[23].forceType", "NEURAL_FORCE_CORES" },
            { "input[23].radius", "-1.000000" },
            { "input[23].useTangent", "FALSE" },
            { "input[23].valueType", "NEURAL_VALUE_ZERO" },
            { "input[24].crowdType", "NEURAL_CROWD_CORES" },
            { "input[24].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[24].radius", "1876.846924" },
            { "input[24].useTangent", "TRUE" },
            { "input[24].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[2].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[2].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[2].radius", "142.804443" },
            { "input[2].useTangent", "FALSE" },
            { "input[2].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[3].crowdType", "NEURAL_CROWD_CORES" },
            { "input[3].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[3].radius", "0.000000" },
            { "input[3].useTangent", "FALSE" },
            { "input[3].valueType", "NEURAL_VALUE_CROWD" },
            { "input[4].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[4].forceType", "NEURAL_FORCE_CORES" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "FALSE" },
            { "input[4].valueType", "NEURAL_VALUE_ZERO" },
            { "input[5].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[5].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "FALSE" },
            { "input[5].valueType", "NEURAL_VALUE_MOBID" },
            { "input[6].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[6].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[6].radius", "-1.000000" },
            { "input[6].useTangent", "FALSE" },
            { "input[6].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[7].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[7].forceType", "NEURAL_FORCE_CENTER" },
            { "input[7].radius", "156.061691" },
            { "input[7].useTangent", "TRUE" },
            { "input[7].valueType", "NEURAL_VALUE_CROWD" },
            { "input[8].crowdType", "NEURAL_CROWD_CORES" },
            { "input[8].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "TRUE" },
            { "input[8].valueType", "NEURAL_VALUE_ZERO" },
            { "input[9].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[9].forceType", "NEURAL_FORCE_EDGES" },
            { "input[9].radius", "0.000000" },
            { "input[9].useTangent", "FALSE" },
            { "input[9].valueType", "NEURAL_VALUE_FORCE" },
            { "output[100].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[100].radius", "-1.000000" },
            { "output[100].useTangent", "FALSE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_COHERE" },
            { "output[101].radius", "1346.359497" },
            { "output[101].useTangent", "TRUE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_BASE" },
            { "output[102].radius", "144.401123" },
            { "output[102].useTangent", "FALSE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "TRUE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[104].radius", "1716.403198" },
            { "output[104].useTangent", "FALSE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[105].radius", "0.000000" },
            { "output[105].useTangent", "TRUE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "output[106].radius", "-0.814506" },
            { "output[106].useTangent", "FALSE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_CORES" },
            { "output[107].radius", "0.000000" },
            { "output[107].useTangent", "TRUE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[108].radius", "0.000000" },
            { "output[108].useTangent", "TRUE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[109].radius", "426.598633" },
            { "output[109].useTangent", "TRUE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[110].radius", "-1.000000" },
            { "output[110].useTangent", "FALSE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[111].radius", "0.000000" },
            { "output[111].useTangent", "TRUE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_ZERO" },
            { "output[112].radius", "0.000000" },
            { "output[112].useTangent", "TRUE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[113].radius", "0.000000" },
            { "output[113].useTangent", "FALSE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_CORES" },
            { "output[114].radius", "143.071716" },
            { "output[114].useTangent", "FALSE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_ZERO" },
            { "output[115].radius", "-1.000000" },
            { "output[115].useTangent", "TRUE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_ZERO" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "FALSE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_ZERO" },
            { "output[117].radius", "-1.000000" },
            { "output[117].useTangent", "FALSE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_COHERE" },
            { "output[118].radius", "150.485336" },
            { "output[118].useTangent", "FALSE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_EDGES" },
            { "output[119].radius", "0.000000" },
            { "output[119].useTangent", "TRUE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_BASE" },
            { "output[120].radius", "0.000000" },
            { "output[120].useTangent", "FALSE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "TRUE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_CENTER" },
            { "output[122].radius", "155.966476" },
            { "output[122].useTangent", "TRUE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[123].radius", "-1.000000" },
            { "output[123].useTangent", "TRUE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_HEADING" },
            { "output[124].radius", "0.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "FALSE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1785.701294" },
            { "startingMinRadius", "776.332031" },
        };
        NeuralConfigValue configs4[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "133.011780" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "114.199509" },
            { "evadeStrictDistance", "294.574341" },
            { "evadeUseStrictDistance", "FALSE" },
            { "floatNet.node[100].inputs", "{7, }" },
            { "floatNet.node[100].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[100].params", "{1.000000, 1.000000, 0.950000, 10.000000, 1.000000, 0.000000, 0.000000, 152.136093, }" },
            { "floatNet.node[101].inputs", "{11, 88, 0, 88, 0, }" },
            { "floatNet.node[101].op", "ML_FOP_2x0_POW" },
            { "floatNet.node[101].params", "{1.049379, 1.000000, 0.000000, 147.202896, }" },
            { "floatNet.node[102].inputs", "{90, 40, }" },
            { "floatNet.node[102].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[102].params", "{0.857375, 1.997888, 0.297429, 0.776726, 1.465313, 0.000000, }" },
            { "floatNet.node[103].inputs", "{86, 35, 64, 2, 47, 46, 91, 0, }" },
            { "floatNet.node[103].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[103].params", "{6.222969, 1.000000, 1.000000, 2.184535, 0.456267, 1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[104].inputs", "{36, 58, 0, 0, }" },
            { "floatNet.node[104].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[104].params", "{0.503308, 0.950000, 0.209238, }" },
            { "floatNet.node[105].inputs", "{65, 81, 50, 64, }" },
            { "floatNet.node[105].op", "ML_FOP_NxN_SCALED_MIN" },
            { "floatNet.node[105].params", "{0.000000, -0.191005, 0.000000, }" },
            { "floatNet.node[106].inputs", "{96, 103, 33, 102, 0, 77, }" },
            { "floatNet.node[106].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[106].params", "{}" },
            { "floatNet.node[107].inputs", "{102, 22, 30, 46, 36, 55, 66, 0, }" },
            { "floatNet.node[107].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[107].params", "{905.291565, 0.000000, }" },
            { "floatNet.node[108].inputs", "{87, 0, 0, }" },
            { "floatNet.node[108].op", "ML_FOP_1x3_IF_GTE_ELSE" },
            { "floatNet.node[108].params", "{0.000000, }" },
            { "floatNet.node[109].inputs", "{76, }" },
            { "floatNet.node[109].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[109].params", "{1.000000, 1.000000, 1.090737, 30.000000, 0.000000, }" },
            { "floatNet.node[110].inputs", "{5, 40, 5, 0, 89, }" },
            { "floatNet.node[110].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[110].params", "{}" },
            { "floatNet.node[111].inputs", "{87, 0, 78, }" },
            { "floatNet.node[111].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[111].params", "{0.018777, 0.000000, }" },
            { "floatNet.node[112].inputs", "{}" },
            { "floatNet.node[112].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[112].params", "{0.000000, }" },
            { "floatNet.node[113].inputs", "{46, 22, }" },
            { "floatNet.node[113].op", "ML_FOP_1x0_ABS" },
            { "floatNet.node[113].params", "{0.000000, 0.101138, 0.000000, 0.950000, 7459.850586, 0.659153, }" },
            { "floatNet.node[114].inputs", "{19, 74, 0, }" },
            { "floatNet.node[114].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[114].params", "{0.000000, 0.000000, 0.493492, }" },
            { "floatNet.node[115].inputs", "{}" },
            { "floatNet.node[115].op", "ML_FOP_1x0_ABS" },
            { "floatNet.node[115].params", "{1.050000, 0.715531, 0.000000, 0.916175, 1.000000, 1.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[116].inputs", "{28, 53, 101, 22, 34, 63, }" },
            { "floatNet.node[116].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[116].params", "{0.215876, }" },
            { "floatNet.node[117].inputs", "{}" },
            { "floatNet.node[117].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[117].params", "{0.226245, 1.000000, 0.000000, 0.000000, 0.000000, 0.212163, }" },
            { "floatNet.node[118].inputs", "{0, }" },
            { "floatNet.node[118].op", "ML_FOP_1x0_SQUARE" },
            { "floatNet.node[118].params", "{1.000000, 1.000000, 0.623475, 0.692937, }" },
            { "floatNet.node[119].inputs", "{76, 66, 53, 53, }" },
            { "floatNet.node[119].op", "ML_FOP_1x0_IDENTITY" },
            { "floatNet.node[119].params", "{1.000000, 0.000000, }" },
            { "floatNet.node[120].inputs", "{34, 0, 0, }" },
            { "floatNet.node[120].op", "ML_FOP_1x0_SQUARE" },
            { "floatNet.node[120].params", "{1.000000, 0.181950, 1.000000, 1.494534, 0.176735, 0.000000, 0.000000, }" },
            { "floatNet.node[121].inputs", "{}" },
            { "floatNet.node[121].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[121].params", "{0.195032, 1.000000, }" },
            { "floatNet.node[122].inputs", "{102, 47, 26, }" },
            { "floatNet.node[122].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[122].params", "{1.000000, 0.988650, 7.784729, 0.928666, 0.000000, 1.000000, }" },
            { "floatNet.node[123].inputs", "{}" },
            { "floatNet.node[123].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[123].params", "{0.000000, 0.990000, 0.352179, 0.950000, 0.007601, 4.214412, }" },
            { "floatNet.node[124].inputs", "{41, }" },
            { "floatNet.node[124].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[124].params", "{5000.000000, 1.000000, 3649.973633, 1.000000, 0.000000, }" },
            { "floatNet.node[25].inputs", "{17, 23, 0, 4, 20, 12, 10, }" },
            { "floatNet.node[25].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[25].params", "{0.094478, 0.072324, 1.050000, 0.900000, 642.126099, 0.000000, }" },
            { "floatNet.node[26].inputs", "{15, 7, 14, 23, }" },
            { "floatNet.node[26].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[26].params", "{0.000000, }" },
            { "floatNet.node[27].inputs", "{0, 1, 7, 9, 19, 0, }" },
            { "floatNet.node[27].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[27].params", "{0.084861, 0.218325, 9603.860352, 1.000000, }" },
            { "floatNet.node[28].inputs", "{21, 8, 25, 26, }" },
            { "floatNet.node[28].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[28].params", "{1.416955, 0.206054, 0.000000, }" },
            { "floatNet.node[29].inputs", "{}" },
            { "floatNet.node[29].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[29].params", "{}" },
            { "floatNet.node[30].inputs", "{3, 5, 28, 10, 25, 0, }" },
            { "floatNet.node[30].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[30].params", "{0.077485, 0.000000, }" },
            { "floatNet.node[31].inputs", "{25, 25, 3, 21, 26, }" },
            { "floatNet.node[31].op", "ML_FOP_1x0_SQRT" },
            { "floatNet.node[31].params", "{15379.475586, 31.499998, 0.201257, }" },
            { "floatNet.node[32].inputs", "{28, 26, 11, 25, 25, 24, 29, 9, }" },
            { "floatNet.node[32].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[32].params", "{0.000000, 1.000000, 1.000000, 1.041990, 0.000000, }" },
            { "floatNet.node[33].inputs", "{20, 9, 16, 24, }" },
            { "floatNet.node[33].op", "ML_FOP_1x3_IF_GTE_ELSE" },
            { "floatNet.node[33].params", "{1.000000, 1.000000, 1.584845, }" },
            { "floatNet.node[34].inputs", "{0, }" },
            { "floatNet.node[34].op", "ML_FOP_1x1_LINEAR_COMBINATION" },
            { "floatNet.node[34].params", "{1.000000, 5.002481, 238.109650, 0.000000, }" },
            { "floatNet.node[35].inputs", "{33, 2, 0, 17, }" },
            { "floatNet.node[35].op", "ML_FOP_1x0_ARC_COSINE" },
            { "floatNet.node[35].params", "{0.536906, }" },
            { "floatNet.node[36].inputs", "{8, 2, 13, 21, }" },
            { "floatNet.node[36].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[36].params", "{1.000000, 0.000000, }" },
            { "floatNet.node[37].inputs", "{}" },
            { "floatNet.node[37].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[37].params", "{0.783102, 1.000000, 1.000000, 0.210748, 0.000000, }" },
            { "floatNet.node[38].inputs", "{22, 24, 17, 25, 4, 3, 0, }" },
            { "floatNet.node[38].op", "ML_FOP_3x3_LINEAR_COMBINATION" },
            { "floatNet.node[38].params", "{0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[39].inputs", "{12, 37, 0, 4, 8, 9, 11, }" },
            { "floatNet.node[39].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[39].params", "{5000.000000, 1.022362, 4.849816, 0.683039, 249.913193, 0.798492, 0.211210, }" },
            { "floatNet.node[40].inputs", "{28, 10, 19, 4, 0, }" },
            { "floatNet.node[40].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[40].params", "{0.631652, 1.050000, 1.000000, 0.000000, 0.186076, }" },
            { "floatNet.node[41].inputs", "{21, 0, }" },
            { "floatNet.node[41].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[41].params", "{1.000000, 0.414951, 0.382622, 0.000000, }" },
            { "floatNet.node[42].inputs", "{17, 28, 16, 16, 32, 29, 36, }" },
            { "floatNet.node[42].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[42].params", "{2850.000000, 1015.560608, 2.277452, 1.000000, 0.950000, 0.868878, 10000.000000, 0.000000, }" },
            { "floatNet.node[43].inputs", "{0, }" },
            { "floatNet.node[43].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[43].params", "{0.789896, 0.000000, }" },
            { "floatNet.node[44].inputs", "{40, 12, 17, 11, }" },
            { "floatNet.node[44].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[44].params", "{0.000000, }" },
            { "floatNet.node[45].inputs", "{29, 8, 43, 30, 0, }" },
            { "floatNet.node[45].op", "ML_FOP_1x0_SQUARE" },
            { "floatNet.node[45].params", "{1.000000, 4582.076660, 0.519133, 1.000000, 2925.772705, 0.000000, 1.000000, 1.000000, }" },
            { "floatNet.node[46].inputs", "{}" },
            { "floatNet.node[46].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[46].params", "{0.945000, 0.000000, }" },
            { "floatNet.node[47].inputs", "{6, 0, }" },
            { "floatNet.node[47].op", "ML_FOP_NxN_SELECT_GTE" },
            { "floatNet.node[47].params", "{3.272798, 1.000000, 979.790344, 0.183023, 0.000000, }" },
            { "floatNet.node[48].inputs", "{41, 30, 30, 42, }" },
            { "floatNet.node[48].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[48].params", "{1.000000, 3997.159668, 30.000000, }" },
            { "floatNet.node[49].inputs", "{39, 24, 14, 1, 41, 22, 29, }" },
            { "floatNet.node[49].op", "ML_FOP_1x0_IDENTITY" },
            { "floatNet.node[49].params", "{0.000000, }" },
            { "floatNet.node[50].inputs", "{29, 45, 22, 12, 0, }" },
            { "floatNet.node[50].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[50].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[51].inputs", "{15, }" },
            { "floatNet.node[51].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[51].params", "{1.000000, }" },
            { "floatNet.node[52].inputs", "{36, 5, 8, 33, 30, 30, }" },
            { "floatNet.node[52].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[52].params", "{0.190338, }" },
            { "floatNet.node[53].inputs", "{18, 44, 15, 37, }" },
            { "floatNet.node[53].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[53].params", "{1.000000, 0.489412, 0.382849, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[54].inputs", "{}" },
            { "floatNet.node[54].op", "ML_FOP_1x0_SQUARE" },
            { "floatNet.node[54].params", "{2.528571, 0.855000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[55].inputs", "{24, 7, 0, 3, 0, }" },
            { "floatNet.node[55].op", "ML_FOP_1x3_IF_GTE_ELSE" },
            { "floatNet.node[55].params", "{0.172299, 0.179451, 1230.490234, 2109.739502, }" },
            { "floatNet.node[56].inputs", "{40, 0, 0, 0, 0, }" },
            { "floatNet.node[56].op", "ML_FOP_NxN_SELECT_GTE" },
            { "floatNet.node[56].params", "{6.443426, 0.000000, 0.000000, }" },
            { "floatNet.node[57].inputs", "{31, }" },
            { "floatNet.node[57].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[57].params", "{}" },
            { "floatNet.node[58].inputs", "{55, 42, 0, 19, }" },
            { "floatNet.node[58].op", "ML_FOP_1x0_IDENTITY" },
            { "floatNet.node[58].params", "{1.000000, 0.783627, 0.642635, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[59].inputs", "{17, 51, 12, 20, 32, }" },
            { "floatNet.node[59].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[59].params", "{1.000000, 1.621147, 1.000000, 0.199813, 0.000000, }" },
            { "floatNet.node[60].inputs", "{0, 0, 28, 38, 25, 55, }" },
            { "floatNet.node[60].op", "ML_FOP_1x2_CLAMPED_SCALE_FROM_UNIT" },
            { "floatNet.node[60].params", "{}" },
            { "floatNet.node[61].inputs", "{25, 52, 12, 9, 26, 0, 0, }" },
            { "floatNet.node[61].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[61].params", "{1.000000, 1.050000, 0.177038, 30.000000, }" },
            { "floatNet.node[62].inputs", "{51, 40, 51, 9, 26, 40, 10, }" },
            { "floatNet.node[62].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[62].params", "{0.758409, 0.413233, 302.113861, 0.210529, 0.171193, 0.950000, }" },
            { "floatNet.node[63].inputs", "{61, 47, 48, 4, 60, }" },
            { "floatNet.node[63].op", "ML_FOP_NxN_SCALED_MAX" },
            { "floatNet.node[63].params", "{6390.575195, 3000.000000, }" },
            { "floatNet.node[64].inputs", "{0, }" },
            { "floatNet.node[64].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[64].params", "{0.599105, 259.719025, 0.000000, 0.726580, 0.000000, 0.000000, 1.000000, 0.900000, }" },
            { "floatNet.node[65].inputs", "{63, 18, 49, 31, }" },
            { "floatNet.node[65].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[65].params", "{30.000000, 0.000000, }" },
            { "floatNet.node[66].inputs", "{44, 51, 25, 23, 9, 44, 64, }" },
            { "floatNet.node[66].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[66].params", "{0.155248, 2824.060547, 0.380564, 0.000000, 1.050000, 0.000000, }" },
            { "floatNet.node[67].inputs", "{39, 37, 0, 32, }" },
            { "floatNet.node[67].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[67].params", "{0.000000, 0.189426, 0.000000, }" },
            { "floatNet.node[68].inputs", "{0, }" },
            { "floatNet.node[68].op", "ML_FOP_1x1_LTE" },
            { "floatNet.node[68].params", "{1.000000, 0.137625, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[69].inputs", "{32, 0, 0, 57, 4, }" },
            { "floatNet.node[69].op", "ML_FOP_1x0_SQRT" },
            { "floatNet.node[69].params", "{0.790218, 1.000000, 0.900000, 0.000000, 1.677785, 0.000000, }" },
            { "floatNet.node[70].inputs", "{}" },
            { "floatNet.node[70].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[70].params", "{0.900000, 1.000000, 1.000000, 1.000000, 0.187234, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[71].inputs", "{0, }" },
            { "floatNet.node[71].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[71].params", "{0.393941, 1.030957, 0.600050, 0.183542, }" },
            { "floatNet.node[72].inputs", "{26, 38, 11, }" },
            { "floatNet.node[72].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[72].params", "{0.000000, 0.900000, 0.000000, 0.200790, }" },
            { "floatNet.node[73].inputs", "{14, 32, 72, 33, 70, 52, 0, }" },
            { "floatNet.node[73].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[73].params", "{0.950000, 2159.985596, }" },
            { "floatNet.node[74].inputs", "{2, }" },
            { "floatNet.node[74].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[74].params", "{0.855816, 30.000000, 0.509858, 0.000000, 0.000000, }" },
            { "floatNet.node[75].inputs", "{7, 38, 39, 44, 30, 0, }" },
            { "floatNet.node[75].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[75].params", "{0.000000, }" },
            { "floatNet.node[76].inputs", "{33, 23, 20, 46, 12, }" },
            { "floatNet.node[76].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[76].params", "{0.871613, 0.997500, 1.050000, 0.206722, 0.461847, 0.201719, 0.000000, 0.192487, }" },
            { "floatNet.node[77].inputs", "{46, 56, 20, 42, 6, 65, 73, 51, }" },
            { "floatNet.node[77].op", "ML_FOP_4x4_LINEAR_COMBINATION" },
            { "floatNet.node[77].params", "{0.000000, 1.091043, 0.000000, }" },
            { "floatNet.node[78].inputs", "{15, 65, 20, 14, }" },
            { "floatNet.node[78].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[78].params", "{1.000000, 156.861221, 0.000000, }" },
            { "floatNet.node[79].inputs", "{}" },
            { "floatNet.node[79].op", "ML_FOP_NxN_SELECT_GTE" },
            { "floatNet.node[79].params", "{1.102500, 1.485114, }" },
            { "floatNet.node[80].inputs", "{68, 73, 39, 64, 11, 0, 0, }" },
            { "floatNet.node[80].op", "ML_FOP_1x0_IDENTITY" },
            { "floatNet.node[80].params", "{30.000000, 1.000000, 1064.743652, 0.421881, 0.000000, 0.196257, 0.201160, 0.000000, }" },
            { "floatNet.node[81].inputs", "{0, }" },
            { "floatNet.node[81].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[81].params", "{0.463067, 1.000000, 0.000000, }" },
            { "floatNet.node[82].inputs", "{45, 1, 37, 2, 0, 0, 13, }" },
            { "floatNet.node[82].op", "ML_FOP_2x0_SUM" },
            { "floatNet.node[82].params", "{149.361816, 1.000000, }" },
            { "floatNet.node[83].inputs", "{}" },
            { "floatNet.node[83].op", "ML_FOP_1x2_OUTSIDE_RANGE" },
            { "floatNet.node[83].params", "{}" },
            { "floatNet.node[84].inputs", "{}" },
            { "floatNet.node[84].op", "ML_FOP_Nx0_SUM" },
            { "floatNet.node[84].params", "{}" },
            { "floatNet.node[85].inputs", "{64, }" },
            { "floatNet.node[85].op", "ML_FOP_NxN_SCALED_MAX" },
            { "floatNet.node[85].params", "{246.428375, 0.000000, }" },
            { "floatNet.node[86].inputs", "{9, 5, 48, 15, 55, 22, }" },
            { "floatNet.node[86].op", "ML_FOP_2x2_LINEAR_COMBINATION" },
            { "floatNet.node[86].params", "{1670.011353, 0.990000, 1.003730, 0.633820, 0.900000, 0.000000, }" },
            { "floatNet.node[87].inputs", "{4, 10, }" },
            { "floatNet.node[87].op", "ML_FOP_0x1_CONSTANT" },
            { "floatNet.node[87].params", "{255.072739, 0.197245, 0.000000, 0.000000, }" },
            { "floatNet.node[88].inputs", "{}" },
            { "floatNet.node[88].op", "ML_FOP_NxN_LINEAR_COMBINATION" },
            { "floatNet.node[88].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[89].inputs", "{85, 13, 75, 27, 77, 20, 0, }" },
            { "floatNet.node[89].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[89].params", "{1.000000, 10.000000, 28.622387, 1626.692627, 0.000000, }" },
            { "floatNet.node[90].inputs", "{58, }" },
            { "floatNet.node[90].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[90].params", "{}" },
            { "floatNet.node[91].inputs", "{12, 38, 0, 0, }" },
            { "floatNet.node[91].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[91].params", "{}" },
            { "floatNet.node[92].inputs", "{30, }" },
            { "floatNet.node[92].op", "ML_FOP_1x2_CLAMPED_SCALE_FROM_UNIT" },
            { "floatNet.node[92].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[93].inputs", "{67, 11, 29, }" },
            { "floatNet.node[93].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[93].params", "{0.000000, }" },
            { "floatNet.node[94].inputs", "{60, 0, }" },
            { "floatNet.node[94].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[94].params", "{}" },
            { "floatNet.node[95].inputs", "{29, 60, 67, 34, 77, 83, 32, }" },
            { "floatNet.node[95].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[95].params", "{}" },
            { "floatNet.node[96].inputs", "{81, 6, 29, }" },
            { "floatNet.node[96].op", "ML_FOP_1x3_IF_GTE_ELSE" },
            { "floatNet.node[96].params", "{0.735811, }" },
            { "floatNet.node[97].inputs", "{}" },
            { "floatNet.node[97].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[97].params", "{3000.000000, 1.000000, }" },
            { "floatNet.node[98].inputs", "{66, 8, 90, 65, 26, 72, 14, 15, }" },
            { "floatNet.node[98].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[98].params", "{0.501933, 1.000000, 1.000000, 0.279998, 0.000000, 0.206358, }" },
            { "floatNet.node[99].inputs", "{72, 53, }" },
            { "floatNet.node[99].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[99].params", "{0.000000, }" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "51.553398" },
            { "guardRange", "80.259506" },
            { "input[0].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "TRUE" },
            { "input[0].valueType", "NEURAL_VALUE_ZERO" },
            { "input[10].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[10].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[10].radius", "0.000000" },
            { "input[10].useTangent", "TRUE" },
            { "input[10].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[11].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[11].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[11].radius", "0.000000" },
            { "input[11].useTangent", "FALSE" },
            { "input[11].valueType", "NEURAL_VALUE_MOBID" },
            { "input[12].forceType", "NEURAL_FORCE_BASE" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "TRUE" },
            { "input[12].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[13].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[13].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[13].radius", "0.000000" },
            { "input[13].useTangent", "TRUE" },
            { "input[13].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[14].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[14].forceType", "NEURAL_FORCE_ZERO" },
            { "input[14].radius", "0.000000" },
            { "input[14].useTangent", "FALSE" },
            { "input[14].valueType", "NEURAL_VALUE_TICK" },
            { "input[15].crowdType", "NEURAL_CROWD_CORES" },
            { "input[15].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[15].radius", "0.000000" },
            { "input[15].useTangent", "TRUE" },
            { "input[15].valueType", "NEURAL_VALUE_CROWD" },
            { "input[16].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[16].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "FALSE" },
            { "input[16].valueType", "NEURAL_VALUE_ZERO" },
            { "input[17].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[17].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "FALSE" },
            { "input[17].valueType", "NEURAL_VALUE_CROWD" },
            { "input[18].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[18].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[18].radius", "0.000000" },
            { "input[18].useTangent", "TRUE" },
            { "input[18].valueType", "NEURAL_VALUE_MOBID" },
            { "input[19].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[19].radius", "-1.000000" },
            { "input[19].useTangent", "TRUE" },
            { "input[19].valueType", "NEURAL_VALUE_MOBID" },
            { "input[1].crowdType", "NEURAL_CROWD_CORES" },
            { "input[1].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[1].radius", "0.000000" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[20].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[20].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[20].radius", "0.000000" },
            { "input[20].useTangent", "TRUE" },
            { "input[20].valueType", "NEURAL_VALUE_FORCE" },
            { "input[21].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[21].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[21].radius", "144.088669" },
            { "input[21].useTangent", "TRUE" },
            { "input[21].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[22].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[22].forceType", "NEURAL_FORCE_BASE" },
            { "input[22].radius", "-1.000000" },
            { "input[22].useTangent", "FALSE" },
            { "input[22].valueType", "NEURAL_VALUE_TICK" },
            { "input[23].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[23].forceType", "NEURAL_FORCE_CORES" },
            { "input[23].radius", "-1.000000" },
            { "input[23].useTangent", "FALSE" },
            { "input[23].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[24].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[24].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[24].radius", "1876.846924" },
            { "input[24].useTangent", "TRUE" },
            { "input[24].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[2].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[2].forceType", "NEURAL_FORCE_ZERO" },
            { "input[2].radius", "-1.000000" },
            { "input[2].useTangent", "FALSE" },
            { "input[2].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[3].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[3].forceType", "NEURAL_FORCE_EDGES" },
            { "input[3].radius", "-1.000000" },
            { "input[3].useTangent", "FALSE" },
            { "input[3].valueType", "NEURAL_VALUE_FORCE" },
            { "input[4].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[4].forceType", "NEURAL_FORCE_CORES" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "FALSE" },
            { "input[4].valueType", "NEURAL_VALUE_MOBID" },
            { "input[5].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[5].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "FALSE" },
            { "input[5].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[6].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[6].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[6].radius", "-0.950000" },
            { "input[6].useTangent", "TRUE" },
            { "input[6].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[7].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[7].forceType", "NEURAL_FORCE_CENTER" },
            { "input[7].radius", "156.061691" },
            { "input[7].useTangent", "FALSE" },
            { "input[7].valueType", "NEURAL_VALUE_FORCE" },
            { "input[8].crowdType", "NEURAL_CROWD_CORES" },
            { "input[8].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "TRUE" },
            { "input[8].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[9].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[9].forceType", "NEURAL_FORCE_EDGES" },
            { "input[9].radius", "0.000000" },
            { "input[9].useTangent", "FALSE" },
            { "input[9].valueType", "NEURAL_VALUE_TICK" },
            { "output[100].forceType", "NEURAL_FORCE_CORNERS" },
            { "output[100].radius", "-1.000000" },
            { "output[100].useTangent", "FALSE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[101].radius", "1346.359497" },
            { "output[101].useTangent", "FALSE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_CENTER" },
            { "output[102].radius", "151.621170" },
            { "output[102].useTangent", "TRUE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "TRUE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_HEADING" },
            { "output[104].radius", "1716.403198" },
            { "output[104].useTangent", "FALSE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[105].radius", "0.000000" },
            { "output[105].useTangent", "FALSE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_COHERE" },
            { "output[106].radius", "-0.814506" },
            { "output[106].useTangent", "FALSE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_CENTER" },
            { "output[107].radius", "0.000000" },
            { "output[107].useTangent", "FALSE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_BASE" },
            { "output[108].radius", "0.000000" },
            { "output[108].useTangent", "FALSE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_ZERO" },
            { "output[109].radius", "426.598633" },
            { "output[109].useTangent", "TRUE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[110].radius", "-1.000000" },
            { "output[110].useTangent", "TRUE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[111].radius", "0.000000" },
            { "output[111].useTangent", "FALSE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[112].radius", "151.377563" },
            { "output[112].useTangent", "FALSE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_BASE" },
            { "output[113].radius", "0.000000" },
            { "output[113].useTangent", "TRUE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_CORES" },
            { "output[114].radius", "143.071716" },
            { "output[114].useTangent", "FALSE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[115].radius", "-1.000000" },
            { "output[115].useTangent", "TRUE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "FALSE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_EDGES" },
            { "output[117].radius", "-1.000000" },
            { "output[117].useTangent", "FALSE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[118].radius", "150.485336" },
            { "output[118].useTangent", "TRUE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[119].radius", "2992.190186" },
            { "output[119].useTangent", "TRUE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_CENTER" },
            { "output[120].radius", "0.000000" },
            { "output[120].useTangent", "TRUE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_CORNERS" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "TRUE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[122].radius", "155.966476" },
            { "output[122].useTangent", "TRUE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_CORES" },
            { "output[123].radius", "-1.000000" },
            { "output[123].useTangent", "FALSE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_HEADING" },
            { "output[124].radius", "0.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "FALSE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1000.000000" },
            { "startingMinRadius", "634.740601" },
        };
        NeuralConfigValue configs5[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "140.183350" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "236.944687" },
            { "evadeStrictDistance", "51.253864" },
            { "evadeUseStrictDistance", "FALSE" },
            { "floatNet.node[100].inputs", "{0, 78, 37, 92, }" },
            { "floatNet.node[100].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[100].params", "{1.000000, 1.568764, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[101].inputs", "{95, 67, 100, }" },
            { "floatNet.node[101].op", "ML_FOP_NxN_LINEAR_COMBINATION_CLAMPED_UNIT" },
            { "floatNet.node[101].params", "{1.000000, 0.000000, 0.000000, 4.428261, 0.000000, }" },
            { "floatNet.node[102].inputs", "{59, 27, 27, 24, }" },
            { "floatNet.node[102].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[102].params", "{0.851690, 0.000000, 0.515415, 2985.770996, 146.223770, 519.737671, 0.000000, }" },
            { "floatNet.node[103].inputs", "{90, }" },
            { "floatNet.node[103].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[103].params", "{1016.769226, 150.194626, 16.031071, 0.000000, 0.000000, 922.953735, }" },
            { "floatNet.node[104].inputs", "{37, 35, 82, 79, 14, 70, 6, }" },
            { "floatNet.node[104].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[104].params", "{0.000000, 1.000000, 19144.894531, }" },
            { "floatNet.node[105].inputs", "{78, 11, 20, 87, 22, 102, }" },
            { "floatNet.node[105].op", "ML_FOP_0x0_ONE" },
            { "floatNet.node[105].params", "{0.000000, 0.000000, 0.950000, 1.000000, 0.000000, }" },
            { "floatNet.node[106].inputs", "{}" },
            { "floatNet.node[106].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[106].params", "{45.004463, 26.304102, 0.000000, 0.000000, }" },
            { "floatNet.node[107].inputs", "{64, 84, 44, 16, 67, 93, }" },
            { "floatNet.node[107].op", "ML_FOP_1x0_SIN" },
            { "floatNet.node[107].params", "{}" },
            { "floatNet.node[108].inputs", "{76, 35, 106, }" },
            { "floatNet.node[108].op", "ML_FOP_4x4_LINEAR_COMBINATION" },
            { "floatNet.node[108].params", "{0.000000, 0.107986, 4.808962, 0.000000, 0.102480, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[109].inputs", "{81, 64, 32, 35, 15, 49, 89, 24, }" },
            { "floatNet.node[109].op", "ML_FOP_2x2_LINEAR_COMBINATION" },
            { "floatNet.node[109].params", "{}" },
            { "floatNet.node[110].inputs", "{28, 93, 73, 13, 25, 66, 23, }" },
            { "floatNet.node[110].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[110].params", "{1.000000, 1.535785, 0.000000, }" },
            { "floatNet.node[111].inputs", "{8, 74, 3, }" },
            { "floatNet.node[111].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_STEP" },
            { "floatNet.node[111].params", "{}" },
            { "floatNet.node[112].inputs", "{17, 58, 19, }" },
            { "floatNet.node[112].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_STEP" },
            { "floatNet.node[112].params", "{0.000000, 246.736893, 0.000000, 1.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[113].inputs", "{96, 103, }" },
            { "floatNet.node[113].op", "ML_FOP_2x0_POW" },
            { "floatNet.node[113].params", "{0.000000, 10.000000, 0.000000, 1.000000, 1.000000, 0.950000, 155.720734, 0.000000, }" },
            { "floatNet.node[114].inputs", "{}" },
            { "floatNet.node[114].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[114].params", "{0.000000, 0.551229, 1002.979797, 1.000000, 0.000000, }" },
            { "floatNet.node[115].inputs", "{44, 62, 94, 16, }" },
            { "floatNet.node[115].op", "ML_FOP_1x3_EXP" },
            { "floatNet.node[115].params", "{}" },
            { "floatNet.node[116].inputs", "{79, }" },
            { "floatNet.node[116].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[116].params", "{2447.873291, 277.071564, 145.986099, 1.000000, }" },
            { "floatNet.node[117].inputs", "{7, 35, 95, 95, 66, 89, }" },
            { "floatNet.node[117].op", "ML_FOP_1x1_PRODUCT" },
            { "floatNet.node[117].params", "{0.571378, 151.600037, }" },
            { "floatNet.node[118].inputs", "{88, 58, 44, 75, 99, }" },
            { "floatNet.node[118].op", "ML_FOP_1x4_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[118].params", "{}" },
            { "floatNet.node[119].inputs", "{63, 3, 67, 92, 114, 10, 29, }" },
            { "floatNet.node[119].op", "ML_FOP_3x0_IF_GTEZ_ELSE" },
            { "floatNet.node[119].params", "{}" },
            { "floatNet.node[120].inputs", "{104, 87, }" },
            { "floatNet.node[120].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[120].params", "{0.478522, 9.500000, 0.097386, 0.901463, 1.050000, 30.000000, 30.000000, }" },
            { "floatNet.node[121].inputs", "{116, 91, 42, 109, }" },
            { "floatNet.node[121].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[121].params", "{1072.239624, 0.997500, 0.105431, 0.698418, 30.000000, 0.334852, 0.000000, }" },
            { "floatNet.node[122].inputs", "{92, 91, 70, 6, }" },
            { "floatNet.node[122].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[122].params", "{0.000000, 0.784328, 0.000000, 0.000000, 6.156543, 0.814852, 1.000000, }" },
            { "floatNet.node[123].inputs", "{92, 98, 5, 8, 47, }" },
            { "floatNet.node[123].op", "ML_FOP_1x1_PRODUCT" },
            { "floatNet.node[123].params", "{0.000000, }" },
            { "floatNet.node[124].inputs", "{109, 74, 83, }" },
            { "floatNet.node[124].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[124].params", "{149.781906, 0.000000, 0.000000, 10.000000, }" },
            { "floatNet.node[25].inputs", "{2, 14, 16, 22, 3, }" },
            { "floatNet.node[25].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_DOWN" },
            { "floatNet.node[25].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[26].inputs", "{4, 22, 11, 4, 7, 9, }" },
            { "floatNet.node[26].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[26].params", "{14634.555664, 1746.313965, 0.082264, 920.512329, 0.188742, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[27].inputs", "{2, 19, 3, 22, }" },
            { "floatNet.node[27].op", "ML_FOP_3x0_IF_LTEZ_ELSE" },
            { "floatNet.node[27].params", "{}" },
            { "floatNet.node[28].inputs", "{7, 3, 21, }" },
            { "floatNet.node[28].op", "ML_FOP_NxN_SCALED_MIN" },
            { "floatNet.node[28].params", "{1.000000, 0.000000, 0.000000, 6.257831, 1.050000, 0.477375, 0.000000, 0.000000, }" },
            { "floatNet.node[29].inputs", "{18, 16, 6, 12, 18, 23, 16, }" },
            { "floatNet.node[29].op", "ML_FOP_2x2_IF_LTE_ELSE" },
            { "floatNet.node[29].params", "{0.000000, 1047.890625, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[30].inputs", "{10, 9, }" },
            { "floatNet.node[30].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[30].params", "{2.098732, 1.507939, 0.521232, 309.714203, }" },
            { "floatNet.node[31].inputs", "{}" },
            { "floatNet.node[31].op", "ML_FOP_1x1_LTE" },
            { "floatNet.node[31].params", "{0.000000, 2598.223633, 0.000000, 0.000000, }" },
            { "floatNet.node[32].inputs", "{18, 20, 23, 26, 9, 18, }" },
            { "floatNet.node[32].op", "ML_FOP_1x4_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[32].params", "{4.133168, 5513.347168, 0.208593, }" },
            { "floatNet.node[33].inputs", "{5, }" },
            { "floatNet.node[33].op", "ML_FOP_Nx0_SUM" },
            { "floatNet.node[33].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.540976, 0.891532, 0.000000, }" },
            { "floatNet.node[34].inputs", "{27, 4, 27, 24, 19, }" },
            { "floatNet.node[34].op", "ML_FOP_3x0_IF_LTEZ_ELSE" },
            { "floatNet.node[34].params", "{}" },
            { "floatNet.node[35].inputs", "{11, 27, 14, 18, 28, 6, }" },
            { "floatNet.node[35].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[35].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[36].inputs", "{26, 13, 1, 28, 18, }" },
            { "floatNet.node[36].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_LERP" },
            { "floatNet.node[36].params", "{0.000000, 1.000000, 644.242493, 0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[37].inputs", "{4, 12, 9, }" },
            { "floatNet.node[37].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[37].params", "{2.927781, 1.556252, 177.735336, 147.223572, 0.000000, 0.971888, }" },
            { "floatNet.node[38].inputs", "{11, 19, 2, 12, 3, 12, 6, 24, }" },
            { "floatNet.node[38].op", "ML_FOP_1x0_PROB_NOT" },
            { "floatNet.node[38].params", "{0.000000, 3.171843, 0.855000, 1.000000, 1573.303955, 1.032600, 1.000000, 1.000000, }" },
            { "floatNet.node[39].inputs", "{}" },
            { "floatNet.node[39].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[39].params", "{1.000000, 0.000000, 0.095528, 0.623837, 0.000000, 0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[40].inputs", "{18, 15, 11, 5, 24, 31, }" },
            { "floatNet.node[40].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[40].params", "{0.000000, 0.000000, 143.249771, 0.091280, 1.000000, 0.000000, }" },
            { "floatNet.node[41].inputs", "{10, 32, 0, 25, 13, 28, 38, 1, }" },
            { "floatNet.node[41].op", "ML_FOP_0x1_CONSTANT" },
            { "floatNet.node[41].params", "{}" },
            { "floatNet.node[42].inputs", "{40, 34, 13, 3, 13, }" },
            { "floatNet.node[42].op", "ML_FOP_1x3_SQRT" },
            { "floatNet.node[42].params", "{1.000000, 0.101738, 1.000000, 1240.511597, 0.000000, }" },
            { "floatNet.node[43].inputs", "{}" },
            { "floatNet.node[43].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[43].params", "{154.134720, }" },
            { "floatNet.node[44].inputs", "{35, 10, 39, 24, 6, }" },
            { "floatNet.node[44].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[44].params", "{0.000000, 0.950000, 17.738413, 1.000000, }" },
            { "floatNet.node[45].inputs", "{11, 31, 8, }" },
            { "floatNet.node[45].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[45].params", "{}" },
            { "floatNet.node[46].inputs", "{39, 28, 1, 37, 21, }" },
            { "floatNet.node[46].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[46].params", "{}" },
            { "floatNet.node[47].inputs", "{29, 37, 36, 42, }" },
            { "floatNet.node[47].op", "ML_FOP_1x3_SIN" },
            { "floatNet.node[47].params", "{0.950000, 4904.760742, 0.513577, 0.000000, }" },
            { "floatNet.node[48].inputs", "{14, }" },
            { "floatNet.node[48].op", "ML_FOP_5x0_IF_INSIDE_RANGE_ELSE" },
            { "floatNet.node[48].params", "{1.000000, }" },
            { "floatNet.node[49].inputs", "{11, 26, 43, 29, 27, 16, 25, 15, }" },
            { "floatNet.node[49].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[49].params", "{0.000000, 0.104806, }" },
            { "floatNet.node[50].inputs", "{35, 6, 24, 48, }" },
            { "floatNet.node[50].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_UP" },
            { "floatNet.node[50].params", "{1.050000, 918.469482, }" },
            { "floatNet.node[51].inputs", "{35, 39, 5, }" },
            { "floatNet.node[51].op", "ML_FOP_1x0_COS" },
            { "floatNet.node[51].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[52].inputs", "{36, 26, }" },
            { "floatNet.node[52].op", "ML_FOP_1x3_HYP_COSINE" },
            { "floatNet.node[52].params", "{1.000000, 0.630374, 1.102500, 1.000000, 0.000000, }" },
            { "floatNet.node[53].inputs", "{26, 24, }" },
            { "floatNet.node[53].op", "ML_FOP_1x4_IF_INSIDE_RANGE_ELSE" },
            { "floatNet.node[53].params", "{2057.991699, }" },
            { "floatNet.node[54].inputs", "{21, 40, 30, 15, 33, 25, 45, 18, }" },
            { "floatNet.node[54].op", "ML_FOP_1x0_ARC_COSINE" },
            { "floatNet.node[54].params", "{}" },
            { "floatNet.node[55].inputs", "{}" },
            { "floatNet.node[55].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[55].params", "{}" },
            { "floatNet.node[56].inputs", "{37, 26, 25, 39, }" },
            { "floatNet.node[56].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[56].params", "{1.000000, 149.850906, }" },
            { "floatNet.node[57].inputs", "{32, 18, 26, }" },
            { "floatNet.node[57].op", "ML_FOP_1x0_SQRT" },
            { "floatNet.node[57].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[58].inputs", "{47, 26, 40, 27, 23, 45, }" },
            { "floatNet.node[58].op", "ML_FOP_1x0_COS" },
            { "floatNet.node[58].params", "{1.000000, 0.000000, }" },
            { "floatNet.node[59].inputs", "{}" },
            { "floatNet.node[59].op", "ML_FOP_NxN_SCALED_MIN" },
            { "floatNet.node[59].params", "{0.000000, 0.000000, 0.000000, 0.000000, 2031.970337, 0.000000, }" },
            { "floatNet.node[60].inputs", "{39, 41, }" },
            { "floatNet.node[60].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[60].params", "{954.130859, }" },
            { "floatNet.node[61].inputs", "{27, }" },
            { "floatNet.node[61].op", "ML_FOP_4x4_LINEAR_COMBINATION" },
            { "floatNet.node[61].params", "{9668.650391, 1052.865601, 1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[62].inputs", "{56, 40, 29, }" },
            { "floatNet.node[62].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[62].params", "{0.000000, 0.000000, 0.000000, 0.491904, 1.050000, }" },
            { "floatNet.node[63].inputs", "{21, }" },
            { "floatNet.node[63].op", "ML_FOP_1x2_OUTSIDE_RANGE" },
            { "floatNet.node[63].params", "{1.102500, 1.000000, 1.000000, 0.619333, 1.000000, 0.108958, }" },
            { "floatNet.node[64].inputs", "{34, 13, 53, }" },
            { "floatNet.node[64].op", "ML_FOP_1x0_SQUARE" },
            { "floatNet.node[64].params", "{3000.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[65].inputs", "{0, 0, }" },
            { "floatNet.node[65].op", "ML_FOP_1x3_HYP_COSINE" },
            { "floatNet.node[65].params", "{0.000000, }" },
            { "floatNet.node[66].inputs", "{}" },
            { "floatNet.node[66].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[66].params", "{}" },
            { "floatNet.node[67].inputs", "{14, }" },
            { "floatNet.node[67].op", "ML_FOP_2x2_IF_GTE_ELSE" },
            { "floatNet.node[67].params", "{0.000000, 10.000000, 156.661469, 0.000000, 0.000000, }" },
            { "floatNet.node[68].inputs", "{30, 5, 64, }" },
            { "floatNet.node[68].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[68].params", "{0.000000, 0.571240, 0.000000, 0.000000, }" },
            { "floatNet.node[69].inputs", "{}" },
            { "floatNet.node[69].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[69].params", "{}" },
            { "floatNet.node[70].inputs", "{43, }" },
            { "floatNet.node[70].op", "ML_FOP_0x0_ONE" },
            { "floatNet.node[70].params", "{0.000000, 0.000000, 0.000000, 10.000000, 0.000000, }" },
            { "floatNet.node[71].inputs", "{7, }" },
            { "floatNet.node[71].op", "ML_FOP_NxN_SELECT_GTE" },
            { "floatNet.node[71].params", "{0.000000, }" },
            { "floatNet.node[72].inputs", "{54, 63, 31, 47, 17, 60, }" },
            { "floatNet.node[72].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[72].params", "{0.000000, 1083.363159, }" },
            { "floatNet.node[73].inputs", "{57, 25, 62, 23, 35, 26, 1, }" },
            { "floatNet.node[73].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[73].params", "{301.344025, 0.000000, }" },
            { "floatNet.node[74].inputs", "{21, 59, 40, 54, 9, }" },
            { "floatNet.node[74].op", "ML_FOP_1x0_IDENTITY" },
            { "floatNet.node[74].params", "{1.000000, 10.000000, 0.000000, 2885.842285, 1.000000, 1.000000, }" },
            { "floatNet.node[75].inputs", "{11, }" },
            { "floatNet.node[75].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_LERP" },
            { "floatNet.node[75].params", "{0.900000, 0.000000, 0.088224, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[76].inputs", "{11, 65, 7, }" },
            { "floatNet.node[76].op", "ML_FOP_1xN_POLYNOMIAL_CLAMPED_UNIT" },
            { "floatNet.node[76].params", "{0.000000, }" },
            { "floatNet.node[77].inputs", "{32, 31, 71, 42, 20, 4, }" },
            { "floatNet.node[77].op", "ML_FOP_2x0_SQUARE_SUM" },
            { "floatNet.node[77].params", "{1.000000, 0.000000, 0.604820, }" },
            { "floatNet.node[78].inputs", "{}" },
            { "floatNet.node[78].op", "ML_FOP_2x2_IF_LTE_ELSE" },
            { "floatNet.node[78].params", "{0.000000, }" },
            { "floatNet.node[79].inputs", "{5, }" },
            { "floatNet.node[79].op", "ML_FOP_1x0_IDENTITY" },
            { "floatNet.node[79].params", "{}" },
            { "floatNet.node[80].inputs", "{}" },
            { "floatNet.node[80].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_DOWN" },
            { "floatNet.node[80].params", "{2.224042, 0.000000, 0.948949, 0.000000, 1.000000, }" },
            { "floatNet.node[81].inputs", "{69, 60, }" },
            { "floatNet.node[81].op", "ML_FOP_Nx0_ARITHMETIC_MEAN" },
            { "floatNet.node[81].params", "{0.000000, 0.908529, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[82].inputs", "{24, 58, 27, 81, 29, 34, 75, }" },
            { "floatNet.node[82].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[82].params", "{0.094212, 5901.746582, 1.000000, 1736.553467, }" },
            { "floatNet.node[83].inputs", "{47, 21, 49, 58, }" },
            { "floatNet.node[83].op", "ML_FOP_2x0_SUM" },
            { "floatNet.node[83].params", "{932.316040, 3.130955, 0.000000, }" },
            { "floatNet.node[84].inputs", "{55, 77, 2, 47, 56, 61, 73, }" },
            { "floatNet.node[84].op", "ML_FOP_NxN_POW_SUM" },
            { "floatNet.node[84].params", "{0.000000, }" },
            { "floatNet.node[85].inputs", "{20, 30, 17, 25, 9, 40, }" },
            { "floatNet.node[85].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[85].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[86].inputs", "{16, 50, 34, 30, 79, 7, 1, }" },
            { "floatNet.node[86].op", "ML_FOP_1x4_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[86].params", "{0.152915, 0.000000, 1.000000, 0.000000, 0.000000, 12030.807617, }" },
            { "floatNet.node[87].inputs", "{82, }" },
            { "floatNet.node[87].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[87].params", "{975.174622, 1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[88].inputs", "{0, 25, 50, 41, 43, }" },
            { "floatNet.node[88].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[88].params", "{0.099449, 160.142029, 0.000000, }" },
            { "floatNet.node[89].inputs", "{36, 8, 60, 4, }" },
            { "floatNet.node[89].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[89].params", "{0.740862, 1.050000, }" },
            { "floatNet.node[90].inputs", "{32, 78, 21, 54, 72, }" },
            { "floatNet.node[90].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[90].params", "{0.000000, }" },
            { "floatNet.node[91].inputs", "{45, 22, 35, 1, 68, }" },
            { "floatNet.node[91].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[91].params", "{1666.244629, }" },
            { "floatNet.node[92].inputs", "{67, }" },
            { "floatNet.node[92].op", "ML_FOP_1x0_ABS_SINE" },
            { "floatNet.node[92].params", "{0.000000, }" },
            { "floatNet.node[93].inputs", "{23, 91, 62, }" },
            { "floatNet.node[93].op", "ML_FOP_1x1_LINEAR_COMBINATION" },
            { "floatNet.node[93].params", "{0.851002, 1.000000, 261.609894, 0.000000, }" },
            { "floatNet.node[94].inputs", "{10, 77, 10, }" },
            { "floatNet.node[94].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_CONST_ELSE" },
            { "floatNet.node[94].params", "{7.578412, 2.499047, 0.900000, 587.598694, 0.380559, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[95].inputs", "{89, }" },
            { "floatNet.node[95].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[95].params", "{20.793953, 448.835754, 1048.115723, 0.000000, }" },
            { "floatNet.node[96].inputs", "{59, 12, 53, 33, 71, 41, }" },
            { "floatNet.node[96].op", "ML_FOP_2x0_SQUARE_SUM" },
            { "floatNet.node[96].params", "{0.000000, 9.212139, 0.000000, 0.237119, 0.102291, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[97].inputs", "{4, 93, 63, 29, 56, }" },
            { "floatNet.node[97].op", "ML_FOP_1x3_COS" },
            { "floatNet.node[97].params", "{0.168066, 0.000000, 0.000000, 146.162292, 0.000000, 0.000000, 0.000000, 1.489160, }" },
            { "floatNet.node[98].inputs", "{85, 24, 80, 28, 67, }" },
            { "floatNet.node[98].op", "ML_FOP_1x1_PRODUCT" },
            { "floatNet.node[98].params", "{0.655044, 0.945000, 10.000000, 0.000000, 1.536522, 0.000000, }" },
            { "floatNet.node[99].inputs", "{50, 54, 55, 35, 98, 57, }" },
            { "floatNet.node[99].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[99].params", "{1.000000, 0.000000, 28.500000, 1.000000, 0.495707, 0.087955, 1.479775, }" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "50.784897" },
            { "guardRange", "88.486099" },
            { "input[0].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[0].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "FALSE" },
            { "input[0].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[10].crowdType", "NEURAL_CROWD_CORES" },
            { "input[10].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[10].radius", "0.000000" },
            { "input[10].useTangent", "TRUE" },
            { "input[10].valueType", "NEURAL_VALUE_CROWD" },
            { "input[11].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[11].forceType", "NEURAL_FORCE_BASE" },
            { "input[11].radius", "0.000000" },
            { "input[11].useTangent", "TRUE" },
            { "input[11].valueType", "NEURAL_VALUE_FORCE" },
            { "input[12].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[12].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[12].frequency", "0.000000" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "FALSE" },
            { "input[12].valueType", "NEURAL_VALUE_CROWD" },
            { "input[12].waveType", "NEURAL_WAVE_SINE" },
            { "input[13].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[13].forceType", "NEURAL_FORCE_COHERE" },
            { "input[13].frequency", "0.000000" },
            { "input[13].radius", "0.000000" },
            { "input[13].useTangent", "FALSE" },
            { "input[13].valueType", "NEURAL_VALUE_CROWD" },
            { "input[13].waveType", "NEURAL_WAVE_SINE" },
            { "input[14].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[14].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[14].frequency", "0.000000" },
            { "input[14].radius", "0.000000" },
            { "input[14].useTangent", "FALSE" },
            { "input[14].valueType", "NEURAL_VALUE_CROWD" },
            { "input[14].waveType", "NEURAL_WAVE_FMOD" },
            { "input[15].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[15].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[15].radius", "0.000000" },
            { "input[15].useTangent", "FALSE" },
            { "input[15].valueType", "NEURAL_VALUE_FORCE" },
            { "input[16].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[16].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[16].frequency", "0.000000" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "TRUE" },
            { "input[16].valueType", "NEURAL_VALUE_CROWD" },
            { "input[17].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[17].forceType", "NEURAL_FORCE_HEADING" },
            { "input[17].frequency", "3898.708740" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "FALSE" },
            { "input[17].valueType", "NEURAL_VALUE_TICK" },
            { "input[17].waveType", "NEURAL_WAVE_FMOD" },
            { "input[18].crowdType", "NEURAL_CROWD_CORES" },
            { "input[18].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[18].frequency", "0.000000" },
            { "input[18].radius", "147.504044" },
            { "input[18].useTangent", "TRUE" },
            { "input[18].valueType", "NEURAL_VALUE_ZERO" },
            { "input[18].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[19].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[19].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[19].radius", "-1.000000" },
            { "input[19].useTangent", "FALSE" },
            { "input[19].valueType", "NEURAL_VALUE_CROWD" },
            { "input[1].crowdType", "NEURAL_CROWD_CORES" },
            { "input[1].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[1].radius", "301.750824" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[20].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[20].forceType", "NEURAL_FORCE_HEADING" },
            { "input[20].radius", "0.000000" },
            { "input[20].useTangent", "FALSE" },
            { "input[20].valueType", "NEURAL_VALUE_CROWD" },
            { "input[20].waveType", "NEURAL_WAVE_FMOD" },
            { "input[21].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[21].forceType", "NEURAL_FORCE_HEADING" },
            { "input[21].frequency", "0.000000" },
            { "input[21].radius", "-1.000000" },
            { "input[21].useTangent", "TRUE" },
            { "input[21].valueType", "NEURAL_VALUE_CROWD" },
            { "input[22].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[22].forceType", "NEURAL_FORCE_BASE" },
            { "input[22].radius", "6.802381" },
            { "input[22].useTangent", "TRUE" },
            { "input[22].valueType", "NEURAL_VALUE_FORCE" },
            { "input[23].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[23].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[23].frequency", "0.000000" },
            { "input[23].radius", "-1.000000" },
            { "input[23].useTangent", "FALSE" },
            { "input[23].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[23].waveType", "NEURAL_WAVE_NONE" },
            { "input[24].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[24].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[24].frequency", "0.000000" },
            { "input[24].radius", "1086.721436" },
            { "input[24].useTangent", "TRUE" },
            { "input[24].valueType", "NEURAL_VALUE_MOBID" },
            { "input[2].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[2].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[2].radius", "148.709793" },
            { "input[2].useTangent", "TRUE" },
            { "input[2].valueType", "NEURAL_VALUE_FORCE" },
            { "input[3].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[3].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[3].radius", "-1.000000" },
            { "input[3].useTangent", "TRUE" },
            { "input[3].valueType", "NEURAL_VALUE_CROWD" },
            { "input[4].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[4].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[4].frequency", "5622.903809" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "FALSE" },
            { "input[4].valueType", "NEURAL_VALUE_CROWD" },
            { "input[5].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[5].forceType", "NEURAL_FORCE_ZERO" },
            { "input[5].frequency", "0.000000" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "TRUE" },
            { "input[5].valueType", "NEURAL_VALUE_FORCE" },
            { "input[5].waveType", "NEURAL_WAVE_SINE" },
            { "input[6].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[6].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[6].frequency", "0.000000" },
            { "input[6].radius", "-0.950000" },
            { "input[6].useTangent", "FALSE" },
            { "input[6].valueType", "NEURAL_VALUE_CROWD" },
            { "input[6].waveType", "NEURAL_WAVE_NONE" },
            { "input[7].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[7].forceType", "NEURAL_FORCE_ZERO" },
            { "input[7].radius", "156.061691" },
            { "input[7].useTangent", "TRUE" },
            { "input[7].valueType", "NEURAL_VALUE_CROWD" },
            { "input[8].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[8].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[8].frequency", "0.000000" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "FALSE" },
            { "input[8].valueType", "NEURAL_VALUE_CROWD" },
            { "input[8].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[9].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[9].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[9].radius", "0.000000" },
            { "input[9].useTangent", "TRUE" },
            { "input[9].valueType", "NEURAL_VALUE_CROWD" },
            { "output[100].forceType", "NEURAL_FORCE_BASE" },
            { "output[100].radius", "529.224609" },
            { "output[100].useTangent", "FALSE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[101].radius", "1351.212036" },
            { "output[101].useTangent", "FALSE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "output[102].radius", "159.202225" },
            { "output[102].useTangent", "FALSE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "FALSE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_EDGES" },
            { "output[104].radius", "1572.406860" },
            { "output[104].useTangent", "FALSE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[105].radius", "278.047913" },
            { "output[105].useTangent", "TRUE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[106].radius", "2541.187500" },
            { "output[106].useTangent", "FALSE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[107].radius", "0.000000" },
            { "output[107].useTangent", "TRUE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_CORNERS" },
            { "output[108].radius", "-1.000000" },
            { "output[108].useTangent", "FALSE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_HEADING" },
            { "output[109].radius", "1485.732910" },
            { "output[109].useTangent", "TRUE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[110].radius", "2742.620361" },
            { "output[110].useTangent", "TRUE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_COHERE" },
            { "output[111].radius", "-1.000000" },
            { "output[111].useTangent", "TRUE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[112].radius", "298.007172" },
            { "output[112].useTangent", "FALSE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_CORES" },
            { "output[113].radius", "-1.000000" },
            { "output[113].useTangent", "TRUE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_EDGES" },
            { "output[114].radius", "322.285767" },
            { "output[114].useTangent", "TRUE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[115].radius", "-1.000000" },
            { "output[115].useTangent", "FALSE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "TRUE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[117].radius", "850.924561" },
            { "output[117].useTangent", "FALSE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_HEADING" },
            { "output[118].radius", "298.878693" },
            { "output[118].useTangent", "TRUE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_CORNERS" },
            { "output[119].radius", "3000.000000" },
            { "output[119].useTangent", "TRUE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_BASE" },
            { "output[120].radius", "2963.549072" },
            { "output[120].useTangent", "TRUE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "FALSE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[122].radius", "1693.586426" },
            { "output[122].useTangent", "FALSE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[123].radius", "981.496277" },
            { "output[123].useTangent", "FALSE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_HEADING" },
            { "output[124].radius", "-1.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "TRUE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1464.813599" },
            { "startingMinRadius", "393.188904" },
        };
        NeuralConfigValue configs6[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "126.515465" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "368.180939" },
            { "evadeStrictDistance", "83.368744" },
            { "evadeUseStrictDistance", "FALSE" },
            { "floatNet.node[100].inputs", "{0, 65, 48, 37, }" },
            { "floatNet.node[100].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[100].params", "{1.050000, 3.157942, 0.290901, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[101].inputs", "{}" },
            { "floatNet.node[101].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[101].params", "{0.000000, }" },
            { "floatNet.node[102].inputs", "{}" },
            { "floatNet.node[102].op", "ML_FOP_1x0_PROB_NOT" },
            { "floatNet.node[102].params", "{0.000000, 2.486770, 1.626612, 153.060349, }" },
            { "floatNet.node[103].inputs", "{65, 54, 18, 50, 99, 62, 10, }" },
            { "floatNet.node[103].op", "ML_FOP_NxN_SCALED_DIV_SUM" },
            { "floatNet.node[103].params", "{2226.213623, 2076.374756, 8449.783203, 150.295593, 1986.376465, 2679.946289, 0.101335, 1.000000, }" },
            { "floatNet.node[104].inputs", "{65, 81, 82, }" },
            { "floatNet.node[104].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[104].params", "{1.000000, 0.000000, }" },
            { "floatNet.node[105].inputs", "{78, 11, 20, 87, 22, 102, }" },
            { "floatNet.node[105].op", "ML_FOP_0x0_ONE" },
            { "floatNet.node[105].params", "{0.000000, 0.000000, 0.950000, 1.000000, 0.000000, }" },
            { "floatNet.node[106].inputs", "{63, }" },
            { "floatNet.node[106].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[106].params", "{1.602951, }" },
            { "floatNet.node[107].inputs", "{99, 57, 101, 33, 19, }" },
            { "floatNet.node[107].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[107].params", "{0.000000, 0.000000, 162.001144, 0.000000, 0.000000, }" },
            { "floatNet.node[108].inputs", "{77, 40, 8, 66, 75, 51, 80, }" },
            { "floatNet.node[108].op", "ML_FOP_1x0_PROB_NOT" },
            { "floatNet.node[108].params", "{}" },
            { "floatNet.node[109].inputs", "{51, 6, 13, 103, 100, 103, 36, 86, }" },
            { "floatNet.node[109].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[109].params", "{2.584399, 0.000000, 0.525509, 0.000000, }" },
            { "floatNet.node[110].inputs", "{28, 93, 73, 13, 25, 66, 23, }" },
            { "floatNet.node[110].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[110].params", "{1.000000, 1.535785, 0.000000, }" },
            { "floatNet.node[111].inputs", "{6, 95, 19, }" },
            { "floatNet.node[111].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_UP" },
            { "floatNet.node[111].params", "{0.000000, }" },
            { "floatNet.node[112].inputs", "{45, 52, }" },
            { "floatNet.node[112].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[112].params", "{}" },
            { "floatNet.node[113].inputs", "{55, 25, 96, 7, 66, 60, }" },
            { "floatNet.node[113].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[113].params", "{}" },
            { "floatNet.node[114].inputs", "{}" },
            { "floatNet.node[114].op", "ML_FOP_1x4_IF_INSIDE_RANGE_ELSE" },
            { "floatNet.node[114].params", "{}" },
            { "floatNet.node[115].inputs", "{}" },
            { "floatNet.node[115].op", "ML_FOP_1x3_SQUARE" },
            { "floatNet.node[115].params", "{0.000000, }" },
            { "floatNet.node[116].inputs", "{}" },
            { "floatNet.node[116].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[116].params", "{}" },
            { "floatNet.node[117].inputs", "{35, 28, 84, 52, 37, 94, 47, }" },
            { "floatNet.node[117].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[117].params", "{0.000000, }" },
            { "floatNet.node[118].inputs", "{1, 70, 76, 97, 37, 103, 95, 58, }" },
            { "floatNet.node[118].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[118].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.187890, }" },
            { "floatNet.node[119].inputs", "{49, 31, 118, }" },
            { "floatNet.node[119].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[119].params", "{1.000000, 0.000000, 0.000000, 0.000000, 0.963847, 26.677500, }" },
            { "floatNet.node[120].inputs", "{1, 69, 31, 98, }" },
            { "floatNet.node[120].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_STEP" },
            { "floatNet.node[120].params", "{0.000000, 1.000000, 1.000000, 0.668797, 0.810219, 28.694971, 986.982422, }" },
            { "floatNet.node[121].inputs", "{31, 91, 42, 109, }" },
            { "floatNet.node[121].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[121].params", "{1.000000, }" },
            { "floatNet.node[122].inputs", "{106, }" },
            { "floatNet.node[122].op", "ML_FOP_1x3_HYP_COSINE" },
            { "floatNet.node[122].params", "{0.000000, }" },
            { "floatNet.node[123].inputs", "{76, 107, }" },
            { "floatNet.node[123].op", "ML_FOP_5x0_IF_INSIDE_RANGE_ELSE" },
            { "floatNet.node[123].params", "{0.000000, 220.883713, }" },
            { "floatNet.node[124].inputs", "{109, }" },
            { "floatNet.node[124].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[124].params", "{0.452424, 0.000000, 0.000000, 10.000000, 2914.313232, 1013.836914, 0.000000, }" },
            { "floatNet.node[25].inputs", "{18, 15, 17, 3, 18, 15, 7, }" },
            { "floatNet.node[25].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[25].params", "{}" },
            { "floatNet.node[26].inputs", "{}" },
            { "floatNet.node[26].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[26].params", "{}" },
            { "floatNet.node[27].inputs", "{1, 17, 6, 13, }" },
            { "floatNet.node[27].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[27].params", "{1.000000, 0.855000, 0.000000, 0.094935, 0.000000, 1.000000, 15198.772461, }" },
            { "floatNet.node[28].inputs", "{17, }" },
            { "floatNet.node[28].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[28].params", "{0.000000, 722.811401, 0.902500, 0.000000, 1.000000, 5.642809, 0.000000, }" },
            { "floatNet.node[29].inputs", "{18, 4, 23, 12, 18, 23, 5, }" },
            { "floatNet.node[29].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[29].params", "{0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[30].inputs", "{15, 16, }" },
            { "floatNet.node[30].op", "ML_FOP_1x3_TAN" },
            { "floatNet.node[30].params", "{946.218506, 1.703727, 10.000000, 942.655945, 0.000000, 1898.771484, 0.000000, }" },
            { "floatNet.node[31].inputs", "{10, 10, 14, 6, 23, }" },
            { "floatNet.node[31].op", "ML_FOP_1x3_HYP_SINE" },
            { "floatNet.node[31].params", "{0.096820, 0.106473, }" },
            { "floatNet.node[32].inputs", "{23, }" },
            { "floatNet.node[32].op", "ML_FOP_0x1_CONSTANT" },
            { "floatNet.node[32].params", "{0.950000, 0.950000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[33].inputs", "{26, 13, 29, 28, 30, 31, 7, }" },
            { "floatNet.node[33].op", "ML_FOP_3x0_IF_LTEZ_ELSE" },
            { "floatNet.node[33].params", "{20.949368, 18242.015625, }" },
            { "floatNet.node[34].inputs", "{31, }" },
            { "floatNet.node[34].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[34].params", "{1.000000, 0.183466, 0.000000, }" },
            { "floatNet.node[35].inputs", "{9, 14, 4, 5, 25, 26, 11, }" },
            { "floatNet.node[35].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[35].params", "{0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[36].inputs", "{}" },
            { "floatNet.node[36].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[36].params", "{1181.531250, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[37].inputs", "{31, }" },
            { "floatNet.node[37].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[37].params", "{2.326271, }" },
            { "floatNet.node[38].inputs", "{4, 23, 24, 29, 25, 15, 16, }" },
            { "floatNet.node[38].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[38].params", "{1.050000, 1.000000, }" },
            { "floatNet.node[39].inputs", "{38, 1, }" },
            { "floatNet.node[39].op", "ML_FOP_NxN_POW_SUM" },
            { "floatNet.node[39].params", "{0.898238, 1.000000, 0.000000, 0.864338, 3000.000000, 0.423913, 0.095528, }" },
            { "floatNet.node[40].inputs", "{6, 12, 11, 28, 1, 10, }" },
            { "floatNet.node[40].op", "ML_FOP_3x0_IF_GTEZ_ELSE" },
            { "floatNet.node[40].params", "{0.000000, 1.000000, 0.000000, 0.105533, 0.036394, 0.000000, }" },
            { "floatNet.node[41].inputs", "{36, 2, 23, 36, 39, 13, 22, 23, }" },
            { "floatNet.node[41].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[41].params", "{0.000000, 180.299881, 0.000000, 3.271620, 0.337495, 0.000000, 0.950000, 0.000000, }" },
            { "floatNet.node[42].inputs", "{5, 13, 4, 4, 15, }" },
            { "floatNet.node[42].op", "ML_FOP_1x3_SQRT" },
            { "floatNet.node[42].params", "{2.617908, 0.096651, 23.879280, 1240.511597, 0.000000, 0.000000, }" },
            { "floatNet.node[43].inputs", "{23, }" },
            { "floatNet.node[43].op", "ML_FOP_1x3_ARC_SINE" },
            { "floatNet.node[43].params", "{}" },
            { "floatNet.node[44].inputs", "{2, 41, 24, 43, 17, 24, 35, 2, }" },
            { "floatNet.node[44].op", "ML_FOP_1x1_PRODUCT" },
            { "floatNet.node[44].params", "{0.108235, 0.000000, }" },
            { "floatNet.node[45].inputs", "{11, 31, 8, }" },
            { "floatNet.node[45].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[45].params", "{}" },
            { "floatNet.node[46].inputs", "{41, 43, 18, }" },
            { "floatNet.node[46].op", "ML_FOP_1x3_TAN" },
            { "floatNet.node[46].params", "{0.000000, }" },
            { "floatNet.node[47].inputs", "{31, }" },
            { "floatNet.node[47].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_UP" },
            { "floatNet.node[47].params", "{1052.309326, 1373.830322, 7508.474609, 939.336853, 1.000000, }" },
            { "floatNet.node[48].inputs", "{7, 8, }" },
            { "floatNet.node[48].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_DOWN" },
            { "floatNet.node[48].params", "{0.000000, }" },
            { "floatNet.node[49].inputs", "{39, 19, 43, 29, 41, }" },
            { "floatNet.node[49].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[49].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[50].inputs", "{17, 33, 20, 44, }" },
            { "floatNet.node[50].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_UP" },
            { "floatNet.node[50].params", "{0.000000, 0.000000, 1.000000, 0.000000, 147.118774, }" },
            { "floatNet.node[51].inputs", "{38, 33, 31, 3, 43, }" },
            { "floatNet.node[51].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[51].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[52].inputs", "{8, 22, }" },
            { "floatNet.node[52].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[52].params", "{1.000000, 8.455674, 1.097250, 9066.266602, 2243.258301, 0.000000, 4.967064, 430.216583, }" },
            { "floatNet.node[53].inputs", "{}" },
            { "floatNet.node[53].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[53].params", "{2950.105957, 2212.912598, 0.000000, 0.179260, 0.000000, 1.050000, 20.766357, }" },
            { "floatNet.node[54].inputs", "{37, 46, 29, 36, 8, 41, 20, }" },
            { "floatNet.node[54].op", "ML_FOP_1x1_SUM" },
            { "floatNet.node[54].params", "{}" },
            { "floatNet.node[55].inputs", "{34, 28, 0, 16, 17, }" },
            { "floatNet.node[55].op", "ML_FOP_Nx0_SUM" },
            { "floatNet.node[55].params", "{1.566024, 0.000000, 0.591695, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[56].inputs", "{17, 10, }" },
            { "floatNet.node[56].op", "ML_FOP_1x3_COS" },
            { "floatNet.node[56].params", "{961.473755, 0.000000, 0.115097, 165.210617, 12.718456, 0.000000, }" },
            { "floatNet.node[57].inputs", "{36, 0, 55, 26, 44, 2, 32, 33, }" },
            { "floatNet.node[57].op", "ML_FOP_1x3_TAN" },
            { "floatNet.node[57].params", "{}" },
            { "floatNet.node[58].inputs", "{37, 32, 15, 13, 26, }" },
            { "floatNet.node[58].op", "ML_FOP_2x0_SQUARE_SUM" },
            { "floatNet.node[58].params", "{0.088562, }" },
            { "floatNet.node[59].inputs", "{0, 14, 12, 23, 7, 51, }" },
            { "floatNet.node[59].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[59].params", "{0.916065, 0.000000, }" },
            { "floatNet.node[60].inputs", "{57, 6, 44, }" },
            { "floatNet.node[60].op", "ML_FOP_1x0_NEGATE" },
            { "floatNet.node[60].params", "{954.130859, }" },
            { "floatNet.node[61].inputs", "{15, 43, 60, }" },
            { "floatNet.node[61].op", "ML_FOP_NxN_SCALED_DIV_SUM" },
            { "floatNet.node[61].params", "{2715.963379, }" },
            { "floatNet.node[62].inputs", "{53, 5, 2, 10, 26, 35, 34, 41, }" },
            { "floatNet.node[62].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[62].params", "{2.594956, 1.000000, 0.000000, 0.000000, 68.197174, }" },
            { "floatNet.node[63].inputs", "{}" },
            { "floatNet.node[63].op", "ML_FOP_1x0_COS" },
            { "floatNet.node[63].params", "{2226.816406, 1412.302979, 30.000000, 153.504593, 146.036438, 5425.575684, 318.178192, }" },
            { "floatNet.node[64].inputs", "{30, 59, 10, }" },
            { "floatNet.node[64].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[64].params", "{0.000000, 5890.657227, 6085.417969, 1.000000, 0.000000, 0.950000, }" },
            { "floatNet.node[65].inputs", "{63, 30, }" },
            { "floatNet.node[65].op", "ML_FOP_1x0_SIN" },
            { "floatNet.node[65].params", "{1030.215088, }" },
            { "floatNet.node[66].inputs", "{40, 6, 1, 58, 5, 59, 8, }" },
            { "floatNet.node[66].op", "ML_FOP_1x1_GTE" },
            { "floatNet.node[66].params", "{0.000000, 30.000000, 0.000000, }" },
            { "floatNet.node[67].inputs", "{14, }" },
            { "floatNet.node[67].op", "ML_FOP_2x2_IF_GTE_ELSE" },
            { "floatNet.node[67].params", "{0.000000, 10.000000, 156.661469, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[68].inputs", "{35, 60, 33, 53, 50, 57, 54, }" },
            { "floatNet.node[68].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[68].params", "{2960.583740, 0.000000, }" },
            { "floatNet.node[69].inputs", "{}" },
            { "floatNet.node[69].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[69].params", "{}" },
            { "floatNet.node[70].inputs", "{1, 23, }" },
            { "floatNet.node[70].op", "ML_FOP_NxN_SCALED_DIV_SUM" },
            { "floatNet.node[70].params", "{1.004585, 2748.507324, 0.000000, 0.000000, 1.607636, 0.000000, 0.000000, }" },
            { "floatNet.node[71].inputs", "{8, }" },
            { "floatNet.node[71].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[71].params", "{4.777460, 260.633759, 1.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[72].inputs", "{60, 44, }" },
            { "floatNet.node[72].op", "ML_FOP_1x1_QUADRATIC_UP" },
            { "floatNet.node[72].params", "{1.000000, 0.090466, }" },
            { "floatNet.node[73].inputs", "{6, 4, 20, 6, }" },
            { "floatNet.node[73].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[73].params", "{1.000000, 449.146942, 146.469650, 0.000000, }" },
            { "floatNet.node[74].inputs", "{}" },
            { "floatNet.node[74].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[74].params", "{0.000000, }" },
            { "floatNet.node[75].inputs", "{}" },
            { "floatNet.node[75].op", "ML_FOP_NxN_LINEAR_COMBINATION_CLAMPED_UNIT" },
            { "floatNet.node[75].params", "{0.000000, 25.303909, 148.758789, 0.905737, }" },
            { "floatNet.node[76].inputs", "{12, 57, 2, 0, 36, 61, }" },
            { "floatNet.node[76].op", "ML_FOP_1x3_ARC_SINE" },
            { "floatNet.node[76].params", "{}" },
            { "floatNet.node[77].inputs", "{66, 10, 53, 46, 34, }" },
            { "floatNet.node[77].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[77].params", "{0.000000, 0.000000, 0.000000, 1.000000, 1.017669, 0.102860, }" },
            { "floatNet.node[78].inputs", "{29, 27, 66, 68, 69, 73, 25, }" },
            { "floatNet.node[78].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[78].params", "{0.000000, }" },
            { "floatNet.node[79].inputs", "{}" },
            { "floatNet.node[79].op", "ML_FOP_1x2_CLAMPED_SCALE_FROM_UNIT" },
            { "floatNet.node[79].params", "{0.000000, 0.992870, 0.100938, 0.000000, }" },
            { "floatNet.node[80].inputs", "{63, 20, 27, 63, }" },
            { "floatNet.node[80].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[80].params", "{3.804961, 0.000000, 0.948949, 0.000000, }" },
            { "floatNet.node[81].inputs", "{2, 75, 55, 3, 49, 46, 65, }" },
            { "floatNet.node[81].op", "ML_FOP_2x0_SQUARE_SUM" },
            { "floatNet.node[81].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 897.686829, }" },
            { "floatNet.node[82].inputs", "{41, 2, 41, 74, 21, }" },
            { "floatNet.node[82].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_CONST_ELSE" },
            { "floatNet.node[82].params", "{23.493525, 811.469482, 360.052490, 1284.098389, 0.000000, 0.900000, 83.733452, }" },
            { "floatNet.node[83].inputs", "{74, 21, 46, }" },
            { "floatNet.node[83].op", "ML_FOP_Nx0_SUM" },
            { "floatNet.node[83].params", "{0.000000, 1316.191406, 1080.688599, 1.000000, 0.000000, 4.854331, }" },
            { "floatNet.node[84].inputs", "{1, 37, 30, 73, 18, 31, 37, }" },
            { "floatNet.node[84].op", "ML_FOP_3x0_IF_GTEZ_ELSE" },
            { "floatNet.node[84].params", "{0.000000, 0.806488, 1.000000, 0.202664, 0.000000, 1027.731323, 0.000000, }" },
            { "floatNet.node[85].inputs", "{}" },
            { "floatNet.node[85].op", "ML_FOP_1x0_LN" },
            { "floatNet.node[85].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[86].inputs", "{35, 39, 20, 5, 73, }" },
            { "floatNet.node[86].op", "ML_FOP_2x2_IF_GTE_ELSE" },
            { "floatNet.node[86].params", "{0.000000, 23.357471, }" },
            { "floatNet.node[87].inputs", "{}" },
            { "floatNet.node[87].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[87].params", "{157.418869, 0.469246, }" },
            { "floatNet.node[88].inputs", "{59, 9, 28, 5, 24, 11, 0, }" },
            { "floatNet.node[88].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[88].params", "{12.581761, 2.224421, 7.529765, 1.552919, }" },
            { "floatNet.node[89].inputs", "{61, 0, 56, }" },
            { "floatNet.node[89].op", "ML_FOP_1x0_ABS" },
            { "floatNet.node[89].params", "{1.000000, }" },
            { "floatNet.node[90].inputs", "{82, 78, 21, 54, 35, }" },
            { "floatNet.node[90].op", "ML_FOP_3x2_IF_INSIDE_RANGE_CONST_ELSE" },
            { "floatNet.node[90].params", "{}" },
            { "floatNet.node[91].inputs", "{83, 20, 48, 58, 27, 2, 90, }" },
            { "floatNet.node[91].op", "ML_FOP_1x4_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[91].params", "{0.000000, }" },
            { "floatNet.node[92].inputs", "{32, }" },
            { "floatNet.node[92].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[92].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[93].inputs", "{68, }" },
            { "floatNet.node[93].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[93].params", "{1.000000, 0.408124, 1.050000, 0.862184, 0.890321, 0.950000, }" },
            { "floatNet.node[94].inputs", "{34, 36, 50, 16, 87, 74, 28, }" },
            { "floatNet.node[94].op", "ML_FOP_1x3_HYP_TANGENT" },
            { "floatNet.node[94].params", "{5.410668, 1.007700, 0.571086, 0.399587, }" },
            { "floatNet.node[95].inputs", "{28, }" },
            { "floatNet.node[95].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_CONST_ELSE" },
            { "floatNet.node[95].params", "{0.999977, 0.000000, 0.000000, 0.900000, 153.081375, }" },
            { "floatNet.node[96].inputs", "{66, 26, 43, }" },
            { "floatNet.node[96].op", "ML_FOP_1x3_COS" },
            { "floatNet.node[96].params", "{11.055364, 0.900000, 371.755005, 1937.954102, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[97].inputs", "{}" },
            { "floatNet.node[97].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[97].params", "{3000.000000, 0.000000, }" },
            { "floatNet.node[98].inputs", "{40, 14, 51, 25, 11, }" },
            { "floatNet.node[98].op", "ML_FOP_3x3_LINEAR_COMBINATION" },
            { "floatNet.node[98].params", "{}" },
            { "floatNet.node[99].inputs", "{82, 21, 4, 23, 97, 50, }" },
            { "floatNet.node[99].op", "ML_FOP_1xN_POLYNOMIAL" },
            { "floatNet.node[99].params", "{0.000000, 0.000000, 0.858177, 3208.736572, }" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "27.774313" },
            { "guardRange", "62.415024" },
            { "input[0].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[0].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "FALSE" },
            { "input[0].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[10].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[10].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[10].radius", "0.000000" },
            { "input[10].useTangent", "TRUE" },
            { "input[10].valueType", "NEURAL_VALUE_MOBID" },
            { "input[11].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[11].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[11].radius", "0.000000" },
            { "input[11].useTangent", "TRUE" },
            { "input[11].valueType", "NEURAL_VALUE_FORCE" },
            { "input[11].waveType", "NEURAL_WAVE_UNIT_SINE" },
            { "input[12].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[12].forceType", "NEURAL_FORCE_COHERE" },
            { "input[12].frequency", "0.000000" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "FALSE" },
            { "input[12].valueType", "NEURAL_VALUE_FORCE" },
            { "input[12].waveType", "NEURAL_WAVE_SINE" },
            { "input[13].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[13].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[13].frequency", "0.000000" },
            { "input[13].radius", "0.000000" },
            { "input[13].useTangent", "TRUE" },
            { "input[13].valueType", "NEURAL_VALUE_FORCE" },
            { "input[13].waveType", "NEURAL_WAVE_SINE" },
            { "input[14].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[14].forceType", "NEURAL_FORCE_COHERE" },
            { "input[14].frequency", "0.000000" },
            { "input[14].radius", "157.085648" },
            { "input[14].useTangent", "FALSE" },
            { "input[14].valueType", "NEURAL_VALUE_CROWD" },
            { "input[14].waveType", "NEURAL_WAVE_FMOD" },
            { "input[15].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[15].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[15].radius", "156.087997" },
            { "input[15].useTangent", "FALSE" },
            { "input[15].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[16].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[16].forceType", "NEURAL_FORCE_CENTER" },
            { "input[16].frequency", "0.000000" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "TRUE" },
            { "input[16].valueType", "NEURAL_VALUE_CROWD" },
            { "input[17].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[17].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[17].frequency", "4093.644043" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "TRUE" },
            { "input[17].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[17].waveType", "NEURAL_WAVE_FMOD" },
            { "input[18].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[18].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[18].frequency", "0.000000" },
            { "input[18].radius", "147.504044" },
            { "input[18].useTangent", "TRUE" },
            { "input[18].valueType", "NEURAL_VALUE_TICK" },
            { "input[18].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[19].crowdType", "NEURAL_CROWD_CORES" },
            { "input[19].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[19].radius", "-1.000000" },
            { "input[19].useTangent", "FALSE" },
            { "input[19].valueType", "NEURAL_VALUE_CROWD" },
            { "input[1].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[1].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[1].radius", "301.750824" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_CROWD" },
            { "input[20].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[20].forceType", "NEURAL_FORCE_HEADING" },
            { "input[20].radius", "0.000000" },
            { "input[20].useTangent", "FALSE" },
            { "input[20].valueType", "NEURAL_VALUE_CROWD" },
            { "input[20].waveType", "NEURAL_WAVE_FMOD" },
            { "input[21].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[21].forceType", "NEURAL_FORCE_HEADING" },
            { "input[21].frequency", "0.000000" },
            { "input[21].radius", "-1.000000" },
            { "input[21].useTangent", "TRUE" },
            { "input[21].valueType", "NEURAL_VALUE_CROWD" },
            { "input[22].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[22].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[22].radius", "6.802381" },
            { "input[22].useTangent", "TRUE" },
            { "input[22].valueType", "NEURAL_VALUE_CROWD" },
            { "input[23].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[23].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[23].frequency", "0.000000" },
            { "input[23].radius", "-1.000000" },
            { "input[23].useTangent", "TRUE" },
            { "input[23].valueType", "NEURAL_VALUE_MOBID" },
            { "input[23].waveType", "NEURAL_WAVE_NONE" },
            { "input[24].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[24].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[24].frequency", "0.000000" },
            { "input[24].radius", "1086.721436" },
            { "input[24].useTangent", "FALSE" },
            { "input[24].valueType", "NEURAL_VALUE_FORCE" },
            { "input[2].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[2].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[2].radius", "148.709793" },
            { "input[2].useTangent", "FALSE" },
            { "input[2].valueType", "NEURAL_VALUE_FORCE" },
            { "input[3].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[3].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[3].radius", "-1.000000" },
            { "input[3].useTangent", "TRUE" },
            { "input[3].valueType", "NEURAL_VALUE_FORCE" },
            { "input[4].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[4].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[4].frequency", "5622.903809" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "FALSE" },
            { "input[4].valueType", "NEURAL_VALUE_CROWD" },
            { "input[5].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[5].forceType", "NEURAL_FORCE_BASE" },
            { "input[5].frequency", "0.000000" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "FALSE" },
            { "input[5].valueType", "NEURAL_VALUE_FORCE" },
            { "input[5].waveType", "NEURAL_WAVE_SINE" },
            { "input[6].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[6].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[6].frequency", "0.000000" },
            { "input[6].radius", "-0.950000" },
            { "input[6].useTangent", "TRUE" },
            { "input[6].valueType", "NEURAL_VALUE_FORCE" },
            { "input[6].waveType", "NEURAL_WAVE_NONE" },
            { "input[7].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[7].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[7].radius", "156.061691" },
            { "input[7].useTangent", "FALSE" },
            { "input[7].valueType", "NEURAL_VALUE_FORCE" },
            { "input[8].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[8].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[8].frequency", "0.000000" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "FALSE" },
            { "input[8].valueType", "NEURAL_VALUE_CROWD" },
            { "input[8].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[9].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[9].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[9].radius", "154.979477" },
            { "input[9].useTangent", "TRUE" },
            { "input[9].valueType", "NEURAL_VALUE_FORCE" },
            { "output[100].forceType", "NEURAL_FORCE_COHERE" },
            { "output[100].radius", "529.224609" },
            { "output[100].useTangent", "FALSE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_BASE" },
            { "output[101].radius", "1351.212036" },
            { "output[101].useTangent", "TRUE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[102].radius", "13.126847" },
            { "output[102].useTangent", "FALSE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_COHERE" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "TRUE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[104].radius", "1729.684937" },
            { "output[104].useTangent", "FALSE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_CORES" },
            { "output[105].radius", "278.047913" },
            { "output[105].useTangent", "FALSE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_ZERO" },
            { "output[106].radius", "2541.187500" },
            { "output[106].useTangent", "FALSE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_CORES" },
            { "output[107].radius", "0.000000" },
            { "output[107].useTangent", "FALSE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[108].radius", "-1.000000" },
            { "output[108].useTangent", "FALSE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "output[109].radius", "1411.446289" },
            { "output[109].useTangent", "TRUE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_CORES" },
            { "output[110].radius", "2727.242432" },
            { "output[110].useTangent", "TRUE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[111].radius", "-1.000000" },
            { "output[111].useTangent", "TRUE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_EDGES" },
            { "output[112].radius", "312.907501" },
            { "output[112].useTangent", "TRUE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_CORES" },
            { "output[113].radius", "-1.000000" },
            { "output[113].useTangent", "TRUE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[114].radius", "322.285767" },
            { "output[114].useTangent", "FALSE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[115].radius", "-1.000000" },
            { "output[115].useTangent", "FALSE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "TRUE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[117].radius", "850.924561" },
            { "output[117].useTangent", "FALSE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[118].radius", "298.878693" },
            { "output[118].useTangent", "FALSE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_EDGES" },
            { "output[119].radius", "3000.000000" },
            { "output[119].useTangent", "FALSE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[120].radius", "2963.549072" },
            { "output[120].useTangent", "TRUE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "FALSE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[122].radius", "1693.586426" },
            { "output[122].useTangent", "FALSE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_ZERO" },
            { "output[123].radius", "1030.571045" },
            { "output[123].useTangent", "TRUE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_HEADING" },
            { "output[124].radius", "-1.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "TRUE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1205.595825" },
            { "startingMinRadius", "497.346680" },
        };
        NeuralConfigValue configs7[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "126.515465" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "220.050980" },
            { "evadeStrictDistance", "112.318771" },
            { "evadeUseStrictDistance", "FALSE" },
            { "floatNet.node[100].inputs", "{0, 65, 48, 20, }" },
            { "floatNet.node[100].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[100].params", "{1.050000, 3.157942, 0.290901, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[101].inputs", "{89, 8, 63, }" },
            { "floatNet.node[101].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[101].params", "{1.000000, }" },
            { "floatNet.node[102].inputs", "{24, 42, 101, 98, 32, 6, 22, }" },
            { "floatNet.node[102].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_STEP" },
            { "floatNet.node[102].params", "{1.549154, 0.000000, 2.486770, 17069.486328, 1.000000, }" },
            { "floatNet.node[103].inputs", "{97, 89, 54, 99, 10, 28, }" },
            { "floatNet.node[103].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[103].params", "{2074.110107, 1577.410767, 30.000000, 1.000000, 2.559829, 1542.321899, 1.050000, 0.000000, }" },
            { "floatNet.node[104].inputs", "{21, 57, }" },
            { "floatNet.node[104].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[104].params", "{147.082001, }" },
            { "floatNet.node[105].inputs", "{14, 11, 20, 82, }" },
            { "floatNet.node[105].op", "ML_FOP_0x0_ONE" },
            { "floatNet.node[105].params", "{0.000000, 0.000000, 0.950000, 1.000000, 0.000000, }" },
            { "floatNet.node[106].inputs", "{}" },
            { "floatNet.node[106].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[106].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[107].inputs", "{37, }" },
            { "floatNet.node[107].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[107].params", "{0.098196, 162.001144, }" },
            { "floatNet.node[108].inputs", "{66, 71, }" },
            { "floatNet.node[108].op", "ML_FOP_2x0_SQUARE_SUM" },
            { "floatNet.node[108].params", "{0.102480, 0.025149, 1.000000, }" },
            { "floatNet.node[109].inputs", "{30, 52, 80, 31, 85, 35, }" },
            { "floatNet.node[109].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[109].params", "{1.000000, 3.614649, 0.000000, 0.000000, }" },
            { "floatNet.node[110].inputs", "{73, 98, 25, 97, 61, 66, 13, }" },
            { "floatNet.node[110].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[110].params", "{0.000000, 0.000000, 0.000000, 1.000000, 1.535785, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[111].inputs", "{67, 85, 74, }" },
            { "floatNet.node[111].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[111].params", "{}" },
            { "floatNet.node[112].inputs", "{15, 52, 32, }" },
            { "floatNet.node[112].op", "ML_FOP_1x0_ABS_SINE" },
            { "floatNet.node[112].params", "{1488.736206, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[113].inputs", "{41, 80, 33, 78, 73, }" },
            { "floatNet.node[113].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[113].params", "{}" },
            { "floatNet.node[114].inputs", "{106, 15, 73, 4, 22, }" },
            { "floatNet.node[114].op", "ML_FOP_0x1_UNIT_CONSTANT" },
            { "floatNet.node[114].params", "{}" },
            { "floatNet.node[115].inputs", "{}" },
            { "floatNet.node[115].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[115].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[116].inputs", "{}" },
            { "floatNet.node[116].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[116].params", "{0.000000, }" },
            { "floatNet.node[117].inputs", "{46, 105, 28, 84, 36, 34, 1, }" },
            { "floatNet.node[117].op", "ML_FOP_1x0_UNIT_SINE" },
            { "floatNet.node[117].params", "{0.000000, }" },
            { "floatNet.node[118].inputs", "{1, 70, 76, 97, 37, 103, 95, }" },
            { "floatNet.node[118].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[118].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[119].inputs", "{49, 31, 118, }" },
            { "floatNet.node[119].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[119].params", "{}" },
            { "floatNet.node[120].inputs", "{97, 68, 47, }" },
            { "floatNet.node[120].op", "ML_FOP_2x0_CEIL_STEP" },
            { "floatNet.node[120].params", "{1.000000, 0.000000, 12915.712891, 986.982422, 0.975684, }" },
            { "floatNet.node[121].inputs", "{31, 91, 42, 95, }" },
            { "floatNet.node[121].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[121].params", "{0.000000, }" },
            { "floatNet.node[122].inputs", "{50, 55, 118, 23, }" },
            { "floatNet.node[122].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[122].params", "{0.000000, 0.000000, 0.070739, 0.000000, 0.000000, 0.000000, 1.000000, }" },
            { "floatNet.node[123].inputs", "{106, 29, 113, 37, 88, 109, 66, 85, }" },
            { "floatNet.node[123].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[123].params", "{}" },
            { "floatNet.node[124].inputs", "{63, 69, 37, 4, }" },
            { "floatNet.node[124].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[124].params", "{270.443268, 0.000000, 0.000000, 9.500000, 2914.313232, 963.145081, 0.000000, 0.000000, }" },
            { "floatNet.node[25].inputs", "{}" },
            { "floatNet.node[25].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[25].params", "{0.690146, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[26].inputs", "{}" },
            { "floatNet.node[26].op", "ML_FOP_NxN_SCALED_DIV_SUM" },
            { "floatNet.node[26].params", "{0.978316, }" },
            { "floatNet.node[27].inputs", "{15, 9, 17, }" },
            { "floatNet.node[27].op", "ML_FOP_1x1_SUM" },
            { "floatNet.node[27].params", "{0.000000, 0.950000, 0.000000, 0.099296, 20.911724, 0.950000, 0.000000, }" },
            { "floatNet.node[28].inputs", "{14, 6, 8, 7, 27, 20, 20, 17, }" },
            { "floatNet.node[28].op", "ML_FOP_1x0_TAN" },
            { "floatNet.node[28].params", "{1.906663, 0.673616, 3.771181, 1.621481, 0.000000, 1799.310303, 1134.111328, }" },
            { "floatNet.node[29].inputs", "{20, }" },
            { "floatNet.node[29].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[29].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[30].inputs", "{}" },
            { "floatNet.node[30].op", "ML_FOP_2x2_IF_GTE_ELSE" },
            { "floatNet.node[30].params", "{946.218506, 1.703727, 10.000000, 942.655945, 0.000000, }" },
            { "floatNet.node[31].inputs", "{2, 25, 12, 19, 18, 0, }" },
            { "floatNet.node[31].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[31].params", "{}" },
            { "floatNet.node[32].inputs", "{}" },
            { "floatNet.node[32].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[32].params", "{0.000000, 165.942139, 1.000000, 0.000000, }" },
            { "floatNet.node[33].inputs", "{31, 12, 27, 26, 32, 10, 20, 21, }" },
            { "floatNet.node[33].op", "ML_FOP_1x3_ARC_SINE" },
            { "floatNet.node[33].params", "{24.350241, 3000.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[34].inputs", "{1, }" },
            { "floatNet.node[34].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_DOWN" },
            { "floatNet.node[34].params", "{}" },
            { "floatNet.node[35].inputs", "{11, 32, 7, 28, 7, 2, 2, }" },
            { "floatNet.node[35].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[35].params", "{0.000000, 0.997500, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, }" },
            { "floatNet.node[36].inputs", "{}" },
            { "floatNet.node[36].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[36].params", "{1.050000, 147.512619, 1243.717163, 0.000000, }" },
            { "floatNet.node[37].inputs", "{}" },
            { "floatNet.node[37].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[37].params", "{139.306885, }" },
            { "floatNet.node[38].inputs", "{6, 30, 5, 34, 30, 33, 14, }" },
            { "floatNet.node[38].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[38].params", "{0.098851, 0.000000, }" },
            { "floatNet.node[39].inputs", "{16, 11, 25, 30, }" },
            { "floatNet.node[39].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[39].params", "{}" },
            { "floatNet.node[40].inputs", "{17, 20, 36, 30, }" },
            { "floatNet.node[40].op", "ML_FOP_2x2_IF_GTE_ELSE" },
            { "floatNet.node[40].params", "{2393.776367, 0.000000, 0.477213, }" },
            { "floatNet.node[41].inputs", "{36, 20, 23, 36, 39, 19, 17, 23, }" },
            { "floatNet.node[41].op", "ML_FOP_1x1_PRODUCT" },
            { "floatNet.node[41].params", "{}" },
            { "floatNet.node[42].inputs", "{5, 34, 4, 4, 15, }" },
            { "floatNet.node[42].op", "ML_FOP_1x3_SQRT" },
            { "floatNet.node[42].params", "{2.879699, 0.096651, 26.267208, 1240.511597, 0.000000, 0.098331, }" },
            { "floatNet.node[43].inputs", "{5, 5, }" },
            { "floatNet.node[43].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[43].params", "{0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[44].inputs", "{24, 36, }" },
            { "floatNet.node[44].op", "ML_FOP_3x0_IF_GTEZ_ELSE" },
            { "floatNet.node[44].params", "{28.146860, 0.000000, 148.704834, 0.000000, 0.000000, }" },
            { "floatNet.node[45].inputs", "{1, 41, 35, 28, 40, 23, }" },
            { "floatNet.node[45].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[45].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[46].inputs", "{24, 25, 35, 4, 27, 9, 18, }" },
            { "floatNet.node[46].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[46].params", "{}" },
            { "floatNet.node[47].inputs", "{26, 8, 32, 9, }" },
            { "floatNet.node[47].op", "ML_FOP_2x0_PRODUCT" },
            { "floatNet.node[47].params", "{0.000000, 998.640320, 1.221448, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[48].inputs", "{7, 47, }" },
            { "floatNet.node[48].op", "ML_FOP_1x3_SQRT" },
            { "floatNet.node[48].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[49].inputs", "{33, 27, 12, 6, 39, }" },
            { "floatNet.node[49].op", "ML_FOP_3x2_IF_INSIDE_RANGE_CONST_ELSE" },
            { "floatNet.node[49].params", "{0.000000, 1.000000, 0.000000, 0.000000, 1.000000, }" },
            { "floatNet.node[50].inputs", "{35, 0, 16, 44, 49, }" },
            { "floatNet.node[50].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_UP" },
            { "floatNet.node[50].params", "{1.000000, 0.000000, 147.118774, 0.000000, 0.000000, }" },
            { "floatNet.node[51].inputs", "{38, 50, 45, 21, 22, 19, }" },
            { "floatNet.node[51].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[51].params", "{0.000000, 144.050110, 0.000000, 610.074646, 0.972787, 0.000000, 0.000000, }" },
            { "floatNet.node[52].inputs", "{11, }" },
            { "floatNet.node[52].op", "ML_FOP_3x0_IF_LTEZ_ELSE" },
            { "floatNet.node[52].params", "{1.000000, 8.878457, 1.100000, 3000.000000, 1615.755493, 0.000000, 152.121124, 430.216583, }" },
            { "floatNet.node[53].inputs", "{18, 33, 27, 33, 48, }" },
            { "floatNet.node[53].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[53].params", "{1.000000, 2950.105957, 1.023432, 2.503662, 19.237644, 2059.433105, }" },
            { "floatNet.node[54].inputs", "{50, }" },
            { "floatNet.node[54].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[54].params", "{0.000000, 0.287147, }" },
            { "floatNet.node[55].inputs", "{34, 35, 0, 35, 23, 48, }" },
            { "floatNet.node[55].op", "ML_FOP_1x1_SUM" },
            { "floatNet.node[55].params", "{2.531037, 1.487723, 0.000000, 0.568502, 0.000000, 0.000000, 0.954455, }" },
            { "floatNet.node[56].inputs", "{23, 48, 51, 28, 46, }" },
            { "floatNet.node[56].op", "ML_FOP_NxN_ANCHORED_ARITHMETIC_MEAN" },
            { "floatNet.node[56].params", "{1009.547424, 1.000000, 0.115097, }" },
            { "floatNet.node[57].inputs", "{6, 21, 11, 31, }" },
            { "floatNet.node[57].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[57].params", "{0.000000, }" },
            { "floatNet.node[58].inputs", "{25, 44, 15, 0, 1, 56, 35, 15, }" },
            { "floatNet.node[58].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[58].params", "{0.093223, 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, }" },
            { "floatNet.node[59].inputs", "{0, 14, 12, 23, 21, 36, }" },
            { "floatNet.node[59].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[59].params", "{0.916065, 0.000000, }" },
            { "floatNet.node[60].inputs", "{2, 4, 13, 42, 43, 15, 5, }" },
            { "floatNet.node[60].op", "ML_FOP_1x2_OUTSIDE_RANGE" },
            { "floatNet.node[60].params", "{}" },
            { "floatNet.node[61].inputs", "{37, 10, 0, 3, 50, 16, 28, 60, }" },
            { "floatNet.node[61].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[61].params", "{0.000000, 2289.867920, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[62].inputs", "{45, 30, 9, 20, 24, 35, }" },
            { "floatNet.node[62].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[62].params", "{0.000000, 3.126021, 2.724704, 0.625494, 1.000000, 0.000000, }" },
            { "floatNet.node[63].inputs", "{29, 48, 59, 21, }" },
            { "floatNet.node[63].op", "ML_FOP_1x2_SEEDED_RANDOM" },
            { "floatNet.node[63].params", "{1262.952148, 267.808807, 1.000000, 1012.080505, 8.816449, 163.016144, }" },
            { "floatNet.node[64].inputs", "{58, 5, 47, 11, 19, 35, 10, }" },
            { "floatNet.node[64].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_LERP" },
            { "floatNet.node[64].params", "{0.008561, 1.000000, 144.099915, 3.792801, 306.672180, 5890.657227, }" },
            { "floatNet.node[65].inputs", "{63, 30, 63, 33, 13, 44, 28, }" },
            { "floatNet.node[65].op", "ML_FOP_1x0_SIN" },
            { "floatNet.node[65].params", "{}" },
            { "floatNet.node[66].inputs", "{}" },
            { "floatNet.node[66].op", "ML_FOP_1x1_GTE" },
            { "floatNet.node[66].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[67].inputs", "{14, 33, 44, 36, 65, 54, 44, }" },
            { "floatNet.node[67].op", "ML_FOP_2x2_IF_GTE_ELSE" },
            { "floatNet.node[67].params", "{0.000000, 10.000000, 156.661469, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[68].inputs", "{12, 66, 66, }" },
            { "floatNet.node[68].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[68].params", "{2960.583740, }" },
            { "floatNet.node[69].inputs", "{}" },
            { "floatNet.node[69].op", "ML_FOP_1x0_NEGATE" },
            { "floatNet.node[69].params", "{918.871704, 0.000000, 0.000000, 0.000000, 0.519156, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[70].inputs", "{}" },
            { "floatNet.node[70].op", "ML_FOP_1x3_SQRT" },
            { "floatNet.node[70].params", "{2878.717773, 0.000000, 1.000000, }" },
            { "floatNet.node[71].inputs", "{55, }" },
            { "floatNet.node[71].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[71].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[72].inputs", "{60, 44, }" },
            { "floatNet.node[72].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[72].params", "{1190.784302, }" },
            { "floatNet.node[73].inputs", "{51, 39, 20, 64, }" },
            { "floatNet.node[73].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[73].params", "{1.000000, 295.617401, }" },
            { "floatNet.node[74].inputs", "{68, }" },
            { "floatNet.node[74].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[74].params", "{0.000000, }" },
            { "floatNet.node[75].inputs", "{}" },
            { "floatNet.node[75].op", "ML_FOP_NxN_WEIGHTED_ARITHMETIC_MEAN" },
            { "floatNet.node[75].params", "{1.000000, 987.148621, 24.098963, 156.196716, 0.194995, }" },
            { "floatNet.node[76].inputs", "{18, 46, 13, 67, }" },
            { "floatNet.node[76].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[76].params", "{0.000000, 1.288472, 2.405927, 0.000000, }" },
            { "floatNet.node[77].inputs", "{14, 19, 62, 74, 48, 71, }" },
            { "floatNet.node[77].op", "ML_FOP_3x3_LINEAR_COMBINATION" },
            { "floatNet.node[77].params", "{2956.990723, 0.000000, 0.843079, 0.000000, 0.000000, 0.508879, 0.000000, }" },
            { "floatNet.node[78].inputs", "{8, }" },
            { "floatNet.node[78].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[78].params", "{}" },
            { "floatNet.node[79].inputs", "{23, 4, 38, }" },
            { "floatNet.node[79].op", "ML_FOP_1x2_CLAMPED_SCALE_FROM_UNIT" },
            { "floatNet.node[79].params", "{0.893583, 0.000000, 0.000000, 0.100938, }" },
            { "floatNet.node[80].inputs", "{20, 11, 63, 21, 15, }" },
            { "floatNet.node[80].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[80].params", "{3.804961, 0.000000, 0.948949, 0.000000, }" },
            { "floatNet.node[81].inputs", "{13, 46, 55, 49, 3, 30, 60, }" },
            { "floatNet.node[81].op", "ML_FOP_1x1_LTE" },
            { "floatNet.node[81].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 660.309509, }" },
            { "floatNet.node[82].inputs", "{8, 50, 14, 10, 15, 53, }" },
            { "floatNet.node[82].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[82].params", "{0.000000, 0.214584, 0.097141, }" },
            { "floatNet.node[83].inputs", "{2, 47, 15, 15, }" },
            { "floatNet.node[83].op", "ML_FOP_Nx0_SUM" },
            { "floatNet.node[83].params", "{1.000000, }" },
            { "floatNet.node[84].inputs", "{74, 5, 62, 17, 13, 4, 48, 30, }" },
            { "floatNet.node[84].op", "ML_FOP_4x0_IF_LTE_ELSE" },
            { "floatNet.node[84].params", "{0.183362, 0.000000, 1.517727, 1.000000, 0.696999, }" },
            { "floatNet.node[85].inputs", "{}" },
            { "floatNet.node[85].op", "ML_FOP_0x0_ONE" },
            { "floatNet.node[85].params", "{0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[86].inputs", "{}" },
            { "floatNet.node[86].op", "ML_FOP_2x2_IF_GTE_ELSE" },
            { "floatNet.node[86].params", "{0.000000, 1271.795532, 993.136169, 28.777386, 0.000000, 0.000000, }" },
            { "floatNet.node[87].inputs", "{11, }" },
            { "floatNet.node[87].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[87].params", "{0.000000, }" },
            { "floatNet.node[88].inputs", "{80, 56, 65, 60, 75, 66, }" },
            { "floatNet.node[88].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[88].params", "{12.581761, 2.118496, 7.529765, 0.044859, }" },
            { "floatNet.node[89].inputs", "{80, 84, 37, 32, 56, }" },
            { "floatNet.node[89].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_LERP" },
            { "floatNet.node[89].params", "{0.000000, 249.003098, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[90].inputs", "{21, 66, 13, 78, 82, 9, }" },
            { "floatNet.node[90].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[90].params", "{}" },
            { "floatNet.node[91].inputs", "{64, 16, 89, 30, 85, 54, 35, 48, }" },
            { "floatNet.node[91].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[91].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[92].inputs", "{70, 21, 0, 84, 67, 71, 55, }" },
            { "floatNet.node[92].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[92].params", "{0.000000, 0.000000, 1.684222, 0.000000, }" },
            { "floatNet.node[93].inputs", "{71, }" },
            { "floatNet.node[93].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[93].params", "{22.774969, 1.000000, 1.000000, 0.758635, }" },
            { "floatNet.node[94].inputs", "{13, 51, 19, 11, 71, }" },
            { "floatNet.node[94].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[94].params", "{5.410668, 1.007700, 0.571086, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[95].inputs", "{87, 94, 55, 22, 92, 51, 33, 91, }" },
            { "floatNet.node[95].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_STEP" },
            { "floatNet.node[95].params", "{145.791794, 1.000000, 1.000000, 0.000000, 0.000000, 0.867916, }" },
            { "floatNet.node[96].inputs", "{25, 88, 8, 53, 4, 43, 46, 90, }" },
            { "floatNet.node[96].op", "ML_FOP_1x1_CEIL_STEP" },
            { "floatNet.node[96].params", "{2913.188721, 0.000000, 1.846820, 949.599121, }" },
            { "floatNet.node[97].inputs", "{}" },
            { "floatNet.node[97].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[97].params", "{0.000000, }" },
            { "floatNet.node[98].inputs", "{44, 77, 32, 50, 78, }" },
            { "floatNet.node[98].op", "ML_FOP_NxN_LINEAR_COMBINATION_CLAMPED_UNIT" },
            { "floatNet.node[98].params", "{0.000000, }" },
            { "floatNet.node[99].inputs", "{30, }" },
            { "floatNet.node[99].op", "ML_FOP_2x2_IF_LTE_ELSE" },
            { "floatNet.node[99].params", "{1.000000, 0.000000, 0.858177, 3000.000000, }" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "FALSE" },
            { "gatherRange", "53.190826" },
            { "guardRange", "87.259979" },
            { "input[0].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[0].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "FALSE" },
            { "input[0].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[10].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[10].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[10].radius", "0.000000" },
            { "input[10].useTangent", "FALSE" },
            { "input[10].valueType", "NEURAL_VALUE_FORCE" },
            { "input[11].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[11].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[11].radius", "0.000000" },
            { "input[11].useTangent", "FALSE" },
            { "input[11].valueType", "NEURAL_VALUE_CROWD" },
            { "input[11].waveType", "NEURAL_WAVE_UNIT_SINE" },
            { "input[12].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[12].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[12].frequency", "0.000000" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "FALSE" },
            { "input[12].valueType", "NEURAL_VALUE_CROWD" },
            { "input[12].waveType", "NEURAL_WAVE_SINE" },
            { "input[13].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[13].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[13].frequency", "0.000000" },
            { "input[13].radius", "0.000000" },
            { "input[13].useTangent", "TRUE" },
            { "input[13].valueType", "NEURAL_VALUE_FORCE" },
            { "input[13].waveType", "NEURAL_WAVE_SINE" },
            { "input[14].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[14].forceType", "NEURAL_FORCE_CORES" },
            { "input[14].frequency", "0.000000" },
            { "input[14].radius", "164.939926" },
            { "input[14].useTangent", "TRUE" },
            { "input[14].valueType", "NEURAL_VALUE_FORCE" },
            { "input[14].waveType", "NEURAL_WAVE_FMOD" },
            { "input[15].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[15].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[15].radius", "156.087997" },
            { "input[15].useTangent", "FALSE" },
            { "input[15].valueType", "NEURAL_VALUE_FORCE" },
            { "input[16].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[16].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[16].frequency", "0.000000" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "TRUE" },
            { "input[16].valueType", "NEURAL_VALUE_CROWD" },
            { "input[17].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[17].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[17].frequency", "4093.644043" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "TRUE" },
            { "input[17].valueType", "NEURAL_VALUE_FORCE" },
            { "input[17].waveType", "NEURAL_WAVE_FMOD" },
            { "input[18].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[18].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[18].frequency", "0.000000" },
            { "input[18].radius", "147.504044" },
            { "input[18].useTangent", "TRUE" },
            { "input[18].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[18].waveType", "NEURAL_WAVE_FMOD" },
            { "input[19].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[19].forceType", "NEURAL_FORCE_EDGES" },
            { "input[19].radius", "-1.000000" },
            { "input[19].useTangent", "FALSE" },
            { "input[19].valueType", "NEURAL_VALUE_CROWD" },
            { "input[1].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[1].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[1].radius", "301.750824" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_CROWD" },
            { "input[20].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[20].forceType", "NEURAL_FORCE_HEADING" },
            { "input[20].frequency", "0.000000" },
            { "input[20].radius", "0.000000" },
            { "input[20].useTangent", "FALSE" },
            { "input[20].valueType", "NEURAL_VALUE_CROWD" },
            { "input[20].waveType", "NEURAL_WAVE_FMOD" },
            { "input[21].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[21].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[21].frequency", "0.000000" },
            { "input[21].radius", "-1.000000" },
            { "input[21].useTangent", "FALSE" },
            { "input[21].valueType", "NEURAL_VALUE_CROWD" },
            { "input[22].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[22].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[22].radius", "6.802381" },
            { "input[22].useTangent", "FALSE" },
            { "input[22].valueType", "NEURAL_VALUE_CROWD" },
            { "input[23].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[23].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[23].frequency", "0.000000" },
            { "input[23].radius", "-1.000000" },
            { "input[23].useTangent", "FALSE" },
            { "input[23].valueType", "NEURAL_VALUE_TICK" },
            { "input[23].waveType", "NEURAL_WAVE_NONE" },
            { "input[24].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[24].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[24].frequency", "0.000000" },
            { "input[24].radius", "1086.721436" },
            { "input[24].useTangent", "TRUE" },
            { "input[24].valueType", "NEURAL_VALUE_CROWD" },
            { "input[2].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[2].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[2].radius", "148.709793" },
            { "input[2].useTangent", "FALSE" },
            { "input[2].valueType", "NEURAL_VALUE_FORCE" },
            { "input[3].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[3].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[3].radius", "-1.000000" },
            { "input[3].useTangent", "TRUE" },
            { "input[3].valueType", "NEURAL_VALUE_CROWD" },
            { "input[4].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[4].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[4].frequency", "5622.903809" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "TRUE" },
            { "input[4].valueType", "NEURAL_VALUE_FORCE" },
            { "input[5].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[5].forceType", "NEURAL_FORCE_BASE" },
            { "input[5].frequency", "0.000000" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "FALSE" },
            { "input[5].valueType", "NEURAL_VALUE_FORCE" },
            { "input[5].waveType", "NEURAL_WAVE_SINE" },
            { "input[6].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[6].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[6].frequency", "0.000000" },
            { "input[6].radius", "-0.950000" },
            { "input[6].useTangent", "TRUE" },
            { "input[6].valueType", "NEURAL_VALUE_CROWD" },
            { "input[6].waveType", "NEURAL_WAVE_NONE" },
            { "input[7].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[7].forceType", "NEURAL_FORCE_ZERO" },
            { "input[7].radius", "4.193549" },
            { "input[7].useTangent", "FALSE" },
            { "input[7].valueType", "NEURAL_VALUE_ZERO" },
            { "input[8].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[8].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[8].frequency", "0.000000" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "FALSE" },
            { "input[8].valueType", "NEURAL_VALUE_ZERO" },
            { "input[8].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[9].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[9].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "input[9].radius", "154.979477" },
            { "input[9].useTangent", "FALSE" },
            { "input[9].valueType", "NEURAL_VALUE_FORCE" },
            { "output[100].forceType", "NEURAL_FORCE_COHERE" },
            { "output[100].radius", "529.224609" },
            { "output[100].useTangent", "FALSE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[101].radius", "1351.212036" },
            { "output[101].useTangent", "FALSE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_CORES" },
            { "output[102].radius", "167.162323" },
            { "output[102].useTangent", "TRUE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "TRUE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_CORNERS" },
            { "output[104].radius", "1729.684937" },
            { "output[104].useTangent", "TRUE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_HEADING" },
            { "output[105].radius", "278.047913" },
            { "output[105].useTangent", "TRUE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[106].radius", "2541.187500" },
            { "output[106].useTangent", "TRUE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[107].radius", "-1.000000" },
            { "output[107].useTangent", "TRUE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_EDGES" },
            { "output[108].radius", "-1.000000" },
            { "output[108].useTangent", "TRUE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[109].radius", "1411.446289" },
            { "output[109].useTangent", "FALSE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_ZERO" },
            { "output[110].radius", "2727.242432" },
            { "output[110].useTangent", "TRUE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[111].radius", "-1.000000" },
            { "output[111].useTangent", "FALSE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[112].radius", "312.907501" },
            { "output[112].useTangent", "TRUE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "output[113].radius", "-1.000000" },
            { "output[113].useTangent", "TRUE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[114].radius", "322.285767" },
            { "output[114].useTangent", "TRUE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[115].radius", "-1.000000" },
            { "output[115].useTangent", "FALSE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "TRUE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_HEADING" },
            { "output[117].radius", "850.924561" },
            { "output[117].useTangent", "TRUE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[118].radius", "298.878693" },
            { "output[118].useTangent", "FALSE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_EDGES" },
            { "output[119].radius", "3000.000000" },
            { "output[119].useTangent", "TRUE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[120].radius", "2963.549072" },
            { "output[120].useTangent", "FALSE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "FALSE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_EDGES" },
            { "output[122].radius", "1693.586426" },
            { "output[122].useTangent", "FALSE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_ZERO" },
            { "output[123].radius", "1030.571045" },
            { "output[123].useTangent", "FALSE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[124].radius", "-1.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "FALSE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1202.581787" },
            { "startingMinRadius", "496.103271" },
        };
        NeuralConfigValue configs8[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "126.515465" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "220.050980" },
            { "evadeStrictDistance", "106.970261" },
            { "evadeUseStrictDistance", "FALSE" },
            { "floatNet.node[100].inputs", "{0, 65, 48, 37, }" },
            { "floatNet.node[100].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[100].params", "{1.050000, 3.157942, 0.290901, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[101].inputs", "{62, 8, 63, 62, }" },
            { "floatNet.node[101].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[101].params", "{1.592908, 0.000000, }" },
            { "floatNet.node[102].inputs", "{24, 42, 101, 0, 86, 6, 58, }" },
            { "floatNet.node[102].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_STEP" },
            { "floatNet.node[102].params", "{1.549154, 0.000000, 2.486770, 17069.486328, 1.000000, 0.000000, }" },
            { "floatNet.node[103].inputs", "{97, 10, 89, 34, 54, 99, }" },
            { "floatNet.node[103].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[103].params", "{2074.110107, 1577.410767, 30.000000, 1.000000, 2.559829, 1542.321899, 1.050000, }" },
            { "floatNet.node[104].inputs", "{57, 21, }" },
            { "floatNet.node[104].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[104].params", "{1.551640, 147.082001, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[105].inputs", "{71, 29, 32, }" },
            { "floatNet.node[105].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[105].params", "{0.950000, }" },
            { "floatNet.node[106].inputs", "{70, }" },
            { "floatNet.node[106].op", "ML_FOP_1x3_ARC_COSINE" },
            { "floatNet.node[106].params", "{0.000000, }" },
            { "floatNet.node[107].inputs", "{44, 70, 53, 79, 41, }" },
            { "floatNet.node[107].op", "ML_FOP_NxN_WEIGHTED_GEOMETRIC_MEAN" },
            { "floatNet.node[107].params", "{1.505585, 170.101196, 0.093286, 105.946144, 0.000000, }" },
            { "floatNet.node[108].inputs", "{66, 71, }" },
            { "floatNet.node[108].op", "ML_FOP_2x0_SQUARE_SUM" },
            { "floatNet.node[108].params", "{0.027664, 0.465548, 0.102480, }" },
            { "floatNet.node[109].inputs", "{30, 52, 70, 103, 100, 103, 36, 86, }" },
            { "floatNet.node[109].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[109].params", "{2.584399, 0.000000, 2.038359, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[110].inputs", "{28, 93, 73, 13, 30, 66, 48, }" },
            { "floatNet.node[110].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[110].params", "{1.535785, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[111].inputs", "{}" },
            { "floatNet.node[111].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[111].params", "{0.000000, 1.000000, 0.880088, 1.603846, 0.000000, 0.000000, }" },
            { "floatNet.node[112].inputs", "{15, 52, 32, }" },
            { "floatNet.node[112].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[112].params", "{1663.555542, 0.105418, 0.000000, }" },
            { "floatNet.node[113].inputs", "{41, 98, 33, 78, 73, }" },
            { "floatNet.node[113].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[113].params", "{0.000000, }" },
            { "floatNet.node[114].inputs", "{106, 14, 73, 72, }" },
            { "floatNet.node[114].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[114].params", "{0.000000, }" },
            { "floatNet.node[115].inputs", "{}" },
            { "floatNet.node[115].op", "ML_FOP_1x3_SQUARE" },
            { "floatNet.node[115].params", "{0.000000, }" },
            { "floatNet.node[116].inputs", "{}" },
            { "floatNet.node[116].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[116].params", "{}" },
            { "floatNet.node[117].inputs", "{35, 14, 84, 53, 1, 94, 101, }" },
            { "floatNet.node[117].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[117].params", "{0.000000, }" },
            { "floatNet.node[118].inputs", "{1, 70, 76, 97, 37, 103, 95, }" },
            { "floatNet.node[118].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[118].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.187890, }" },
            { "floatNet.node[119].inputs", "{49, 31, 2, }" },
            { "floatNet.node[119].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[119].params", "{}" },
            { "floatNet.node[120].inputs", "{113, 114, 68, 46, }" },
            { "floatNet.node[120].op", "ML_FOP_2x0_CEIL_STEP" },
            { "floatNet.node[120].params", "{1.000000, 0.000000, 986.982422, 0.497635, 1.308342, 27.260221, 0.896650, }" },
            { "floatNet.node[121].inputs", "{31, 91, 42, 109, }" },
            { "floatNet.node[121].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[121].params", "{1.000000, }" },
            { "floatNet.node[122].inputs", "{10, 5, 118, 98, }" },
            { "floatNet.node[122].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[122].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[123].inputs", "{106, 29, 113, 37, 100, 109, }" },
            { "floatNet.node[123].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[123].params", "{}" },
            { "floatNet.node[124].inputs", "{63, 69, 34, 4, }" },
            { "floatNet.node[124].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[124].params", "{0.452424, 0.000000, 0.000000, 9.500000, 2914.313232, 963.145081, 0.000000, }" },
            { "floatNet.node[25].inputs", "{}" },
            { "floatNet.node[25].op", "ML_FOP_1x1_FLOOR_STEP" },
            { "floatNet.node[25].params", "{2.270812, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, }" },
            { "floatNet.node[26].inputs", "{20, }" },
            { "floatNet.node[26].op", "ML_FOP_NxN_SCALED_DIV_SUM" },
            { "floatNet.node[26].params", "{0.804978, }" },
            { "floatNet.node[27].inputs", "{17, 15, 9, }" },
            { "floatNet.node[27].op", "ML_FOP_1x1_SUM" },
            { "floatNet.node[27].params", "{0.000000, 0.950000, 0.000000, 0.189884, 20.911724, 0.950000, 0.000000, }" },
            { "floatNet.node[28].inputs", "{19, 6, 8, 7, 27, 20, 20, 12, }" },
            { "floatNet.node[28].op", "ML_FOP_NxN_WEIGHTED_ARITHMETIC_MEAN" },
            { "floatNet.node[28].params", "{0.902500, 0.604975, 3.771181, 0.000000, 0.000000, 1799.310303, 1134.111328, }" },
            { "floatNet.node[29].inputs", "{18, 4, 8, 12, 21, 23, }" },
            { "floatNet.node[29].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[29].params", "{0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[30].inputs", "{11, }" },
            { "floatNet.node[30].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[30].params", "{898.907593, 1.703727, 10.000000, 942.655945, 0.000000, 1993.709961, 0.000000, }" },
            { "floatNet.node[31].inputs", "{29, 23, 23, 23, 19, 19, 8, 13, }" },
            { "floatNet.node[31].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[31].params", "{}" },
            { "floatNet.node[32].inputs", "{9, }" },
            { "floatNet.node[32].op", "ML_FOP_2x0_PRODUCT" },
            { "floatNet.node[32].params", "{0.000000, 165.942139, 1.000000, }" },
            { "floatNet.node[33].inputs", "{20, 12, 27, 27, 0, 7, 20, 21, }" },
            { "floatNet.node[33].op", "ML_FOP_1x3_ARC_SINE" },
            { "floatNet.node[33].params", "{24.350241, 11353.805664, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[34].inputs", "{1, 2, }" },
            { "floatNet.node[34].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_DOWN" },
            { "floatNet.node[34].params", "{}" },
            { "floatNet.node[35].inputs", "{11, 32, 7, 27, 13, 14, 25, 26, }" },
            { "floatNet.node[35].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[35].params", "{0.000000, 0.950000, 0.000000, }" },
            { "floatNet.node[36].inputs", "{}" },
            { "floatNet.node[36].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[36].params", "{0.000000, 147.512619, 977.566101, 1305.902954, }" },
            { "floatNet.node[37].inputs", "{}" },
            { "floatNet.node[37].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[37].params", "{146.638824, }" },
            { "floatNet.node[38].inputs", "{18, 37, 18, 1, 11, 28, }" },
            { "floatNet.node[38].op", "ML_FOP_3x2_IF_INSIDE_RANGE_CONST_ELSE" },
            { "floatNet.node[38].params", "{1.050000, 1.000000, }" },
            { "floatNet.node[39].inputs", "{38, 1, }" },
            { "floatNet.node[39].op", "ML_FOP_NxN_POW_SUM" },
            { "floatNet.node[39].params", "{0.898238, 1.000000, 0.000000, 0.864338, 3000.000000, 0.423913, 0.095528, }" },
            { "floatNet.node[40].inputs", "{17, 20, 36, }" },
            { "floatNet.node[40].op", "ML_FOP_1x3_EXP" },
            { "floatNet.node[40].params", "{2393.776367, 0.000000, 0.477213, 0.000000, 0.000000, }" },
            { "floatNet.node[41].inputs", "{36, 2, 12, 36, 39, }" },
            { "floatNet.node[41].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[41].params", "{0.028893, 244.829254, 0.950000, }" },
            { "floatNet.node[42].inputs", "{5, 34, 4, 4, 15, }" },
            { "floatNet.node[42].op", "ML_FOP_1x0_SQRT" },
            { "floatNet.node[42].params", "{2.879699, 0.096651, 24.953848, 1240.511597, 0.000000, }" },
            { "floatNet.node[43].inputs", "{5, 36, }" },
            { "floatNet.node[43].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[43].params", "{}" },
            { "floatNet.node[44].inputs", "{33, 31, 0, 20, 24, 15, }" },
            { "floatNet.node[44].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[44].params", "{148.704834, 28.146860, 0.000000, 0.000000, }" },
            { "floatNet.node[45].inputs", "{39, 31, 8, 28, 25, 23, }" },
            { "floatNet.node[45].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[45].params", "{0.000000, }" },
            { "floatNet.node[46].inputs", "{38, 25, 35, 4, 26, 13, 44, }" },
            { "floatNet.node[46].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[46].params", "{}" },
            { "floatNet.node[47].inputs", "{}" },
            { "floatNet.node[47].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[47].params", "{}" },
            { "floatNet.node[48].inputs", "{14, 47, }" },
            { "floatNet.node[48].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_DOWN" },
            { "floatNet.node[48].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[49].inputs", "{8, 47, 21, 4, 12, }" },
            { "floatNet.node[49].op", "ML_FOP_3x2_IF_INSIDE_RANGE_CONST_ELSE" },
            { "floatNet.node[49].params", "{1.000000, 0.000000, 0.000000, 0.000000, 0.192471, 0.000000, }" },
            { "floatNet.node[50].inputs", "{35, 0, 16, 27, 49, }" },
            { "floatNet.node[50].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_UP" },
            { "floatNet.node[50].params", "{1.000000, 0.000000, 147.118774, 255.701035, }" },
            { "floatNet.node[51].inputs", "{38, 50, 45, 24, 25, 19, }" },
            { "floatNet.node[51].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[51].params", "{0.000000, 0.000000, 0.000000, 144.050110, 22.819412, 0.972787, 0.000000, }" },
            { "floatNet.node[52].inputs", "{11, 16, 37, 5, }" },
            { "floatNet.node[52].op", "ML_FOP_1x0_COS" },
            { "floatNet.node[52].params", "{2.569370, 3000.000000, 1538.814819, 152.121124, 0.107637, 8.878457, 1.100000, }" },
            { "floatNet.node[53].inputs", "{18, 33, 27, 33, 17, 24, }" },
            { "floatNet.node[53].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[53].params", "{1.000000, 2950.105957, 1.023432, 1.000000, 19.237644, 2059.433105, }" },
            { "floatNet.node[54].inputs", "{}" },
            { "floatNet.node[54].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[54].params", "{0.287147, 0.000000, }" },
            { "floatNet.node[55].inputs", "{34, 28, 0, 16, 23, 48, }" },
            { "floatNet.node[55].op", "ML_FOP_1x1_SUM" },
            { "floatNet.node[55].params", "{1.000000, 1.487723, 0.000000, 0.568502, 0.000000, 0.000000, }" },
            { "floatNet.node[56].inputs", "{}" },
            { "floatNet.node[56].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[56].params", "{1009.547424, 1.000000, 0.115097, }" },
            { "floatNet.node[57].inputs", "{31, 45, 18, 11, 52, }" },
            { "floatNet.node[57].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[57].params", "{}" },
            { "floatNet.node[58].inputs", "{37, 32, 15, 37, 0, 16, }" },
            { "floatNet.node[58].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[58].params", "{0.093223, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.210516, }" },
            { "floatNet.node[59].inputs", "{0, 14, 12, 23, 21, 36, }" },
            { "floatNet.node[59].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[59].params", "{0.916065, 0.000000, }" },
            { "floatNet.node[60].inputs", "{57, 6, 44, }" },
            { "floatNet.node[60].op", "ML_FOP_1x0_NEGATE" },
            { "floatNet.node[60].params", "{954.130859, }" },
            { "floatNet.node[61].inputs", "{37, 10, 18, 47, 40, 53, }" },
            { "floatNet.node[61].op", "ML_FOP_2x0_POW" },
            { "floatNet.node[61].params", "{0.000000, 2444.366943, }" },
            { "floatNet.node[62].inputs", "{45, 30, 9, 20, 24, 61, }" },
            { "floatNet.node[62].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[62].params", "{0.000000, 1.561505, 2.724704, 0.731341, 1.000000, 0.000000, }" },
            { "floatNet.node[63].inputs", "{}" },
            { "floatNet.node[63].op", "ML_FOP_1x2_SEEDED_RANDOM" },
            { "floatNet.node[63].params", "{8.816449, 1262.952148, 1.000000, 961.476440, 163.016144, 267.808807, }" },
            { "floatNet.node[64].inputs", "{58, 12, 47, 11, 19, 19, }" },
            { "floatNet.node[64].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_LERP" },
            { "floatNet.node[64].params", "{0.117956, 1.000000, 144.099915, 5.269822, 150.577499, 5890.657227, 0.000000, 0.000000, }" },
            { "floatNet.node[65].inputs", "{63, 30, 63, 33, 13, 44, 28, }" },
            { "floatNet.node[65].op", "ML_FOP_1x0_SIN" },
            { "floatNet.node[65].params", "{30.000000, }" },
            { "floatNet.node[66].inputs", "{}" },
            { "floatNet.node[66].op", "ML_FOP_1x1_GTE" },
            { "floatNet.node[66].params", "{0.000000, 0.000000, 30.000000, }" },
            { "floatNet.node[67].inputs", "{14, 43, 44, 36, 65, 54, 44, }" },
            { "floatNet.node[67].op", "ML_FOP_1x1_LINEAR_COMBINATION" },
            { "floatNet.node[67].params", "{0.000000, 10.000000, 1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[68].inputs", "{14, 60, 57, 56, 63, 41, 3, }" },
            { "floatNet.node[68].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[68].params", "{2960.583740, }" },
            { "floatNet.node[69].inputs", "{}" },
            { "floatNet.node[69].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[69].params", "{918.871704, 1668.533569, 0.000000, 0.000000, 0.519156, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[70].inputs", "{}" },
            { "floatNet.node[70].op", "ML_FOP_1x3_SQRT" },
            { "floatNet.node[70].params", "{2878.717773, 0.000000, 1.000000, }" },
            { "floatNet.node[71].inputs", "{}" },
            { "floatNet.node[71].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[71].params", "{5.280350, 247.602066, 1.050000, 0.000000, 0.000000, 1.595623, }" },
            { "floatNet.node[72].inputs", "{60, 44, 27, }" },
            { "floatNet.node[72].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[72].params", "{}" },
            { "floatNet.node[73].inputs", "{6, 4, 20, 64, 72, }" },
            { "floatNet.node[73].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[73].params", "{295.617401, 1025.903687, }" },
            { "floatNet.node[74].inputs", "{68, }" },
            { "floatNet.node[74].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[74].params", "{}" },
            { "floatNet.node[75].inputs", "{}" },
            { "floatNet.node[75].op", "ML_FOP_NxN_POW_SUM" },
            { "floatNet.node[75].params", "{0.128921, 0.798429, 24.098963, 148.758789, 0.000000, 1904.422607, }" },
            { "floatNet.node[76].inputs", "{13, 13, 18, 67, }" },
            { "floatNet.node[76].op", "ML_FOP_NxN_LINEAR_COMBINATION" },
            { "floatNet.node[76].params", "{156.118637, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[77].inputs", "{71, }" },
            { "floatNet.node[77].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[77].params", "{0.000000, 0.000000, 0.000000, 0.000000, 4949.790039, 154.067734, 0.508879, }" },
            { "floatNet.node[78].inputs", "{}" },
            { "floatNet.node[78].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[78].params", "{}" },
            { "floatNet.node[79].inputs", "{54, 4, 23, 47, }" },
            { "floatNet.node[79].op", "ML_FOP_1x2_SEEDED_RANDOM" },
            { "floatNet.node[79].params", "{0.000000, 0.893583, 0.100938, 0.000000, 0.210219, 0.000000, }" },
            { "floatNet.node[80].inputs", "{20, 72, 63, 40, 37, 64, 13, 1, }" },
            { "floatNet.node[80].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[80].params", "{3.804961, 0.000000, 0.995469, 0.000000, 1.687327, }" },
            { "floatNet.node[81].inputs", "{13, 65, 55, 49, 3, 30, }" },
            { "floatNet.node[81].op", "ML_FOP_1x3_ARC_COSINE" },
            { "floatNet.node[81].params", "{0.000000, 0.000000, 0.000000, 0.000000, 660.309509, 1.000000, 1.000000, }" },
            { "floatNet.node[82].inputs", "{13, 79, 15, 67, 10, 14, 55, }" },
            { "floatNet.node[82].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[82].params", "{0.214584, }" },
            { "floatNet.node[83].inputs", "{}" },
            { "floatNet.node[83].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[83].params", "{0.483201, 0.000000, 8.884048, 0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[84].inputs", "{81, 72, 30, 54, 12, 5, 17, 38, }" },
            { "floatNet.node[84].op", "ML_FOP_1x0_ABS_SINE" },
            { "floatNet.node[84].params", "{0.193013, 0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[85].inputs", "{}" },
            { "floatNet.node[85].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[85].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[86].inputs", "{57, 56, 48, 24, 20, }" },
            { "floatNet.node[86].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[86].params", "{0.000000, 26.161259, 0.000000, 0.000000, }" },
            { "floatNet.node[87].inputs", "{10, }" },
            { "floatNet.node[87].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[87].params", "{0.000000, }" },
            { "floatNet.node[88].inputs", "{80, 56, 65, 52, 75, 66, }" },
            { "floatNet.node[88].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[88].params", "{12.581761, 2.118496, 7.529765, 0.044859, }" },
            { "floatNet.node[89].inputs", "{80, 63, }" },
            { "floatNet.node[89].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[89].params", "{0.000000, }" },
            { "floatNet.node[90].inputs", "{82, 78, 21, 13, 66, 53, }" },
            { "floatNet.node[90].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[90].params", "{}" },
            { "floatNet.node[91].inputs", "{64, 79, 90, 60, 85, 54, 19, 48, }" },
            { "floatNet.node[91].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[91].params", "{}" },
            { "floatNet.node[92].inputs", "{}" },
            { "floatNet.node[92].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[92].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[93].inputs", "{80, 70, 34, 73, 20, }" },
            { "floatNet.node[93].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[93].params", "{0.791874, 9.510728, 1.000000, 0.000000, 0.796567, 0.900000, 0.000000, 1.000000, }" },
            { "floatNet.node[94].inputs", "{13, 51, 77, 11, }" },
            { "floatNet.node[94].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[94].params", "{5.410668, 1.007700, 0.571086, }" },
            { "floatNet.node[95].inputs", "{87, 94, 55, 22, 92, 21, 52, }" },
            { "floatNet.node[95].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[95].params", "{0.867916, 2.559796, 0.950000, 0.000000, 0.000000, 138.502197, 0.000000, }" },
            { "floatNet.node[96].inputs", "{}" },
            { "floatNet.node[96].op", "ML_FOP_1x1_CEIL_STEP" },
            { "floatNet.node[96].params", "{2913.188721, 0.000000, 1.846820, 949.599121, }" },
            { "floatNet.node[97].inputs", "{52, }" },
            { "floatNet.node[97].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[97].params", "{1.484694, }" },
            { "floatNet.node[98].inputs", "{86, 68, 25, 51, 75, 11, }" },
            { "floatNet.node[98].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[98].params", "{0.000000, }" },
            { "floatNet.node[99].inputs", "{82, 21, 84, 30, 97, 35, }" },
            { "floatNet.node[99].op", "ML_FOP_1xN_POLYNOMIAL" },
            { "floatNet.node[99].params", "{3208.736572, 0.858177, 0.000000, 0.000000, }" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "50.657932" },
            { "guardRange", "87.259979" },
            { "input[0].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[0].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "FALSE" },
            { "input[0].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[10].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[10].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[10].radius", "157.201385" },
            { "input[10].useTangent", "FALSE" },
            { "input[10].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[11].crowdType", "NEURAL_CROWD_CORES" },
            { "input[11].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[11].radius", "157.342880" },
            { "input[11].useTangent", "FALSE" },
            { "input[11].valueType", "NEURAL_VALUE_CROWD" },
            { "input[11].waveType", "NEURAL_WAVE_UNIT_SINE" },
            { "input[12].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[12].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[12].frequency", "0.000000" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "FALSE" },
            { "input[12].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[12].waveType", "NEURAL_WAVE_SINE" },
            { "input[13].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[13].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[13].frequency", "0.000000" },
            { "input[13].radius", "0.000000" },
            { "input[13].useTangent", "TRUE" },
            { "input[13].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[13].waveType", "NEURAL_WAVE_SINE" },
            { "input[14].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[14].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[14].frequency", "0.000000" },
            { "input[14].radius", "164.939926" },
            { "input[14].useTangent", "TRUE" },
            { "input[14].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[14].waveType", "NEURAL_WAVE_FMOD" },
            { "input[15].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[15].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[15].radius", "156.087997" },
            { "input[15].useTangent", "TRUE" },
            { "input[15].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[16].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[16].forceType", "NEURAL_FORCE_EDGES" },
            { "input[16].frequency", "0.000000" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "TRUE" },
            { "input[16].valueType", "NEURAL_VALUE_CROWD" },
            { "input[17].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[17].forceType", "NEURAL_FORCE_CENTER" },
            { "input[17].frequency", "4093.644043" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "TRUE" },
            { "input[17].valueType", "NEURAL_VALUE_FORCE" },
            { "input[17].waveType", "NEURAL_WAVE_FMOD" },
            { "input[18].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[18].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[18].frequency", "0.000000" },
            { "input[18].radius", "147.504044" },
            { "input[18].useTangent", "TRUE" },
            { "input[18].valueType", "NEURAL_VALUE_MOBID" },
            { "input[18].waveType", "NEURAL_WAVE_FMOD" },
            { "input[19].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[19].forceType", "NEURAL_FORCE_ZERO" },
            { "input[19].radius", "-1.000000" },
            { "input[19].useTangent", "FALSE" },
            { "input[19].valueType", "NEURAL_VALUE_FORCE" },
            { "input[1].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[1].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[1].radius", "301.750824" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_CROWD" },
            { "input[20].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[20].forceType", "NEURAL_FORCE_HEADING" },
            { "input[20].radius", "0.000000" },
            { "input[20].useTangent", "FALSE" },
            { "input[20].valueType", "NEURAL_VALUE_CROWD" },
            { "input[20].waveType", "NEURAL_WAVE_FMOD" },
            { "input[21].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[21].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[21].frequency", "0.000000" },
            { "input[21].radius", "-1.000000" },
            { "input[21].useTangent", "FALSE" },
            { "input[21].valueType", "NEURAL_VALUE_FORCE" },
            { "input[22].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[22].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[22].radius", "6.802381" },
            { "input[22].useTangent", "FALSE" },
            { "input[22].valueType", "NEURAL_VALUE_TICK" },
            { "input[22].waveType", "NEURAL_WAVE_NONE" },
            { "input[23].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[23].forceType", "NEURAL_FORCE_EDGES" },
            { "input[23].frequency", "0.000000" },
            { "input[23].radius", "-1.000000" },
            { "input[23].useTangent", "TRUE" },
            { "input[23].valueType", "NEURAL_VALUE_FORCE" },
            { "input[23].waveType", "NEURAL_WAVE_NONE" },
            { "input[24].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[24].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[24].frequency", "0.000000" },
            { "input[24].radius", "1086.721436" },
            { "input[24].useTangent", "TRUE" },
            { "input[24].valueType", "NEURAL_VALUE_CROWD" },
            { "input[2].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[2].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[2].radius", "148.709793" },
            { "input[2].useTangent", "FALSE" },
            { "input[2].valueType", "NEURAL_VALUE_FORCE" },
            { "input[3].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[3].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[3].radius", "-1.000000" },
            { "input[3].useTangent", "TRUE" },
            { "input[3].valueType", "NEURAL_VALUE_CROWD" },
            { "input[4].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[4].forceType", "NEURAL_FORCE_EDGES" },
            { "input[4].frequency", "5622.903809" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "TRUE" },
            { "input[4].valueType", "NEURAL_VALUE_CROWD" },
            { "input[5].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[5].forceType", "NEURAL_FORCE_BASE" },
            { "input[5].frequency", "0.000000" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "TRUE" },
            { "input[5].valueType", "NEURAL_VALUE_FORCE" },
            { "input[5].waveType", "NEURAL_WAVE_SINE" },
            { "input[6].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[6].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[6].frequency", "0.000000" },
            { "input[6].radius", "-0.950000" },
            { "input[6].useTangent", "TRUE" },
            { "input[6].valueType", "NEURAL_VALUE_CROWD" },
            { "input[6].waveType", "NEURAL_WAVE_NONE" },
            { "input[7].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[7].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[7].radius", "4.193549" },
            { "input[7].useTangent", "FALSE" },
            { "input[7].valueType", "NEURAL_VALUE_CROWD" },
            { "input[8].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[8].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[8].frequency", "0.000000" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "FALSE" },
            { "input[8].valueType", "NEURAL_VALUE_ZERO" },
            { "input[8].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[9].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[9].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[9].radius", "154.979477" },
            { "input[9].useTangent", "FALSE" },
            { "input[9].valueType", "NEURAL_VALUE_FORCE" },
            { "output[100].forceType", "NEURAL_FORCE_COHERE" },
            { "output[100].radius", "529.224609" },
            { "output[100].useTangent", "FALSE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[101].radius", "1351.212036" },
            { "output[101].useTangent", "TRUE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_CORES" },
            { "output[102].radius", "167.162323" },
            { "output[102].useTangent", "FALSE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "TRUE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_HEADING" },
            { "output[104].radius", "1729.684937" },
            { "output[104].useTangent", "FALSE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[105].radius", "278.047913" },
            { "output[105].useTangent", "TRUE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_EDGES" },
            { "output[106].radius", "2541.187500" },
            { "output[106].useTangent", "TRUE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "output[107].radius", "-1.000000" },
            { "output[107].useTangent", "FALSE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_EDGES" },
            { "output[108].radius", "-1.000000" },
            { "output[108].useTangent", "FALSE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[109].radius", "1411.446289" },
            { "output[109].useTangent", "FALSE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_CORES" },
            { "output[110].radius", "2727.242432" },
            { "output[110].useTangent", "FALSE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[111].radius", "-1.000000" },
            { "output[111].useTangent", "FALSE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "output[112].radius", "312.907501" },
            { "output[112].useTangent", "TRUE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_HEADING" },
            { "output[113].radius", "-1.000000" },
            { "output[113].useTangent", "TRUE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[114].radius", "322.285767" },
            { "output[114].useTangent", "TRUE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_COHERE" },
            { "output[115].radius", "-1.000000" },
            { "output[115].useTangent", "FALSE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_EDGES" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "TRUE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_HEADING" },
            { "output[117].radius", "850.924561" },
            { "output[117].useTangent", "FALSE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[118].radius", "298.878693" },
            { "output[118].useTangent", "FALSE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[119].radius", "3000.000000" },
            { "output[119].useTangent", "FALSE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[120].radius", "2963.549072" },
            { "output[120].useTangent", "TRUE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "FALSE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[122].radius", "1693.586426" },
            { "output[122].useTangent", "TRUE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_COHERE" },
            { "output[123].radius", "1030.571045" },
            { "output[123].useTangent", "TRUE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_HEADING" },
            { "output[124].radius", "-1.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "FALSE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1202.581787" },
            { "startingMinRadius", "470.378967" },
        };
        NeuralConfigValue configs9[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "132.841232" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "258.509430" },
            { "evadeStrictDistance", "101.621750" },
            { "evadeUseStrictDistance", "TRUE" },
            { "floatNet.node[100].inputs", "{0, 65, 48, 37, }" },
            { "floatNet.node[100].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[100].params", "{1.050000, 3.157942, 0.290901, 0.000000, 154.863861, 0.000000, 0.000000, }" },
            { "floatNet.node[101].inputs", "{62, 8, 0, 62, }" },
            { "floatNet.node[101].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[101].params", "{1.592908, 0.000000, 0.000000, }" },
            { "floatNet.node[102].inputs", "{24, 42, 101, 0, 86, 6, 58, }" },
            { "floatNet.node[102].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_STEP" },
            { "floatNet.node[102].params", "{1.549154, 0.000000, 2.486770, 17069.486328, 2.520596, }" },
            { "floatNet.node[103].inputs", "{97, 10, 54, 34, 99, 102, }" },
            { "floatNet.node[103].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[103].params", "{2074.110107, 1577.410767, 30.000000, 0.513399, 2.559829, 1542.321899, 1.050000, }" },
            { "floatNet.node[104].inputs", "{57, }" },
            { "floatNet.node[104].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[104].params", "{1.551640, 147.082001, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[105].inputs", "{71, 29, }" },
            { "floatNet.node[105].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[105].params", "{0.950000, }" },
            { "floatNet.node[106].inputs", "{70, 19, }" },
            { "floatNet.node[106].op", "ML_FOP_1x3_ARC_COSINE" },
            { "floatNet.node[106].params", "{0.000000, }" },
            { "floatNet.node[107].inputs", "{44, 89, 24, 10, 41, 17, }" },
            { "floatNet.node[107].op", "ML_FOP_NxN_WEIGHTED_GEOMETRIC_MEAN" },
            { "floatNet.node[107].params", "{1.505585, 170.101196, 0.093286, 105.946144, 0.000000, }" },
            { "floatNet.node[108].inputs", "{66, 71, }" },
            { "floatNet.node[108].op", "ML_FOP_2x0_SQUARE_SUM" },
            { "floatNet.node[108].params", "{0.027664, 0.465548, 0.102480, }" },
            { "floatNet.node[109].inputs", "{30, 52, 70, 103, 100, 103, 36, 86, }" },
            { "floatNet.node[109].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[109].params", "{2.584399, 0.000000, 2.038359, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[110].inputs", "{30, 93, }" },
            { "floatNet.node[110].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[110].params", "{3.075863, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[111].inputs", "{66, 95, 65, 23, 22, 46, }" },
            { "floatNet.node[111].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[111].params", "{0.900000, 0.000000, 0.880088, 0.000000, 1.603846, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[112].inputs", "{15, 52, }" },
            { "floatNet.node[112].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[112].params", "{1663.555542, 0.105418, 0.000000, }" },
            { "floatNet.node[113].inputs", "{41, 22, 33, 27, 73, }" },
            { "floatNet.node[113].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[113].params", "{1.000000, }" },
            { "floatNet.node[114].inputs", "{106, 14, 73, }" },
            { "floatNet.node[114].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[114].params", "{0.000000, }" },
            { "floatNet.node[115].inputs", "{}" },
            { "floatNet.node[115].op", "ML_FOP_1x3_SQUARE" },
            { "floatNet.node[115].params", "{}" },
            { "floatNet.node[116].inputs", "{}" },
            { "floatNet.node[116].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[116].params", "{}" },
            { "floatNet.node[117].inputs", "{35, 14, 84, 53, 1, 94, 101, }" },
            { "floatNet.node[117].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[117].params", "{0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[118].inputs", "{1, 70, 76, 97, 37, 103, 90, }" },
            { "floatNet.node[118].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[118].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[119].inputs", "{49, 31, 2, 69, }" },
            { "floatNet.node[119].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[119].params", "{}" },
            { "floatNet.node[120].inputs", "{113, 108, }" },
            { "floatNet.node[120].op", "ML_FOP_2x0_CEIL_STEP" },
            { "floatNet.node[120].params", "{0.555243, 0.000000, 986.982422, 0.497635, 1.308342, 28.744946, }" },
            { "floatNet.node[121].inputs", "{31, 91, 42, 109, }" },
            { "floatNet.node[121].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[121].params", "{1.000000, }" },
            { "floatNet.node[122].inputs", "{10, 44, 118, }" },
            { "floatNet.node[122].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[122].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[123].inputs", "{106, 29, 97, 37, 100, 109, }" },
            { "floatNet.node[123].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[123].params", "{}" },
            { "floatNet.node[124].inputs", "{63, 8, 34, 4, 108, }" },
            { "floatNet.node[124].op", "ML_FOP_1x1_LINEAR_DOWN" },
            { "floatNet.node[124].params", "{0.452424, 0.000000, 0.000000, 9.500000, 2914.313232, 963.145081, 0.000000, }" },
            { "floatNet.node[25].inputs", "{}" },
            { "floatNet.node[25].op", "ML_FOP_1x1_FLOOR_STEP" },
            { "floatNet.node[25].params", "{1.050000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 2.270812, }" },
            { "floatNet.node[26].inputs", "{20, }" },
            { "floatNet.node[26].op", "ML_FOP_NxN_SCALED_DIV_SUM" },
            { "floatNet.node[26].params", "{0.987076, }" },
            { "floatNet.node[27].inputs", "{17, 15, 9, }" },
            { "floatNet.node[27].op", "ML_FOP_1x1_SUM" },
            { "floatNet.node[27].params", "{0.000000, 0.950000, 0.000000, 0.189884, 20.911724, 2.483805, 0.000000, }" },
            { "floatNet.node[28].inputs", "{18, 16, 10, 4, 4, 17, }" },
            { "floatNet.node[28].op", "ML_FOP_NxN_WEIGHTED_ARITHMETIC_MEAN" },
            { "floatNet.node[28].params", "{0.902500, 0.574726, 3.771181, 0.000000, 0.000000, 1709.344727, }" },
            { "floatNet.node[29].inputs", "{18, 4, 8, 12, 21, 23, }" },
            { "floatNet.node[29].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[29].params", "{0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[30].inputs", "{11, }" },
            { "floatNet.node[30].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[30].params", "{898.907593, 1.703727, 10.000000, 942.655945, 0.000000, 1993.709961, 0.000000, }" },
            { "floatNet.node[31].inputs", "{29, 5, 19, 23, 23, 13, 8, 19, }" },
            { "floatNet.node[31].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[31].params", "{}" },
            { "floatNet.node[32].inputs", "{9, }" },
            { "floatNet.node[32].op", "ML_FOP_2x0_PRODUCT" },
            { "floatNet.node[32].params", "{165.942139, 0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[33].inputs", "{20, 12, 27, 27, 0, 28, 20, 21, }" },
            { "floatNet.node[33].op", "ML_FOP_1x3_ARC_SINE" },
            { "floatNet.node[33].params", "{24.350241, 11353.805664, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[34].inputs", "{1, 2, 33, }" },
            { "floatNet.node[34].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_DOWN" },
            { "floatNet.node[34].params", "{0.000000, 143.050323, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[35].inputs", "{11, 32, 7, 27, 13, 14, 25, 26, }" },
            { "floatNet.node[35].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[35].params", "{0.000000, 0.000000, 0.950000, }" },
            { "floatNet.node[36].inputs", "{}" },
            { "floatNet.node[36].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[36].params", "{0.000000, 147.512619, 977.566101, 1305.902954, }" },
            { "floatNet.node[37].inputs", "{}" },
            { "floatNet.node[37].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[37].params", "{146.638824, }" },
            { "floatNet.node[38].inputs", "{18, 37, 18, 1, 11, 28, }" },
            { "floatNet.node[38].op", "ML_FOP_1x1_LINEAR_COMBINATION" },
            { "floatNet.node[38].params", "{1.050000, 1.000000, }" },
            { "floatNet.node[39].inputs", "{38, 27, }" },
            { "floatNet.node[39].op", "ML_FOP_NxN_POW_SUM" },
            { "floatNet.node[39].params", "{0.898238, 1.000000, 905.574646, 0.864338, 3000.000000, 0.466304, 0.095528, }" },
            { "floatNet.node[40].inputs", "{17, 20, 35, }" },
            { "floatNet.node[40].op", "ML_FOP_1x3_EXP" },
            { "floatNet.node[40].params", "{2393.776367, 257.773529, 0.477213, 0.000000, 0.000000, }" },
            { "floatNet.node[41].inputs", "{36, 2, 12, 36, 39, 36, }" },
            { "floatNet.node[41].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[41].params", "{0.028893, 244.829254, 0.950000, }" },
            { "floatNet.node[42].inputs", "{5, 34, 4, 4, 15, }" },
            { "floatNet.node[42].op", "ML_FOP_1x0_SQRT" },
            { "floatNet.node[42].params", "{2.879699, 0.096651, 24.953848, 1240.511597, 0.000000, }" },
            { "floatNet.node[43].inputs", "{5, 36, }" },
            { "floatNet.node[43].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_UP" },
            { "floatNet.node[43].params", "{247.018143, }" },
            { "floatNet.node[44].inputs", "{24, 15, 31, 20, 0, 33, }" },
            { "floatNet.node[44].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[44].params", "{148.704834, 28.146860, 0.000000, 0.000000, }" },
            { "floatNet.node[45].inputs", "{38, 34, 37, 0, 17, 14, }" },
            { "floatNet.node[45].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[45].params", "{0.000000, }" },
            { "floatNet.node[46].inputs", "{38, 25, 35, 4, 26, 13, 44, }" },
            { "floatNet.node[46].op", "ML_FOP_1x2_CLAMP" },
            { "floatNet.node[46].params", "{}" },
            { "floatNet.node[47].inputs", "{}" },
            { "floatNet.node[47].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[47].params", "{}" },
            { "floatNet.node[48].inputs", "{47, 14, }" },
            { "floatNet.node[48].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_DOWN" },
            { "floatNet.node[48].params", "{0.000000, 251.615433, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[49].inputs", "{4, }" },
            { "floatNet.node[49].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[49].params", "{1.000000, 0.182847, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[50].inputs", "{27, 16, 35, 0, 49, }" },
            { "floatNet.node[50].op", "ML_FOP_1x1_FLOOR_STEP" },
            { "floatNet.node[50].params", "{1.000000, 0.000000, 147.118774, 255.701035, }" },
            { "floatNet.node[51].inputs", "{38, 46, 45, 24, 25, 50, }" },
            { "floatNet.node[51].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[51].params", "{0.000000, 0.000000, 0.000000, 144.050110, 1092.813843, 0.972787, 0.000000, }" },
            { "floatNet.node[52].inputs", "{19, 27, 6, }" },
            { "floatNet.node[52].op", "ML_FOP_NxN_WEIGHTED_ARITHMETIC_MEAN" },
            { "floatNet.node[52].params", "{2.569370, 2850.000000, 1538.814819, 152.121124, 0.107637, 8.878457, 1.100000, }" },
            { "floatNet.node[53].inputs", "{28, 6, 24, 13, 25, }" },
            { "floatNet.node[53].op", "ML_FOP_Nx0_PRODUCT" },
            { "floatNet.node[53].params", "{1.000000, 2950.105957, 1.023432, 1.000000, 19.237644, }" },
            { "floatNet.node[54].inputs", "{}" },
            { "floatNet.node[54].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[54].params", "{0.287147, 0.000000, }" },
            { "floatNet.node[55].inputs", "{34, 28, 0, 16, 23, 48, }" },
            { "floatNet.node[55].op", "ML_FOP_1x1_SUM" },
            { "floatNet.node[55].params", "{1.000000, 1.487723, 0.000000, 0.568502, 0.000000, 0.000000, }" },
            { "floatNet.node[56].inputs", "{}" },
            { "floatNet.node[56].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[56].params", "{1009.547424, 1.000000, 0.115097, }" },
            { "floatNet.node[57].inputs", "{43, 45, 2, 11, 52, }" },
            { "floatNet.node[57].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[57].params", "{}" },
            { "floatNet.node[58].inputs", "{37, 32, 15, }" },
            { "floatNet.node[58].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[58].params", "{0.093223, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.210516, }" },
            { "floatNet.node[59].inputs", "{0, 14, 12, 23, 21, 36, 18, }" },
            { "floatNet.node[59].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[59].params", "{0.916065, 0.000000, }" },
            { "floatNet.node[60].inputs", "{57, 6, 44, }" },
            { "floatNet.node[60].op", "ML_FOP_1x0_NEGATE" },
            { "floatNet.node[60].params", "{954.130859, }" },
            { "floatNet.node[61].inputs", "{37, 10, 18, 47, 40, 53, }" },
            { "floatNet.node[61].op", "ML_FOP_2x0_POW" },
            { "floatNet.node[61].params", "{2444.366943, 0.000000, 0.000000, }" },
            { "floatNet.node[62].inputs", "{45, 30, 9, 20, 24, 61, }" },
            { "floatNet.node[62].op", "ML_FOP_NxN_ANCHORED_GEOMETRIC_MEAN" },
            { "floatNet.node[62].params", "{0.000000, 1.561505, 2.724704, 0.731341, 1.000000, 0.000000, }" },
            { "floatNet.node[63].inputs", "{11, }" },
            { "floatNet.node[63].op", "ML_FOP_1x2_SEEDED_RANDOM" },
            { "floatNet.node[63].params", "{2812.595215, 1262.952148, 0.486220, 732.485352, }" },
            { "floatNet.node[64].inputs", "{58, 12, 47, 11, 19, 19, }" },
            { "floatNet.node[64].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_LERP" },
            { "floatNet.node[64].params", "{0.117956, 1.000000, 144.099915, 5.269822, 294.487152, 5890.657227, 0.000000, }" },
            { "floatNet.node[65].inputs", "{30, 33, 63, 63, 13, 28, 44, }" },
            { "floatNet.node[65].op", "ML_FOP_1x0_SIN" },
            { "floatNet.node[65].params", "{30.000000, }" },
            { "floatNet.node[66].inputs", "{}" },
            { "floatNet.node[66].op", "ML_FOP_1x1_GTE" },
            { "floatNet.node[66].params", "{0.000000, 0.000000, 30.000000, }" },
            { "floatNet.node[67].inputs", "{14, 44, 37, 36, 36, 44, 60, }" },
            { "floatNet.node[67].op", "ML_FOP_1x1_LINEAR_COMBINATION" },
            { "floatNet.node[67].params", "{0.000000, 1.900870, 0.000000, 1.000000, 1.000000, }" },
            { "floatNet.node[68].inputs", "{3, 14, 60, 18, 41, 63, 6, }" },
            { "floatNet.node[68].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[68].params", "{2960.583740, }" },
            { "floatNet.node[69].inputs", "{}" },
            { "floatNet.node[69].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[69].params", "{918.871704, 1668.533569, 0.000000, 0.000000, 0.519156, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[70].inputs", "{}" },
            { "floatNet.node[70].op", "ML_FOP_1x3_SQRT" },
            { "floatNet.node[70].params", "{2878.717773, 0.000000, 1.000000, }" },
            { "floatNet.node[71].inputs", "{}" },
            { "floatNet.node[71].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[71].params", "{5.280350, 247.602066, 1.050000, 0.000000, 0.000000, 1.595623, }" },
            { "floatNet.node[72].inputs", "{60, 44, 27, }" },
            { "floatNet.node[72].op", "ML_FOP_1x0_INVERSE" },
            { "floatNet.node[72].params", "{}" },
            { "floatNet.node[73].inputs", "{6, 4, 13, 64, }" },
            { "floatNet.node[73].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[73].params", "{295.617401, 1025.903687, }" },
            { "floatNet.node[74].inputs", "{}" },
            { "floatNet.node[74].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[74].params", "{}" },
            { "floatNet.node[75].inputs", "{}" },
            { "floatNet.node[75].op", "ML_FOP_NxN_POW_SUM" },
            { "floatNet.node[75].params", "{0.128921, 0.718586, 24.098963, 148.758789, 0.000000, 1904.422607, }" },
            { "floatNet.node[76].inputs", "{13, 13, 18, 67, }" },
            { "floatNet.node[76].op", "ML_FOP_NxN_LINEAR_COMBINATION" },
            { "floatNet.node[76].params", "{396.382080, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[77].inputs", "{71, }" },
            { "floatNet.node[77].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[77].params", "{1.000000, 0.000000, 0.000000, 0.000000, 4949.790039, 154.067734, 0.508879, }" },
            { "floatNet.node[78].inputs", "{}" },
            { "floatNet.node[78].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[78].params", "{}" },
            { "floatNet.node[79].inputs", "{54, 4, 23, 37, }" },
            { "floatNet.node[79].op", "ML_FOP_1x2_SEEDED_RANDOM" },
            { "floatNet.node[79].params", "{0.000000, 0.893583, 0.100938, 0.000000, 0.210219, 0.000000, }" },
            { "floatNet.node[80].inputs", "{20, 72, 35, 40, 37, 64, 38, 1, }" },
            { "floatNet.node[80].op", "ML_FOP_Nx0_ACTIVATE_GAUSSIAN_UP" },
            { "floatNet.node[80].params", "{3.804961, 0.000000, 0.995469, 0.000000, 1.687327, }" },
            { "floatNet.node[81].inputs", "{13, 65, 55, 49, }" },
            { "floatNet.node[81].op", "ML_FOP_1x3_ARC_COSINE" },
            { "floatNet.node[81].params", "{0.000000, }" },
            { "floatNet.node[82].inputs", "{}" },
            { "floatNet.node[82].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[82].params", "{0.214584, }" },
            { "floatNet.node[83].inputs", "{18, 37, 58, 72, 59, 74, }" },
            { "floatNet.node[83].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[83].params", "{0.483201, 0.000000, 8.884048, 0.000000, 1.000000, }" },
            { "floatNet.node[84].inputs", "{66, 18, 44, 46, 46, 82, 56, }" },
            { "floatNet.node[84].op", "ML_FOP_NxN_ACTIVATE_POLYNOMIAL" },
            { "floatNet.node[84].params", "{0.000000, 0.950000, 0.183362, }" },
            { "floatNet.node[85].inputs", "{}" },
            { "floatNet.node[85].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[85].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[86].inputs", "{48, 24, 56, 57, }" },
            { "floatNet.node[86].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[86].params", "{0.000000, 26.161259, 0.000000, 0.000000, 1.620799, }" },
            { "floatNet.node[87].inputs", "{10, 28, }" },
            { "floatNet.node[87].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[87].params", "{0.000000, }" },
            { "floatNet.node[88].inputs", "{57, 56, 65, 52, 75, 30, }" },
            { "floatNet.node[88].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[88].params", "{12.581761, 2.224421, 7.529765, 0.044859, }" },
            { "floatNet.node[89].inputs", "{80, 63, }" },
            { "floatNet.node[89].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[89].params", "{0.000000, }" },
            { "floatNet.node[90].inputs", "{82, 78, 21, 13, 66, 53, }" },
            { "floatNet.node[90].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[90].params", "{}" },
            { "floatNet.node[91].inputs", "{54, 64, 12, 69, 85, 79, 19, 90, }" },
            { "floatNet.node[91].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[91].params", "{}" },
            { "floatNet.node[92].inputs", "{}" },
            { "floatNet.node[92].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[92].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[93].inputs", "{80, 70, 34, 58, }" },
            { "floatNet.node[93].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[93].params", "{0.791874, 9.510728, 1.000000, 0.000000, 0.796567, 0.900000, 0.000000, 1.000000, }" },
            { "floatNet.node[94].inputs", "{40, 90, 77, }" },
            { "floatNet.node[94].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[94].params", "{5.410668, 1.007700, }" },
            { "floatNet.node[95].inputs", "{87, 94, 55, 22, 92, 21, }" },
            { "floatNet.node[95].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[95].params", "{0.867916, 2.559796, 0.950000, 0.000000, 0.000000, }" },
            { "floatNet.node[96].inputs", "{}" },
            { "floatNet.node[96].op", "ML_FOP_1x1_CEIL_STEP" },
            { "floatNet.node[96].params", "{2913.188721, 0.000000, 1.846820, 949.599121, }" },
            { "floatNet.node[97].inputs", "{52, }" },
            { "floatNet.node[97].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[97].params", "{1.484694, }" },
            { "floatNet.node[98].inputs", "{86, 68, 25, 51, 75, 11, }" },
            { "floatNet.node[98].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[98].params", "{0.000000, }" },
            { "floatNet.node[99].inputs", "{82, 21, 5, 30, 97, 35, }" },
            { "floatNet.node[99].op", "ML_FOP_1xN_POLYNOMIAL" },
            { "floatNet.node[99].params", "{3208.736572, 0.858177, 0.000000, 0.000000, }" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "25.235432" },
            { "guardRange", "87.259979" },
            { "input[0].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[0].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "FALSE" },
            { "input[0].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[10].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[10].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[10].radius", "157.201385" },
            { "input[10].useTangent", "FALSE" },
            { "input[10].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[11].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[11].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[11].radius", "157.342880" },
            { "input[11].useTangent", "FALSE" },
            { "input[11].valueType", "NEURAL_VALUE_CROWD" },
            { "input[11].waveType", "NEURAL_WAVE_UNIT_SINE" },
            { "input[12].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[12].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[12].frequency", "0.000000" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "TRUE" },
            { "input[12].valueType", "NEURAL_VALUE_FORCE" },
            { "input[12].waveType", "NEURAL_WAVE_SINE" },
            { "input[13].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[13].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[13].frequency", "0.000000" },
            { "input[13].radius", "0.000000" },
            { "input[13].useTangent", "TRUE" },
            { "input[13].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[13].waveType", "NEURAL_WAVE_SINE" },
            { "input[14].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[14].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[14].frequency", "0.000000" },
            { "input[14].radius", "164.939926" },
            { "input[14].useTangent", "FALSE" },
            { "input[14].valueType", "NEURAL_VALUE_FORCE" },
            { "input[14].waveType", "NEURAL_WAVE_FMOD" },
            { "input[15].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[15].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[15].radius", "156.087997" },
            { "input[15].useTangent", "FALSE" },
            { "input[15].valueType", "NEURAL_VALUE_FORCE" },
            { "input[16].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[16].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[16].frequency", "0.000000" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "TRUE" },
            { "input[16].valueType", "NEURAL_VALUE_CROWD" },
            { "input[17].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[17].forceType", "NEURAL_FORCE_CENTER" },
            { "input[17].frequency", "4093.644043" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "TRUE" },
            { "input[17].valueType", "NEURAL_VALUE_CROWD" },
            { "input[17].waveType", "NEURAL_WAVE_FMOD" },
            { "input[18].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[18].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[18].frequency", "0.000000" },
            { "input[18].radius", "147.504044" },
            { "input[18].useTangent", "TRUE" },
            { "input[18].valueType", "NEURAL_VALUE_FORCE" },
            { "input[18].waveType", "NEURAL_WAVE_FMOD" },
            { "input[19].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[19].forceType", "NEURAL_FORCE_ZERO" },
            { "input[19].radius", "-1.000000" },
            { "input[19].useTangent", "TRUE" },
            { "input[19].valueType", "NEURAL_VALUE_FORCE" },
            { "input[1].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[1].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[1].radius", "301.750824" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_CROWD" },
            { "input[20].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[20].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[20].radius", "0.000000" },
            { "input[20].useTangent", "TRUE" },
            { "input[20].valueType", "NEURAL_VALUE_CROWD" },
            { "input[20].waveType", "NEURAL_WAVE_FMOD" },
            { "input[21].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[21].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[21].frequency", "0.000000" },
            { "input[21].radius", "-1.000000" },
            { "input[21].useTangent", "TRUE" },
            { "input[21].valueType", "NEURAL_VALUE_FORCE" },
            { "input[22].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[22].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[22].radius", "6.802381" },
            { "input[22].useTangent", "FALSE" },
            { "input[22].valueType", "NEURAL_VALUE_CROWD" },
            { "input[22].waveType", "NEURAL_WAVE_NONE" },
            { "input[23].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[23].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[23].frequency", "0.000000" },
            { "input[23].radius", "-1.000000" },
            { "input[23].useTangent", "TRUE" },
            { "input[23].valueType", "NEURAL_VALUE_FORCE" },
            { "input[23].waveType", "NEURAL_WAVE_NONE" },
            { "input[24].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[24].forceType", "NEURAL_FORCE_HEADING" },
            { "input[24].frequency", "0.000000" },
            { "input[24].radius", "1086.721436" },
            { "input[24].useTangent", "FALSE" },
            { "input[24].valueType", "NEURAL_VALUE_FORCE" },
            { "input[2].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[2].forceType", "NEURAL_FORCE_CENTER" },
            { "input[2].radius", "148.709793" },
            { "input[2].useTangent", "FALSE" },
            { "input[2].valueType", "NEURAL_VALUE_FORCE" },
            { "input[3].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[3].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[3].radius", "-1.000000" },
            { "input[3].useTangent", "TRUE" },
            { "input[3].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[4].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[4].forceType", "NEURAL_FORCE_EDGES" },
            { "input[4].frequency", "5622.903809" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "TRUE" },
            { "input[4].valueType", "NEURAL_VALUE_CROWD" },
            { "input[5].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[5].forceType", "NEURAL_FORCE_BASE" },
            { "input[5].frequency", "0.000000" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "FALSE" },
            { "input[5].valueType", "NEURAL_VALUE_FORCE" },
            { "input[5].waveType", "NEURAL_WAVE_SINE" },
            { "input[6].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[6].forceType", "NEURAL_FORCE_HEADING" },
            { "input[6].frequency", "0.000000" },
            { "input[6].radius", "-0.950000" },
            { "input[6].useTangent", "FALSE" },
            { "input[6].valueType", "NEURAL_VALUE_CROWD" },
            { "input[6].waveType", "NEURAL_WAVE_NONE" },
            { "input[7].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[7].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[7].radius", "4.193549" },
            { "input[7].useTangent", "TRUE" },
            { "input[7].valueType", "NEURAL_VALUE_CROWD" },
            { "input[8].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[8].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[8].frequency", "0.000000" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "FALSE" },
            { "input[8].valueType", "NEURAL_VALUE_ZERO" },
            { "input[8].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[9].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[9].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[9].radius", "154.979477" },
            { "input[9].useTangent", "FALSE" },
            { "input[9].valueType", "NEURAL_VALUE_CROWD" },
            { "output[100].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[100].radius", "529.224609" },
            { "output[100].useTangent", "FALSE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_COHERE" },
            { "output[101].radius", "1351.212036" },
            { "output[101].useTangent", "FALSE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[102].radius", "167.162323" },
            { "output[102].useTangent", "FALSE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_HEADING" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "TRUE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_COHERE" },
            { "output[104].radius", "1729.684937" },
            { "output[104].useTangent", "FALSE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[105].radius", "278.047913" },
            { "output[105].useTangent", "TRUE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_EDGES" },
            { "output[106].radius", "2541.187500" },
            { "output[106].useTangent", "TRUE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[107].radius", "-1.000000" },
            { "output[107].useTangent", "FALSE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_EDGES" },
            { "output[108].radius", "-1.000000" },
            { "output[108].useTangent", "TRUE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_EDGES" },
            { "output[109].radius", "1411.446289" },
            { "output[109].useTangent", "FALSE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "output[110].radius", "2727.242432" },
            { "output[110].useTangent", "FALSE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[111].radius", "-1.000000" },
            { "output[111].useTangent", "TRUE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[112].radius", "312.907501" },
            { "output[112].useTangent", "FALSE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_HEADING" },
            { "output[113].radius", "-1.000000" },
            { "output[113].useTangent", "TRUE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[114].radius", "322.285767" },
            { "output[114].useTangent", "FALSE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[115].radius", "-1.000000" },
            { "output[115].useTangent", "TRUE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "FALSE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_CORES" },
            { "output[117].radius", "850.924561" },
            { "output[117].useTangent", "TRUE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[118].radius", "298.878693" },
            { "output[118].useTangent", "FALSE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_EDGES" },
            { "output[119].radius", "2850.000000" },
            { "output[119].useTangent", "TRUE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[120].radius", "2963.549072" },
            { "output[120].useTangent", "TRUE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "FALSE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[122].radius", "1693.586426" },
            { "output[122].useTangent", "FALSE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_HEADING" },
            { "output[123].radius", "1030.571045" },
            { "output[123].useTangent", "TRUE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_BASE" },
            { "output[124].radius", "-1.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "FALSE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1065.707031" },
            { "startingMinRadius", "495.132202" },
        };
        NeuralConfigValue configs10[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "132.841232" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "285.006592" },
            { "evadeStrictDistance", "132.424179" },
            { "evadeUseStrictDistance", "TRUE" },
            { "floatNet.node[100].inputs", "{0, 65, 48, }" },
            { "floatNet.node[100].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[100].params", "{0.997500, 3.157942, 0.290901, 0.000000, 154.863861, 0.000000, 0.000000, }" },
            { "floatNet.node[101].inputs", "{62, 8, 17, 62, }" },
            { "floatNet.node[101].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[101].params", "{1.592908, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[102].inputs", "{24, 42, 101, 0, 86, 6, 58, }" },
            { "floatNet.node[102].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_STEP" },
            { "floatNet.node[102].params", "{1.549154, 0.000000, 2.486770, 17069.486328, 2.520596, }" },
            { "floatNet.node[103].inputs", "{97, 10, 89, 34, 54, }" },
            { "floatNet.node[103].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[103].params", "{2223.369141, 1577.410767, 30.000000, 0.513399, 2.559829, 1542.321899, 1.050000, }" },
            { "floatNet.node[104].inputs", "{57, 67, }" },
            { "floatNet.node[104].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[104].params", "{0.032978, 147.082001, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[105].inputs", "{71, 29, 32, 9, }" },
            { "floatNet.node[105].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[105].params", "{0.950000, }" },
            { "floatNet.node[106].inputs", "{70, 19, 63, }" },
            { "floatNet.node[106].op", "ML_FOP_1x3_ARC_COSINE" },
            { "floatNet.node[106].params", "{0.000000, }" },
            { "floatNet.node[107].inputs", "{44, 61, 30, 10, 41, 17, }" },
            { "floatNet.node[107].op", "ML_FOP_NxN_WEIGHTED_GEOMETRIC_MEAN" },
            { "floatNet.node[107].params", "{1.505585, 1191.031982, 0.093286, 116.540764, 0.000000, }" },
            { "floatNet.node[108].inputs", "{66, 71, }" },
            { "floatNet.node[108].op", "ML_FOP_2x0_SQUARE_SUM" },
            { "floatNet.node[108].params", "{0.027664, 0.465548, 0.102480, 0.000000, }" },
            { "floatNet.node[109].inputs", "{60, 9, 6, 103, 96, 100, 52, 74, }" },
            { "floatNet.node[109].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[109].params", "{0.000000, 2.584399, 0.000000, 0.000000, 0.000000, 0.000000, 1056.567627, 0.000000, }" },
            { "floatNet.node[110].inputs", "{}" },
            { "floatNet.node[110].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[110].params", "{0.000000, 0.000000, 14.929089, 1.000000, 3.075863, }" },
            { "floatNet.node[111].inputs", "{65, 66, 46, 95, 23, 22, }" },
            { "floatNet.node[111].op", "ML_FOP_1x1_QUADRATIC_DOWN" },
            { "floatNet.node[111].params", "{1.000000, 0.900000, 1.398045, 1.603846, 0.000000, 0.000000, 1018.451843, }" },
            { "floatNet.node[112].inputs", "{2, 87, 75, 107, }" },
            { "floatNet.node[112].op", "ML_FOP_1x4_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[112].params", "{1520.729370, 0.110689, 0.000000, 0.000000, }" },
            { "floatNet.node[113].inputs", "{103, 22, 33, 27, 100, 90, 30, 66, }" },
            { "floatNet.node[113].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[113].params", "{1.000000, 0.000000, 1.482340, }" },
            { "floatNet.node[114].inputs", "{106, 14, 73, 91, 43, 40, 91, }" },
            { "floatNet.node[114].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[114].params", "{0.000000, }" },
            { "floatNet.node[115].inputs", "{21, }" },
            { "floatNet.node[115].op", "ML_FOP_NxN_POW_SUM" },
            { "floatNet.node[115].params", "{0.000000, }" },
            { "floatNet.node[116].inputs", "{}" },
            { "floatNet.node[116].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[116].params", "{0.000000, }" },
            { "floatNet.node[117].inputs", "{113, 11, 84, 53, 94, 94, 91, 38, }" },
            { "floatNet.node[117].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[117].params", "{0.000000, }" },
            { "floatNet.node[118].inputs", "{1, 70, 76, }" },
            { "floatNet.node[118].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[118].params", "{154.593857, 0.000000, 0.013984, 0.000000, 0.000000, 0.000000, 1.151209, }" },
            { "floatNet.node[119].inputs", "{49, 31, 2, }" },
            { "floatNet.node[119].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_UP" },
            { "floatNet.node[119].params", "{}" },
            { "floatNet.node[120].inputs", "{113, 108, }" },
            { "floatNet.node[120].op", "ML_FOP_2x0_CEIL_STEP" },
            { "floatNet.node[120].params", "{0.555243, 0.000000, 1036.331543, 0.497635, 1.308342, 1.000000, }" },
            { "floatNet.node[121].inputs", "{31, 91, 42, 109, }" },
            { "floatNet.node[121].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[121].params", "{}" },
            { "floatNet.node[122].inputs", "{10, 44, 118, }" },
            { "floatNet.node[122].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[122].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[123].inputs", "{37, 29, 23, 100, 106, 42, 87, }" },
            { "floatNet.node[123].op", "ML_FOP_1x0_SEEDED_RANDOM_UNIT" },
            { "floatNet.node[123].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[124].inputs", "{4, 53, 65, 5, }" },
            { "floatNet.node[124].op", "ML_FOP_Nx0_ACTIVATE_LN_UP" },
            { "floatNet.node[124].params", "{1.000000, 1059.459595, 0.000000, 6.758352, 3909.920654, }" },
            { "floatNet.node[25].inputs", "{}" },
            { "floatNet.node[25].op", "ML_FOP_1x1_FLOOR_STEP" },
            { "floatNet.node[25].params", "{1023.721008, 0.000000, 0.000000, 0.000000, 0.000000, 1883.000732, 0.000000, 1.000000, }" },
            { "floatNet.node[26].inputs", "{20, 1, 19, 2, 10, 21, 10, }" },
            { "floatNet.node[26].op", "ML_FOP_Nx0_ACTIVATE_LN_UP" },
            { "floatNet.node[26].params", "{0.032162, 0.000000, }" },
            { "floatNet.node[27].inputs", "{12, }" },
            { "floatNet.node[27].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[27].params", "{0.180390, 0.000000, 0.950000, 1.008358, 20.911724, }" },
            { "floatNet.node[28].inputs", "{11, 13, }" },
            { "floatNet.node[28].op", "ML_FOP_1x3_EXP" },
            { "floatNet.node[28].params", "{3.582622, 2883.373047, 0.000000, 1.582438, 0.574726, 0.796462, 0.000000, }" },
            { "floatNet.node[29].inputs", "{1, 19, 8, 24, }" },
            { "floatNet.node[29].op", "ML_FOP_Nx0_ACTIVATE_LN_UP" },
            { "floatNet.node[29].params", "{1.000000, 147.068268, 0.000000, 0.000000, }" },
            { "floatNet.node[30].inputs", "{11, }" },
            { "floatNet.node[30].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[30].params", "{898.907593, 0.223819, 10.000000, 942.655945, 0.000000, 1993.709961, 0.000000, }" },
            { "floatNet.node[31].inputs", "{}" },
            { "floatNet.node[31].op", "ML_FOP_1x1_QUADRATIC_UP" },
            { "floatNet.node[31].params", "{}" },
            { "floatNet.node[32].inputs", "{9, }" },
            { "floatNet.node[32].op", "ML_FOP_2x0_PRODUCT" },
            { "floatNet.node[32].params", "{1089.765747, 0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[33].inputs", "{6, 12, 32, 27, 0, 7, 20, 21, }" },
            { "floatNet.node[33].op", "ML_FOP_1x3_ARC_SINE" },
            { "floatNet.node[33].params", "{24.350241, 11353.805664, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[34].inputs", "{5, }" },
            { "floatNet.node[34].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_DOWN" },
            { "floatNet.node[34].params", "{0.000000, 143.050323, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[35].inputs", "{}" },
            { "floatNet.node[35].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[35].params", "{0.000000, 0.000000, 0.950000, 0.000000, }" },
            { "floatNet.node[36].inputs", "{15, }" },
            { "floatNet.node[36].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_UP" },
            { "floatNet.node[36].params", "{0.000000, 147.512619, 1.000000, 0.000000, }" },
            { "floatNet.node[37].inputs", "{}" },
            { "floatNet.node[37].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[37].params", "{161.302704, 0.000000, }" },
            { "floatNet.node[38].inputs", "{35, 34, 28, 18, 25, 18, }" },
            { "floatNet.node[38].op", "ML_FOP_1x1_LINEAR_COMBINATION" },
            { "floatNet.node[38].params", "{1.050000, 1.000000, }" },
            { "floatNet.node[39].inputs", "{38, 27, }" },
            { "floatNet.node[39].op", "ML_FOP_NxN_POW_SUM" },
            { "floatNet.node[39].params", "{0.898238, 1.000000, 953.236450, 0.864338, 3000.000000, 0.423913, 0.095528, }" },
            { "floatNet.node[40].inputs", "{17, 20, 9, }" },
            { "floatNet.node[40].op", "ML_FOP_Nx0_ACTIVATE_LN_UP" },
            { "floatNet.node[40].params", "{2393.776367, 0.322733, 0.477213, 0.000000, 0.000000, 1.000000, }" },
            { "floatNet.node[41].inputs", "{36, 2, 12, 36, 39, 36, }" },
            { "floatNet.node[41].op", "ML_FOP_2x0_CEIL_STEP" },
            { "floatNet.node[41].params", "{0.028893, 244.829254, 0.950000, }" },
            { "floatNet.node[42].inputs", "{5, 34, 21, 4, 15, }" },
            { "floatNet.node[42].op", "ML_FOP_1x0_SQRT" },
            { "floatNet.node[42].params", "{2.879699, 0.096651, 24.953848, 1240.511597, 0.000000, }" },
            { "floatNet.node[43].inputs", "{42, 24, }" },
            { "floatNet.node[43].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[43].params", "{}" },
            { "floatNet.node[44].inputs", "{29, }" },
            { "floatNet.node[44].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[44].params", "{148.704834, 28.146860, 0.000000, 0.000000, }" },
            { "floatNet.node[45].inputs", "{38, 43, 37, 0, 17, }" },
            { "floatNet.node[45].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[45].params", "{0.000000, 0.000000, 0.000000, 973.086853, }" },
            { "floatNet.node[46].inputs", "{38, }" },
            { "floatNet.node[46].op", "ML_FOP_1x4_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[46].params", "{0.000000, }" },
            { "floatNet.node[47].inputs", "{42, }" },
            { "floatNet.node[47].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[47].params", "{}" },
            { "floatNet.node[48].inputs", "{47, 26, }" },
            { "floatNet.node[48].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_DOWN" },
            { "floatNet.node[48].params", "{0.000000, }" },
            { "floatNet.node[49].inputs", "{4, }" },
            { "floatNet.node[49].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[49].params", "{1.000000, }" },
            { "floatNet.node[50].inputs", "{27, 16, 35, 0, 49, }" },
            { "floatNet.node[50].op", "ML_FOP_1x1_FLOOR_STEP" },
            { "floatNet.node[50].params", "{1.000000, 0.000000, 147.118774, 255.701035, }" },
            { "floatNet.node[51].inputs", "{38, 33, 45, 24, 25, }" },
            { "floatNet.node[51].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[51].params", "{0.000000, 0.000000, 0.000000, 144.050110, 22.819412, 0.972787, 0.000000, 0.000000, }" },
            { "floatNet.node[52].inputs", "{16, 43, 8, 29, 29, }" },
            { "floatNet.node[52].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[52].params", "{8.878457, 2700.262939, 1384.933350, 1.100000, 4.094309, 1.000000, }" },
            { "floatNet.node[53].inputs", "{37, 6, 12, 13, }" },
            { "floatNet.node[53].op", "ML_FOP_NxN_ANCHORED_ARITHMETIC_MEAN" },
            { "floatNet.node[53].params", "{1.000000, 3000.000000, 1.023432, }" },
            { "floatNet.node[54].inputs", "{1, 48, 37, 19, 33, 44, 35, 15, }" },
            { "floatNet.node[54].op", "ML_FOP_1x1_POW" },
            { "floatNet.node[54].params", "{0.031934, 0.000000, }" },
            { "floatNet.node[55].inputs", "{44, 28, 0, 16, 23, 48, }" },
            { "floatNet.node[55].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_STEP" },
            { "floatNet.node[55].params", "{1.000000, 1.487723, 0.000000, 0.568502, 0.000000, 0.000000, }" },
            { "floatNet.node[56].inputs", "{0, }" },
            { "floatNet.node[56].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[56].params", "{1.000000, 1009.547424, }" },
            { "floatNet.node[57].inputs", "{36, }" },
            { "floatNet.node[57].op", "ML_FOP_3x0_CLAMP" },
            { "floatNet.node[57].params", "{}" },
            { "floatNet.node[58].inputs", "{0, 15, 16, 37, }" },
            { "floatNet.node[58].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[58].params", "{0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.210516, 0.093223, }" },
            { "floatNet.node[59].inputs", "{23, 21, 52, 0, 36, 12, }" },
            { "floatNet.node[59].op", "ML_FOP_NxN_SCALED_MIN" },
            { "floatNet.node[59].params", "{0.916065, 0.000000, }" },
            { "floatNet.node[60].inputs", "{57, 6, 44, }" },
            { "floatNet.node[60].op", "ML_FOP_1x0_NEGATE" },
            { "floatNet.node[60].params", "{1730.040283, }" },
            { "floatNet.node[61].inputs", "{16, 47, 6, 18, 53, 37, }" },
            { "floatNet.node[61].op", "ML_FOP_2x0_POW" },
            { "floatNet.node[61].params", "{2444.366943, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[62].inputs", "{45, 30, 9, 20, 24, 61, }" },
            { "floatNet.node[62].op", "ML_FOP_NxN_ANCHORED_GEOMETRIC_MEAN" },
            { "floatNet.node[62].params", "{0.000000, 1.561505, 2.724704, 0.731341, 1.000000, 0.000000, }" },
            { "floatNet.node[63].inputs", "{11, }" },
            { "floatNet.node[63].op", "ML_FOP_Nx0_ACTIVATE_DIV_SUM" },
            { "floatNet.node[63].params", "{2812.595215, 1262.952148, 0.585336, 732.485352, 163.016144, }" },
            { "floatNet.node[64].inputs", "{19, 19, 47, }" },
            { "floatNet.node[64].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_LERP" },
            { "floatNet.node[64].params", "{0.117956, 1.000000, 144.099915, 5.269822, 294.487152, 6479.723145, 0.000000, }" },
            { "floatNet.node[65].inputs", "{13, 48, 29, 33, 44, 63, 30, }" },
            { "floatNet.node[65].op", "ML_FOP_1x0_UNIT_SINE" },
            { "floatNet.node[65].params", "{30.000000, 0.000000, }" },
            { "floatNet.node[66].inputs", "{25, }" },
            { "floatNet.node[66].op", "ML_FOP_3x0_IF_GTEZ_ELSE" },
            { "floatNet.node[66].params", "{0.000000, 0.000000, 0.589762, 0.000000, 1898.097168, 0.000000, 0.000000, }" },
            { "floatNet.node[67].inputs", "{14, 44, 44, 36, 17, }" },
            { "floatNet.node[67].op", "ML_FOP_1x1_LINEAR_COMBINATION" },
            { "floatNet.node[67].params", "{0.000000, 0.937990, 0.000000, 1.000000, 1.000000, }" },
            { "floatNet.node[68].inputs", "{44, 6, 57, 56, 63, 41, 3, }" },
            { "floatNet.node[68].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[68].params", "{2960.583740, }" },
            { "floatNet.node[69].inputs", "{}" },
            { "floatNet.node[69].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[69].params", "{918.871704, 2691.370605, 0.000000, 0.000000, 0.519156, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[70].inputs", "{42, 1, 68, 0, 29, 45, 0, }" },
            { "floatNet.node[70].op", "ML_FOP_1x0_ARC_SINE" },
            { "floatNet.node[70].params", "{0.100199, 1.000000, }" },
            { "floatNet.node[71].inputs", "{}" },
            { "floatNet.node[71].op", "ML_FOP_3x2_IF_INSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[71].params", "{5.280350, 247.602066, 262.935852, 0.000000, 1.514447, 1.675404, }" },
            { "floatNet.node[72].inputs", "{60, 44, 27, }" },
            { "floatNet.node[72].op", "ML_FOP_1x2_OUTSIDE_RANGE" },
            { "floatNet.node[72].params", "{994.190613, 0.000000, }" },
            { "floatNet.node[73].inputs", "{62, 6, 64, 17, }" },
            { "floatNet.node[73].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[73].params", "{295.617401, }" },
            { "floatNet.node[74].inputs", "{5, 3, 19, 18, 3, 56, 7, 45, }" },
            { "floatNet.node[74].op", "ML_FOP_1x0_HYP_TANGENT" },
            { "floatNet.node[74].params", "{0.000000, }" },
            { "floatNet.node[75].inputs", "{}" },
            { "floatNet.node[75].op", "ML_FOP_NxN_POW_SUM" },
            { "floatNet.node[75].params", "{148.758789, 0.798429, 1904.422607, 0.000000, 24.098963, 0.000000, 0.135367, }" },
            { "floatNet.node[76].inputs", "{13, 67, 13, 54, }" },
            { "floatNet.node[76].op", "ML_FOP_NxN_LINEAR_COMBINATION" },
            { "floatNet.node[76].params", "{396.382080, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[77].inputs", "{25, }" },
            { "floatNet.node[77].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[77].params", "{0.950000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[78].inputs", "{67, }" },
            { "floatNet.node[78].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[78].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[79].inputs", "{54, 4, 23, 47, }" },
            { "floatNet.node[79].op", "ML_FOP_1x2_SEEDED_RANDOM" },
            { "floatNet.node[79].params", "{0.000000, 0.893583, 0.100938, 0.000000, 0.210219, 0.000000, 0.000000, }" },
            { "floatNet.node[80].inputs", "{38, 40, 35, 74, 64, 37, 48, }" },
            { "floatNet.node[80].op", "ML_FOP_Nx0_ACTIVATE_GAUSSIAN_UP" },
            { "floatNet.node[80].params", "{3.804961, 0.000000, 1.000000, 0.000000, 1.687327, }" },
            { "floatNet.node[81].inputs", "{59, 65, 55, 49, 3, 30, }" },
            { "floatNet.node[81].op", "ML_FOP_1x3_ARC_COSINE" },
            { "floatNet.node[81].params", "{0.000000, 0.000000, 0.000000, 0.000000, 660.309509, 1.000000, 1.050000, }" },
            { "floatNet.node[82].inputs", "{79, 2, 61, 3, 51, 15, }" },
            { "floatNet.node[82].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[82].params", "{0.214584, 0.000000, }" },
            { "floatNet.node[83].inputs", "{37, 32, 59, 37, 80, 18, }" },
            { "floatNet.node[83].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[83].params", "{2.021929, 0.000000, 8.884048, 0.000000, 0.000000, }" },
            { "floatNet.node[84].inputs", "{70, 8, 64, 54, 24, 73, }" },
            { "floatNet.node[84].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[84].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[85].inputs", "{46, 69, 67, 28, 33, 61, }" },
            { "floatNet.node[85].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[85].params", "{0.000000, 0.000000, 1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[86].inputs", "{57, 56, 48, 24, }" },
            { "floatNet.node[86].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[86].params", "{0.000000, 26.161259, 0.000000, -1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[87].inputs", "{16, 44, }" },
            { "floatNet.node[87].op", "ML_FOP_NxN_SCALED_DIV_SUM" },
            { "floatNet.node[87].params", "{}" },
            { "floatNet.node[88].inputs", "{2, 56, 65, 52, 36, 30, 35, }" },
            { "floatNet.node[88].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[88].params", "{1.000000, 2.725593, 7.529765, 0.044859, }" },
            { "floatNet.node[89].inputs", "{80, 63, 15, }" },
            { "floatNet.node[89].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[89].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[90].inputs", "{87, 85, 77, 74, }" },
            { "floatNet.node[90].op", "ML_FOP_2x0_PRODUCT" },
            { "floatNet.node[90].params", "{}" },
            { "floatNet.node[91].inputs", "{54, 64, 12, 69, 85, 79, 84, 90, }" },
            { "floatNet.node[91].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[91].params", "{0.000000, }" },
            { "floatNet.node[92].inputs", "{}" },
            { "floatNet.node[92].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[92].params", "{0.000000, 0.000000, 1.000000, }" },
            { "floatNet.node[93].inputs", "{80, 70, 34, 58, }" },
            { "floatNet.node[93].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[93].params", "{0.752280, 9.510728, }" },
            { "floatNet.node[94].inputs", "{73, }" },
            { "floatNet.node[94].op", "ML_FOP_1x1_FLOOR_STEP" },
            { "floatNet.node[94].params", "{5.410668, 1.007700, 0.000000, }" },
            { "floatNet.node[95].inputs", "{6, 38, 81, 71, 23, }" },
            { "floatNet.node[95].op", "ML_FOP_Nx0_SUM" },
            { "floatNet.node[95].params", "{0.000000, 2.559796, 0.950000, 0.867916, 0.000000, 290.402435, }" },
            { "floatNet.node[96].inputs", "{41, 0, 58, 33, }" },
            { "floatNet.node[96].op", "ML_FOP_1x1_CEIL_STEP" },
            { "floatNet.node[96].params", "{2913.188721, 1.474648, 1.846820, 0.000000, }" },
            { "floatNet.node[97].inputs", "{52, }" },
            { "floatNet.node[97].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[97].params", "{1.000000, }" },
            { "floatNet.node[98].inputs", "{23, 74, 86, 72, 86, 19, }" },
            { "floatNet.node[98].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[98].params", "{991.426697, }" },
            { "floatNet.node[99].inputs", "{21, 30, 35, 14, 82, 84, }" },
            { "floatNet.node[99].op", "ML_FOP_3x2_IF_INSIDE_RANGE_CONST_ELSE" },
            { "floatNet.node[99].params", "{3208.736572, 0.858177, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "53.190826" },
            { "guardRange", "87.259979" },
            { "input[0].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[0].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "FALSE" },
            { "input[0].valueType", "NEURAL_VALUE_CROWD" },
            { "input[10].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[10].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[10].radius", "157.201385" },
            { "input[10].useTangent", "FALSE" },
            { "input[10].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[11].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[11].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[11].radius", "157.342880" },
            { "input[11].useTangent", "TRUE" },
            { "input[11].valueType", "NEURAL_VALUE_CROWD" },
            { "input[11].waveType", "NEURAL_WAVE_UNIT_SINE" },
            { "input[12].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[12].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[12].frequency", "0.000000" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "FALSE" },
            { "input[12].valueType", "NEURAL_VALUE_ZERO" },
            { "input[12].waveType", "NEURAL_WAVE_SINE" },
            { "input[13].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[13].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[13].frequency", "0.000000" },
            { "input[13].radius", "0.000000" },
            { "input[13].useTangent", "TRUE" },
            { "input[13].valueType", "NEURAL_VALUE_CROWD" },
            { "input[13].waveType", "NEURAL_WAVE_SINE" },
            { "input[14].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[14].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[14].frequency", "0.000000" },
            { "input[14].radius", "164.939926" },
            { "input[14].useTangent", "FALSE" },
            { "input[14].valueType", "NEURAL_VALUE_FORCE" },
            { "input[14].waveType", "NEURAL_WAVE_FMOD" },
            { "input[15].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[15].forceType", "NEURAL_FORCE_CORNERS" },
            { "input[15].radius", "156.087997" },
            { "input[15].useTangent", "FALSE" },
            { "input[15].valueType", "NEURAL_VALUE_ZERO" },
            { "input[16].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[16].forceType", "NEURAL_FORCE_CORES" },
            { "input[16].frequency", "0.000000" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "FALSE" },
            { "input[16].valueType", "NEURAL_VALUE_MOBID" },
            { "input[17].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[17].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[17].frequency", "4093.644043" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "FALSE" },
            { "input[17].valueType", "NEURAL_VALUE_FORCE" },
            { "input[17].waveType", "NEURAL_WAVE_FMOD" },
            { "input[18].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[18].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[18].frequency", "0.000000" },
            { "input[18].radius", "147.504044" },
            { "input[18].useTangent", "FALSE" },
            { "input[18].valueType", "NEURAL_VALUE_CROWD" },
            { "input[18].waveType", "NEURAL_WAVE_FMOD" },
            { "input[19].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[19].forceType", "NEURAL_FORCE_ZERO" },
            { "input[19].radius", "144.802826" },
            { "input[19].useTangent", "TRUE" },
            { "input[19].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[1].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[1].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[1].radius", "301.750824" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[20].crowdType", "NEURAL_CROWD_CORES" },
            { "input[20].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[20].radius", "-1.000000" },
            { "input[20].useTangent", "TRUE" },
            { "input[20].valueType", "NEURAL_VALUE_FORCE" },
            { "input[20].waveType", "NEURAL_WAVE_FMOD" },
            { "input[21].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[21].forceType", "NEURAL_FORCE_CORES" },
            { "input[21].frequency", "0.000000" },
            { "input[21].radius", "-1.000000" },
            { "input[21].useTangent", "FALSE" },
            { "input[21].valueType", "NEURAL_VALUE_FORCE" },
            { "input[22].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[22].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[22].radius", "6.802381" },
            { "input[22].useTangent", "FALSE" },
            { "input[22].valueType", "NEURAL_VALUE_MOBID" },
            { "input[22].waveType", "NEURAL_WAVE_NONE" },
            { "input[23].crowdType", "NEURAL_CROWD_CORES" },
            { "input[23].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[23].frequency", "0.000000" },
            { "input[23].radius", "-1.000000" },
            { "input[23].useTangent", "TRUE" },
            { "input[23].valueType", "NEURAL_VALUE_CROWD" },
            { "input[23].waveType", "NEURAL_WAVE_NONE" },
            { "input[24].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[24].forceType", "NEURAL_FORCE_COHERE" },
            { "input[24].frequency", "0.000000" },
            { "input[24].radius", "1086.721436" },
            { "input[24].useTangent", "TRUE" },
            { "input[24].valueType", "NEURAL_VALUE_FORCE" },
            { "input[2].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[2].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[2].radius", "148.709793" },
            { "input[2].useTangent", "TRUE" },
            { "input[2].valueType", "NEURAL_VALUE_CROWD" },
            { "input[3].crowdType", "NEURAL_CROWD_CORES" },
            { "input[3].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[3].radius", "-1.000000" },
            { "input[3].useTangent", "FALSE" },
            { "input[3].valueType", "NEURAL_VALUE_CROWD" },
            { "input[4].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[4].forceType", "NEURAL_FORCE_EDGES" },
            { "input[4].frequency", "5622.903809" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "TRUE" },
            { "input[4].valueType", "NEURAL_VALUE_FORCE" },
            { "input[4].waveType", "NEURAL_WAVE_SINE" },
            { "input[5].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[5].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[5].frequency", "0.000000" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "TRUE" },
            { "input[5].valueType", "NEURAL_VALUE_FORCE" },
            { "input[5].waveType", "NEURAL_WAVE_SINE" },
            { "input[6].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[6].forceType", "NEURAL_FORCE_HEADING" },
            { "input[6].frequency", "0.000000" },
            { "input[6].radius", "-0.950000" },
            { "input[6].useTangent", "FALSE" },
            { "input[6].valueType", "NEURAL_VALUE_CROWD" },
            { "input[6].waveType", "NEURAL_WAVE_NONE" },
            { "input[7].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[7].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[7].radius", "4.193549" },
            { "input[7].useTangent", "TRUE" },
            { "input[7].valueType", "NEURAL_VALUE_CROWD" },
            { "input[8].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[8].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[8].frequency", "0.000000" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "TRUE" },
            { "input[8].valueType", "NEURAL_VALUE_FORCE" },
            { "input[8].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[9].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[9].forceType", "NEURAL_FORCE_COHERE" },
            { "input[9].radius", "154.979477" },
            { "input[9].useTangent", "TRUE" },
            { "input[9].valueType", "NEURAL_VALUE_FORCE" },
            { "output[100].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[100].radius", "529.224609" },
            { "output[100].useTangent", "TRUE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "output[101].radius", "1351.212036" },
            { "output[101].useTangent", "FALSE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[102].radius", "167.162323" },
            { "output[102].useTangent", "FALSE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_HEADING" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "TRUE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_COHERE" },
            { "output[104].radius", "1729.684937" },
            { "output[104].useTangent", "TRUE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_COHERE" },
            { "output[105].radius", "278.047913" },
            { "output[105].useTangent", "TRUE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_HEADING" },
            { "output[106].radius", "2541.187500" },
            { "output[106].useTangent", "FALSE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[107].radius", "-1.000000" },
            { "output[107].useTangent", "FALSE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_BASE" },
            { "output[108].radius", "-1.000000" },
            { "output[108].useTangent", "FALSE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_EDGES" },
            { "output[109].radius", "1411.446289" },
            { "output[109].useTangent", "TRUE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_ZERO" },
            { "output[110].radius", "2727.242432" },
            { "output[110].useTangent", "FALSE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[111].radius", "-1.000000" },
            { "output[111].useTangent", "FALSE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_CORES" },
            { "output[112].radius", "296.518951" },
            { "output[112].useTangent", "FALSE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[113].radius", "-1.000000" },
            { "output[113].useTangent", "FALSE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_BASE" },
            { "output[114].radius", "322.285767" },
            { "output[114].useTangent", "TRUE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[115].radius", "-1.000000" },
            { "output[115].useTangent", "TRUE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "FALSE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "output[117].radius", "850.924561" },
            { "output[117].useTangent", "FALSE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[118].radius", "298.878693" },
            { "output[118].useTangent", "FALSE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[119].radius", "2850.000000" },
            { "output[119].useTangent", "FALSE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[120].radius", "2963.549072" },
            { "output[120].useTangent", "FALSE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "FALSE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[122].radius", "1693.586426" },
            { "output[122].useTangent", "TRUE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[123].radius", "1030.571045" },
            { "output[123].useTangent", "TRUE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_COHERE" },
            { "output[124].radius", "-1.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "TRUE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1065.707031" },
            { "startingMinRadius", "470.378967" },
        };
        NeuralConfigValue configs11[] = {
            { "attackExtendedRange", "TRUE" },
            { "attackRange", "126.199165" },
            { "creditReserve", "0.000000" },
            { "evadeFighters", "FALSE" },
            { "evadeRange", "299.256897" },
            { "evadeStrictDistance", "114.395027" },
            { "evadeUseStrictDistance", "FALSE" },
            { "floatNet.node[100].inputs", "{84, }" },
            { "floatNet.node[100].op", "ML_FOP_Nx3_ACTIVATE_GAUSSIAN" },
            { "floatNet.node[100].params", "{0.000000, 1.050000, 0.276356, 1.000000, 3.157942, 0.000000, }" },
            { "floatNet.node[101].inputs", "{23, 7, 17, }" },
            { "floatNet.node[101].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[101].params", "{0.000000, 3.143681, 0.000000, }" },
            { "floatNet.node[102].inputs", "{24, 42, 101, 0, 86, 6, 58, 37, }" },
            { "floatNet.node[102].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_STEP" },
            { "floatNet.node[102].params", "{1.549154, 0.000000, 2.486770, 17069.486328, 2.520596, }" },
            { "floatNet.node[103].inputs", "{97, 10, 10, }" },
            { "floatNet.node[103].op", "ML_FOP_1x0_FLOOR" },
            { "floatNet.node[103].params", "{1252.525146, 1577.410767, 30.000000, 0.513399, 1.000000, }" },
            { "floatNet.node[104].inputs", "{67, 57, }" },
            { "floatNet.node[104].op", "ML_FOP_5x0_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[104].params", "{1.000000, 147.082001, 0.000000, 0.000000, 1.000000, 0.000000, }" },
            { "floatNet.node[105].inputs", "{9, 52, 32, 0, 101, }" },
            { "floatNet.node[105].op", "ML_FOP_0x0_ZERO" },
            { "floatNet.node[105].params", "{0.950000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[106].inputs", "{70, 35, }" },
            { "floatNet.node[106].op", "ML_FOP_1x3_IF_LTE_ELSE" },
            { "floatNet.node[106].params", "{}" },
            { "floatNet.node[107].inputs", "{44, 61, 30, 10, }" },
            { "floatNet.node[107].op", "ML_FOP_NxN_WEIGHTED_GEOMETRIC_MEAN" },
            { "floatNet.node[107].params", "{1.505585, 1191.031982, 647.882019, 0.046653, 1.021709, 0.000000, }" },
            { "floatNet.node[108].inputs", "{31, 57, 69, 60, 75, 84, 55, 88, }" },
            { "floatNet.node[108].op", "ML_FOP_2x0_SQUARE_SUM" },
            { "floatNet.node[108].params", "{0.000000, }" },
            { "floatNet.node[109].inputs", "{68, 29, 53, 1, 55, }" },
            { "floatNet.node[109].op", "ML_FOP_1x1_LINEAR_UP" },
            { "floatNet.node[109].params", "{21.620867, 0.000000, 2.713619, 0.108105, 0.000000, 1056.567627, 0.105662, }" },
            { "floatNet.node[110].inputs", "{}" },
            { "floatNet.node[110].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[110].params", "{0.000000, 1.000000, 0.206780, 3.391139, }" },
            { "floatNet.node[111].inputs", "{2, 98, 32, 0, 101, 76, 109, 107, }" },
            { "floatNet.node[111].op", "ML_FOP_3x0_CLAMP" },
            { "floatNet.node[111].params", "{1.000000, 0.000000, 0.898641, 1018.451843, 0.000000, 1.000000, }" },
            { "floatNet.node[112].inputs", "{87, 107, 75, 37, }" },
            { "floatNet.node[112].op", "ML_FOP_1x4_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[112].params", "{1520.729370, 0.110689, 0.000000, }" },
            { "floatNet.node[113].inputs", "{27, 22, 103, 100, 66, 28, 90, 14, }" },
            { "floatNet.node[113].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_UP" },
            { "floatNet.node[113].params", "{1.000000, 19.482994, 1.482340, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[114].inputs", "{37, 94, 89, 113, 91, }" },
            { "floatNet.node[114].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[114].params", "{0.000000, 0.000000, 0.191884, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[115].inputs", "{72, 5, 21, 114, }" },
            { "floatNet.node[115].op", "ML_FOP_1x3_HYP_COSINE" },
            { "floatNet.node[115].params", "{0.000000, 0.000000, 0.106200, 0.000000, 0.234054, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[116].inputs", "{87, 34, }" },
            { "floatNet.node[116].op", "ML_FOP_3x0_IF_GTEZ_ELSE" },
            { "floatNet.node[116].params", "{17151.246094, 0.000000, 0.000000, 0.000000, 0.103045, 0.000000, }" },
            { "floatNet.node[117].inputs", "{5, 11, 84, 53, 35, 94, 64, 38, }" },
            { "floatNet.node[117].op", "ML_FOP_1x2_SINE" },
            { "floatNet.node[117].params", "{}" },
            { "floatNet.node[118].inputs", "{1, 70, 76, 63, }" },
            { "floatNet.node[118].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[118].params", "{0.000000, 0.000000, 154.593857, 0.000000, 0.000000, 0.013984, 0.000000, 1.093649, }" },
            { "floatNet.node[119].inputs", "{13, 66, 46, 51, 19, 66, }" },
            { "floatNet.node[119].op", "ML_FOP_Nx0_ACTIVATE_GAUSSIAN_UP_PROB_INVERSE" },
            { "floatNet.node[119].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[120].inputs", "{113, 108, 78, 49, }" },
            { "floatNet.node[120].op", "ML_FOP_1x3_ARC_TANGENT" },
            { "floatNet.node[120].params", "{0.555243, 0.000000, 1036.331543, 0.497635, 1.308342, 1.000000, }" },
            { "floatNet.node[121].inputs", "{31, 109, 42, 118, }" },
            { "floatNet.node[121].op", "ML_FOP_4x0_IF_GTE_ELSE" },
            { "floatNet.node[121].params", "{869.863159, }" },
            { "floatNet.node[122].inputs", "{44, 28, }" },
            { "floatNet.node[122].op", "ML_FOP_NxN_ACTIVATE_POLYNOMIAL" },
            { "floatNet.node[122].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[123].inputs", "{37, 117, 53, 48, 70, 115, 62, }" },
            { "floatNet.node[123].op", "ML_FOP_1x1_LINEAR_COMBINATION" },
            { "floatNet.node[123].params", "{0.000000, }" },
            { "floatNet.node[124].inputs", "{10, 58, 73, }" },
            { "floatNet.node[124].op", "ML_FOP_Nx0_ACTIVATE_LN_UP" },
            { "floatNet.node[124].params", "{158.168335, 2041.309448, 0.000000, 1.000000, 4899.783203, 0.000000, 0.000000, }" },
            { "floatNet.node[25].inputs", "{21, }" },
            { "floatNet.node[25].op", "ML_FOP_Nx0_ACTIVATE_LOGISTIC" },
            { "floatNet.node[25].params", "{1023.721008, 1.598854, 0.000000, 0.000000, 0.000000, 0.001892, 0.000000, }" },
            { "floatNet.node[26].inputs", "{6, 7, 5, 11, 20, 2, }" },
            { "floatNet.node[26].op", "ML_FOP_1x1_QUADRATIC_UP" },
            { "floatNet.node[26].params", "{0.033770, 0.000000, 0.000000, 1.039665, }" },
            { "floatNet.node[27].inputs", "{15, 4, 8, }" },
            { "floatNet.node[27].op", "ML_FOP_1x4_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[27].params", "{0.180390, 0.000000, 0.950000, 1.008358, 20.911724, 145.154205, 0.000000, 0.000000, }" },
            { "floatNet.node[28].inputs", "{20, 13, 27, 25, 16, 5, 18, }" },
            { "floatNet.node[28].op", "ML_FOP_1x1_SUM" },
            { "floatNet.node[28].params", "{148.639542, 2986.677246, 2.503797, 0.000000, 0.574726, 2.519957, }" },
            { "floatNet.node[29].inputs", "{7, 7, 8, 24, }" },
            { "floatNet.node[29].op", "ML_FOP_Nx0_ACTIVATE_LN_UP" },
            { "floatNet.node[29].params", "{1.100000, 147.068268, 0.000000, 0.000000, }" },
            { "floatNet.node[30].inputs", "{17, }" },
            { "floatNet.node[30].op", "ML_FOP_1x1_STRICT_OFF" },
            { "floatNet.node[30].params", "{10.000000, 942.655945, 898.907593, 0.000000, 0.223819, 0.000000, }" },
            { "floatNet.node[31].inputs", "{28, 17, 29, }" },
            { "floatNet.node[31].op", "ML_FOP_1x1_LTE" },
            { "floatNet.node[31].params", "{}" },
            { "floatNet.node[32].inputs", "{}" },
            { "floatNet.node[32].op", "ML_FOP_2x0_PRODUCT" },
            { "floatNet.node[32].params", "{0.950000, 0.000000, 0.000000, 0.000000, 0.000000, 945.880005, 244.147690, }" },
            { "floatNet.node[33].inputs", "{17, 14, 32, }" },
            { "floatNet.node[33].op", "ML_FOP_1x0_HYP_COSINE" },
            { "floatNet.node[33].params", "{}" },
            { "floatNet.node[34].inputs", "{5, }" },
            { "floatNet.node[34].op", "ML_FOP_Nx2_ACTIVATE_LINEAR_DOWN" },
            { "floatNet.node[34].params", "{143.050323, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[35].inputs", "{}" },
            { "floatNet.node[35].op", "ML_FOP_1x2_CLAMPED_SCALE_FROM_UNIT" },
            { "floatNet.node[35].params", "{1.000000, 0.000000, }" },
            { "floatNet.node[36].inputs", "{}" },
            { "floatNet.node[36].op", "ML_FOP_Nx1_ACTIVATE_THRESHOLD_UP" },
            { "floatNet.node[36].params", "{0.000000, 140.136993, 1.000000, }" },
            { "floatNet.node[37].inputs", "{3, 32, 27, 16, }" },
            { "floatNet.node[37].op", "ML_FOP_Nx1_ACTIVATE_DIV_SUM" },
            { "floatNet.node[37].params", "{161.302704, 150.583237, }" },
            { "floatNet.node[38].inputs", "{25, 1, 13, }" },
            { "floatNet.node[38].op", "ML_FOP_1x0_ARC_COSINE" },
            { "floatNet.node[38].params", "{0.000000, 2.555115, 1.000000, }" },
            { "floatNet.node[39].inputs", "{38, 37, }" },
            { "floatNet.node[39].op", "ML_FOP_Nx0_ACTIVATE_GAUSSIAN_UP_PROB_INVERSE" },
            { "floatNet.node[39].params", "{0.898238, 1.000000, 953.236450, 0.864338, 3000.000000, 0.423913, }" },
            { "floatNet.node[40].inputs", "{35, 18, 19, 30, 23, 4, }" },
            { "floatNet.node[40].op", "ML_FOP_NxN_SCALED_DIV_SUM" },
            { "floatNet.node[40].params", "{0.322733, 0.477213, }" },
            { "floatNet.node[41].inputs", "{13, 36, 12, 28, 0, }" },
            { "floatNet.node[41].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[41].params", "{1.000000, 0.000000, }" },
            { "floatNet.node[42].inputs", "{5, 34, 21, 4, }" },
            { "floatNet.node[42].op", "ML_FOP_1x0_SQRT" },
            { "floatNet.node[42].params", "{1.000000, 0.096651, 24.953848, 1240.511597, 0.000000, }" },
            { "floatNet.node[43].inputs", "{42, 24, }" },
            { "floatNet.node[43].op", "ML_FOP_1x2_COSINE" },
            { "floatNet.node[43].params", "{0.000000, }" },
            { "floatNet.node[44].inputs", "{30, }" },
            { "floatNet.node[44].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[44].params", "{148.704834, 28.146860, 0.000000, }" },
            { "floatNet.node[45].inputs", "{43, 28, 15, }" },
            { "floatNet.node[45].op", "ML_FOP_0x0_ONE" },
            { "floatNet.node[45].params", "{}" },
            { "floatNet.node[46].inputs", "{}" },
            { "floatNet.node[46].op", "ML_FOP_1x4_IF_OUTSIDE_RANGE_ELSE" },
            { "floatNet.node[46].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[47].inputs", "{21, 16, 2, 33, 11, 21, 17, }" },
            { "floatNet.node[47].op", "ML_FOP_NxN_ACTIVATE_POLYNOMIAL" },
            { "floatNet.node[47].params", "{0.000000, 0.000000, 1.000000, 1.000000, }" },
            { "floatNet.node[48].inputs", "{}" },
            { "floatNet.node[48].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[48].params", "{}" },
            { "floatNet.node[49].inputs", "{}" },
            { "floatNet.node[49].op", "ML_FOP_3x0_CLAMP" },
            { "floatNet.node[49].params", "{1.000000, }" },
            { "floatNet.node[50].inputs", "{43, 37, 44, 49, }" },
            { "floatNet.node[50].op", "ML_FOP_Nx0_DIV_SUM" },
            { "floatNet.node[50].params", "{1.000000, 0.258113, 291.728546, 255.701035, 0.000000, }" },
            { "floatNet.node[51].inputs", "{25, 43, 45, 29, }" },
            { "floatNet.node[51].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[51].params", "{0.000000, 0.000000, 144.050110, 0.000000, 1.000000, 0.972787, 0.000000, }" },
            { "floatNet.node[52].inputs", "{0, 46, 2, 18, }" },
            { "floatNet.node[52].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[52].params", "{2700.262939, 1239.031250, 0.094429, 0.000000, 8.878457, 1.000000, 3.889593, 1.000000, }" },
            { "floatNet.node[53].inputs", "{12, 8, 3, 13, }" },
            { "floatNet.node[53].op", "ML_FOP_Nx0_GEOMETRIC_MEAN" },
            { "floatNet.node[53].params", "{20.740566, 1.000000, 29.763569, 13.481079, 0.950000, 0.475516, 2950.105957, 0.000000, }" },
            { "floatNet.node[54].inputs", "{11, 0, 7, 13, 33, 35, 12, 41, }" },
            { "floatNet.node[54].op", "ML_FOP_2x2_IF_GTE_ELSE" },
            { "floatNet.node[54].params", "{1.000000, }" },
            { "floatNet.node[55].inputs", "{31, 11, 21, 25, 54, 29, 25, }" },
            { "floatNet.node[55].op", "ML_FOP_1x3_HYP_TANGENT" },
            { "floatNet.node[55].params", "{0.486350, }" },
            { "floatNet.node[56].inputs", "{0, }" },
            { "floatNet.node[56].op", "ML_FOP_1xN_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[56].params", "{1.000000, 1009.547424, 0.000000, 0.000000, }" },
            { "floatNet.node[57].inputs", "{43, 45, 2, }" },
            { "floatNet.node[57].op", "ML_FOP_Nx0_ACTIVATE_SOFTPLUS" },
            { "floatNet.node[57].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[58].inputs", "{0, 15, 16, 37, 19, 32, 38, }" },
            { "floatNet.node[58].op", "ML_FOP_1x0_EXP" },
            { "floatNet.node[58].params", "{0.000000, 1.019409, 1.000000, 0.000000, 0.000000, 0.097884, 0.231568, }" },
            { "floatNet.node[59].inputs", "{49, 34, 52, 49, 36, }" },
            { "floatNet.node[59].op", "ML_FOP_3x2_IF_OUTSIDE_RANGE_ELSE_CONST" },
            { "floatNet.node[59].params", "{0.615245, }" },
            { "floatNet.node[60].inputs", "{23, 6, 44, }" },
            { "floatNet.node[60].op", "ML_FOP_1x0_NEGATE" },
            { "floatNet.node[60].params", "{1730.040283, 0.108184, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[61].inputs", "{37, 17, 55, 20, 40, 8, 13, }" },
            { "floatNet.node[61].op", "ML_FOP_1x2_SEEDED_RANDOM" },
            { "floatNet.node[61].params", "{0.000000, 204.888718, 0.000000, 0.000000, 0.000000, 2322.148682, 0.000000, 0.000000, }" },
            { "floatNet.node[62].inputs", "{45, 30, 9, 20, 24, 61, 27, 13, }" },
            { "floatNet.node[62].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[62].params", "{1.488505, 1.561505, 147.017166, 0.731341, 1.000000, 0.000000, }" },
            { "floatNet.node[63].inputs", "{36, 9, 11, 62, 47, }" },
            { "floatNet.node[63].op", "ML_FOP_1x0_ABS" },
            { "floatNet.node[63].params", "{1119.231689, 330.688843, }" },
            { "floatNet.node[64].inputs", "{40, 60, 59, }" },
            { "floatNet.node[64].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_LERP" },
            { "floatNet.node[64].params", "{0.000000, 6479.723145, 144.099915, 5.269822, 0.117956, 294.487152, 1.000000, }" },
            { "floatNet.node[65].inputs", "{31, 29, 34, 7, 13, 54, 29, 29, }" },
            { "floatNet.node[65].op", "ML_FOP_Nx0_ACTIVATE_SQRT_UP" },
            { "floatNet.node[65].params", "{30.000000, }" },
            { "floatNet.node[66].inputs", "{}" },
            { "floatNet.node[66].op", "ML_FOP_1x1_STRICT_ON" },
            { "floatNet.node[66].params", "{0.000000, 0.589762, 0.000000, 17345.072266, 0.000000, 0.000000, 0.000000, 1.000000, }" },
            { "floatNet.node[67].inputs", "{14, 44, 17, 36, 17, }" },
            { "floatNet.node[67].op", "ML_FOP_1x1_LINEAR_COMBINATION" },
            { "floatNet.node[67].params", "{0.000000, 0.937990, 0.000000, 0.900000, }" },
            { "floatNet.node[68].inputs", "{44, 6, 51, 56, 63, 41, 3, }" },
            { "floatNet.node[68].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[68].params", "{2960.583740, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[69].inputs", "{30, 51, 25, 62, 55, 37, 20, }" },
            { "floatNet.node[69].op", "ML_FOP_4x4_LINEAR_COMBINATION" },
            { "floatNet.node[69].params", "{1977.453247, }" },
            { "floatNet.node[70].inputs", "{42, 37, 68, 0, 11, }" },
            { "floatNet.node[70].op", "ML_FOP_Nx0_ACTIVATE_GAUSSIAN_UP" },
            { "floatNet.node[70].params", "{0.100199, 0.900000, 0.000000, }" },
            { "floatNet.node[71].inputs", "{}" },
            { "floatNet.node[71].op", "ML_FOP_1xN_POLYNOMIAL_CLAMPED_UNIT" },
            { "floatNet.node[71].params", "{}" },
            { "floatNet.node[72].inputs", "{60, 7, 41, }" },
            { "floatNet.node[72].op", "ML_FOP_1x2_OUTSIDE_RANGE" },
            { "floatNet.node[72].params", "{}" },
            { "floatNet.node[73].inputs", "{}" },
            { "floatNet.node[73].op", "ML_FOP_1xN_POLYNOMIAL_CLAMPED_UNIT" },
            { "floatNet.node[73].params", "{0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[74].inputs", "{37, 15, 59, 22, 47, 33, 25, }" },
            { "floatNet.node[74].op", "ML_FOP_1x3_ARC_COSINE" },
            { "floatNet.node[74].params", "{}" },
            { "floatNet.node[75].inputs", "{}" },
            { "floatNet.node[75].op", "ML_FOP_2x0_SUM" },
            { "floatNet.node[75].params", "{24.098963, 1904.422607, 0.000000, 0.798429, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[76].inputs", "{13, 67, 3, 13, }" },
            { "floatNet.node[76].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[76].params", "{0.109540, 0.000000, 0.000000, 396.382080, 0.000000, }" },
            { "floatNet.node[77].inputs", "{13, }" },
            { "floatNet.node[77].op", "ML_FOP_1x0_HYP_SINE" },
            { "floatNet.node[77].params", "{0.855000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[78].inputs", "{12, }" },
            { "floatNet.node[78].op", "ML_FOP_NxN_SELECT_LTE" },
            { "floatNet.node[78].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[79].inputs", "{54, 70, 4, 75, }" },
            { "floatNet.node[79].op", "ML_FOP_2x0_PRODUCT" },
            { "floatNet.node[79].params", "{0.100938, 0.893583, 0.000000, 0.210219, 1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[80].inputs", "{48, 57, 75, 40, 73, }" },
            { "floatNet.node[80].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[80].params", "{3.804961, 257.136505, 1.542052, }" },
            { "floatNet.node[81].inputs", "{59, 65, 55, 49, 3, 30, }" },
            { "floatNet.node[81].op", "ML_FOP_1x3_ARC_COSINE" },
            { "floatNet.node[81].params", "{0.000000, 0.000000, 0.000000, 0.000000, 660.309509, 1.000000, 1.050000, }" },
            { "floatNet.node[82].inputs", "{70, 2, 61, 3, 51, }" },
            { "floatNet.node[82].op", "ML_FOP_Nx1_DIV_SUM" },
            { "floatNet.node[82].params", "{9895.462891, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[83].inputs", "{13, 32, 30, 71, 80, 18, }" },
            { "floatNet.node[83].op", "ML_FOP_1x1_FMOD" },
            { "floatNet.node[83].params", "{}" },
            { "floatNet.node[84].inputs", "{5, 8, 64, 54, 81, }" },
            { "floatNet.node[84].op", "ML_FOP_1x0_PROB_NOT" },
            { "floatNet.node[84].params", "{0.000000, 0.000000, }" },
            { "floatNet.node[85].inputs", "{27, 46, 78, 69, }" },
            { "floatNet.node[85].op", "ML_FOP_1x0_ARC_TANGENT" },
            { "floatNet.node[85].params", "{5684.448730, 0.000000, 1.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[86].inputs", "{84, 75, 73, 75, }" },
            { "floatNet.node[86].op", "ML_FOP_NxN_WEIGHTED_GEOMETRIC_MEAN" },
            { "floatNet.node[86].params", "{0.000000, 0.000000, 24.561216, 1035.908569, }" },
            { "floatNet.node[87].inputs", "{16, 44, }" },
            { "floatNet.node[87].op", "ML_FOP_2x0_CEIL_STEP" },
            { "floatNet.node[87].params", "{1.627296, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[88].inputs", "{2, 56, }" },
            { "floatNet.node[88].op", "ML_FOP_Nx0_SELECT_UNIT_INTERVAL_LERP" },
            { "floatNet.node[88].params", "{12.581761, 2.725593, }" },
            { "floatNet.node[89].inputs", "{69, 63, 15, }" },
            { "floatNet.node[89].op", "ML_FOP_1x2_CLAMPED_SCALE_TO_UNIT" },
            { "floatNet.node[89].params", "{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }" },
            { "floatNet.node[90].inputs", "{78, 66, 84, 21, 3, 29, 12, }" },
            { "floatNet.node[90].op", "ML_FOP_Nx2_ACTIVATE_QUADRATIC_DOWN" },
            { "floatNet.node[90].params", "{}" },
            { "floatNet.node[91].inputs", "{}" },
            { "floatNet.node[91].op", "ML_FOP_1x0_CEIL" },
            { "floatNet.node[91].params", "{}" },
            { "floatNet.node[92].inputs", "{25, 2, }" },
            { "floatNet.node[92].op", "ML_FOP_1x2_INSIDE_RANGE" },
            { "floatNet.node[92].params", "{0.000000, 0.102678, 1.000000, }" },
            { "floatNet.node[93].inputs", "{31, 27, }" },
            { "floatNet.node[93].op", "ML_FOP_NxN_SELECT_UNIT_INTERVAL_WEIGHTED_LERP" },
            { "floatNet.node[93].params", "{989.335571, }" },
            { "floatNet.node[94].inputs", "{43, 37, }" },
            { "floatNet.node[94].op", "ML_FOP_Nx3_ACTIVATE_GAUSSIAN" },
            { "floatNet.node[94].params", "{0.000000, 0.000000, 5.410668, 1.007700, }" },
            { "floatNet.node[95].inputs", "{6, 39, 81, 52, 20, }" },
            { "floatNet.node[95].op", "ML_FOP_Nx0_SUM" },
            { "floatNet.node[95].params", "{1.340968, 275.882324, 1.000000, 18354.156250, 2.035275, 0.000000, }" },
            { "floatNet.node[96].inputs", "{87, 46, 16, 90, 54, }" },
            { "floatNet.node[96].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[96].params", "{2401.708252, 4017.525635, 1.846820, 1.474648, }" },
            { "floatNet.node[97].inputs", "{39, }" },
            { "floatNet.node[97].op", "ML_FOP_Nx0_MAX" },
            { "floatNet.node[97].params", "{}" },
            { "floatNet.node[98].inputs", "{}" },
            { "floatNet.node[98].op", "ML_FOP_2x2_IF_GTE_ELSE" },
            { "floatNet.node[98].params", "{0.000000, 0.000000, 1145.579712, 1385.257324, 0.000000, 0.000000, }" },
            { "floatNet.node[99].inputs", "{1, 30, 35, 62, 47, }" },
            { "floatNet.node[99].op", "ML_FOP_3x2_IF_INSIDE_RANGE_CONST_ELSE" },
            { "floatNet.node[99].params", "{0.000000, 2.573027, 0.000000, 0.688065, 1007.641113, }" },
            { "floatNet.numInputs", "25" },
            { "floatNet.numNodes", "100" },
            { "floatNet.numOutputs", "25" },
            { "gatherAbandonStale", "TRUE" },
            { "gatherRange", "53.190826" },
            { "guardRange", "87.259979" },
            { "input[0].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[0].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[0].radius", "0.000000" },
            { "input[0].useTangent", "FALSE" },
            { "input[0].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[10].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[10].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[10].radius", "157.201385" },
            { "input[10].useTangent", "FALSE" },
            { "input[10].valueType", "NEURAL_VALUE_CROWD" },
            { "input[11].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[11].forceType", "NEURAL_FORCE_BASE" },
            { "input[11].radius", "157.342880" },
            { "input[11].useTangent", "TRUE" },
            { "input[11].valueType", "NEURAL_VALUE_FORCE" },
            { "input[11].waveType", "NEURAL_WAVE_UNIT_SINE" },
            { "input[12].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[12].forceType", "NEURAL_FORCE_CORES" },
            { "input[12].frequency", "0.000000" },
            { "input[12].radius", "0.000000" },
            { "input[12].useTangent", "TRUE" },
            { "input[12].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[12].waveType", "NEURAL_WAVE_SINE" },
            { "input[13].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[13].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[13].frequency", "0.000000" },
            { "input[13].radius", "0.000000" },
            { "input[13].useTangent", "TRUE" },
            { "input[13].valueType", "NEURAL_VALUE_FORCE" },
            { "input[13].waveType", "NEURAL_WAVE_SINE" },
            { "input[14].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[14].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "input[14].frequency", "0.000000" },
            { "input[14].radius", "164.939926" },
            { "input[14].useTangent", "FALSE" },
            { "input[14].valueType", "NEURAL_VALUE_FORCE" },
            { "input[14].waveType", "NEURAL_WAVE_FMOD" },
            { "input[15].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[15].forceType", "NEURAL_FORCE_COHERE" },
            { "input[15].radius", "156.087997" },
            { "input[15].useTangent", "FALSE" },
            { "input[15].valueType", "NEURAL_VALUE_FORCE" },
            { "input[16].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[16].forceType", "NEURAL_FORCE_CENTER" },
            { "input[16].frequency", "0.000000" },
            { "input[16].radius", "0.000000" },
            { "input[16].useTangent", "FALSE" },
            { "input[16].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[17].crowdType", "NEURAL_CROWD_CORES" },
            { "input[17].forceType", "NEURAL_FORCE_BASE" },
            { "input[17].frequency", "4093.644043" },
            { "input[17].radius", "0.000000" },
            { "input[17].useTangent", "FALSE" },
            { "input[17].valueType", "NEURAL_VALUE_CROWD" },
            { "input[17].waveType", "NEURAL_WAVE_FMOD" },
            { "input[18].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[18].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "input[18].frequency", "0.000000" },
            { "input[18].radius", "147.504044" },
            { "input[18].useTangent", "FALSE" },
            { "input[18].valueType", "NEURAL_VALUE_MOBID" },
            { "input[18].waveType", "NEURAL_WAVE_FMOD" },
            { "input[19].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[19].forceType", "NEURAL_FORCE_ZERO" },
            { "input[19].frequency", "0.000000" },
            { "input[19].radius", "144.802826" },
            { "input[19].useTangent", "FALSE" },
            { "input[19].valueType", "NEURAL_VALUE_CROWD" },
            { "input[19].waveType", "NEURAL_WAVE_UNIT_SINE" },
            { "input[1].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[1].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[1].radius", "301.750824" },
            { "input[1].useTangent", "TRUE" },
            { "input[1].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[20].crowdType", "NEURAL_CROWD_ENEMY_MISSILE" },
            { "input[20].forceType", "NEURAL_FORCE_ENEMY_BASE" },
            { "input[20].radius", "0.000000" },
            { "input[20].useTangent", "FALSE" },
            { "input[20].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[20].waveType", "NEURAL_WAVE_FMOD" },
            { "input[21].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[21].forceType", "NEURAL_FORCE_ENEMY" },
            { "input[21].frequency", "0.000000" },
            { "input[21].radius", "-1.000000" },
            { "input[21].useTangent", "TRUE" },
            { "input[21].valueType", "NEURAL_VALUE_CROWD" },
            { "input[22].crowdType", "NEURAL_CROWD_CORES" },
            { "input[22].forceType", "NEURAL_FORCE_ALIGN" },
            { "input[22].radius", "6.802381" },
            { "input[22].useTangent", "FALSE" },
            { "input[22].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[22].waveType", "NEURAL_WAVE_NONE" },
            { "input[23].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[23].forceType", "NEURAL_FORCE_CENTER" },
            { "input[23].frequency", "0.000000" },
            { "input[23].radius", "-1.000000" },
            { "input[23].useTangent", "FALSE" },
            { "input[23].valueType", "NEURAL_VALUE_CROWD" },
            { "input[23].waveType", "NEURAL_WAVE_NONE" },
            { "input[24].crowdType", "NEURAL_CROWD_ENEMY_SHIP" },
            { "input[24].forceType", "NEURAL_FORCE_SEPARATE" },
            { "input[24].frequency", "0.000000" },
            { "input[24].radius", "1086.721436" },
            { "input[24].useTangent", "TRUE" },
            { "input[24].valueType", "NEURAL_VALUE_FORCE" },
            { "input[2].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[2].forceType", "NEURAL_FORCE_CORES" },
            { "input[2].radius", "148.709793" },
            { "input[2].useTangent", "FALSE" },
            { "input[2].valueType", "NEURAL_VALUE_CROWD" },
            { "input[3].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[3].forceType", "NEURAL_FORCE_BASE" },
            { "input[3].radius", "-1.000000" },
            { "input[3].useTangent", "FALSE" },
            { "input[3].valueType", "NEURAL_VALUE_CREDITS" },
            { "input[4].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[4].forceType", "NEURAL_FORCE_EDGES" },
            { "input[4].frequency", "5622.903809" },
            { "input[4].radius", "0.000000" },
            { "input[4].useTangent", "FALSE" },
            { "input[4].valueType", "NEURAL_VALUE_RANDOM_UNIT" },
            { "input[4].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[5].crowdType", "NEURAL_CROWD_FRIEND_FIGHTER" },
            { "input[5].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "input[5].frequency", "0.000000" },
            { "input[5].radius", "0.000000" },
            { "input[5].useTangent", "TRUE" },
            { "input[5].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[5].waveType", "NEURAL_WAVE_SINE" },
            { "input[6].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[6].forceType", "NEURAL_FORCE_HEADING" },
            { "input[6].frequency", "0.000000" },
            { "input[6].radius", "-0.950000" },
            { "input[6].useTangent", "FALSE" },
            { "input[6].valueType", "NEURAL_VALUE_CROWD" },
            { "input[6].waveType", "NEURAL_WAVE_NONE" },
            { "input[7].crowdType", "NEURAL_CROWD_BASE_FRIEND_SHIP" },
            { "input[7].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "input[7].radius", "4.193549" },
            { "input[7].useTangent", "TRUE" },
            { "input[7].valueType", "NEURAL_VALUE_FRIEND_SHIPS" },
            { "input[8].crowdType", "NEURAL_CROWD_BASE_ENEMY_SHIP" },
            { "input[8].forceType", "NEURAL_FORCE_ENEMY_BASE_GUESS" },
            { "input[8].frequency", "0.000000" },
            { "input[8].radius", "0.000000" },
            { "input[8].useTangent", "FALSE" },
            { "input[8].valueType", "NEURAL_VALUE_CROWD" },
            { "input[8].waveType", "NEURAL_WAVE_ABS_SINE" },
            { "input[9].crowdType", "NEURAL_CROWD_FRIEND_MISSILE" },
            { "input[9].forceType", "NEURAL_FORCE_HEADING" },
            { "input[9].radius", "154.979477" },
            { "input[9].useTangent", "TRUE" },
            { "input[9].valueType", "NEURAL_VALUE_FORCE" },
            { "output[100].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[100].radius", "529.224609" },
            { "output[100].useTangent", "TRUE" },
            { "output[100].valueType", "NEURAL_VALUE_FORCE" },
            { "output[101].forceType", "NEURAL_FORCE_ZERO" },
            { "output[101].radius", "1351.212036" },
            { "output[101].useTangent", "FALSE" },
            { "output[101].valueType", "NEURAL_VALUE_FORCE" },
            { "output[102].forceType", "NEURAL_FORCE_SEPARATE" },
            { "output[102].radius", "167.162323" },
            { "output[102].useTangent", "FALSE" },
            { "output[102].valueType", "NEURAL_VALUE_FORCE" },
            { "output[103].forceType", "NEURAL_FORCE_CORNERS" },
            { "output[103].radius", "-1.000000" },
            { "output[103].useTangent", "FALSE" },
            { "output[103].valueType", "NEURAL_VALUE_FORCE" },
            { "output[104].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[104].radius", "1729.684937" },
            { "output[104].useTangent", "FALSE" },
            { "output[104].valueType", "NEURAL_VALUE_FORCE" },
            { "output[105].forceType", "NEURAL_FORCE_NEAREST_FRIEND_MISSILE" },
            { "output[105].radius", "278.047913" },
            { "output[105].useTangent", "FALSE" },
            { "output[105].valueType", "NEURAL_VALUE_FORCE" },
            { "output[106].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[106].radius", "2541.187500" },
            { "output[106].useTangent", "FALSE" },
            { "output[106].valueType", "NEURAL_VALUE_FORCE" },
            { "output[107].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[107].radius", "-1.000000" },
            { "output[107].useTangent", "TRUE" },
            { "output[107].valueType", "NEURAL_VALUE_FORCE" },
            { "output[108].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[108].radius", "-0.950000" },
            { "output[108].useTangent", "FALSE" },
            { "output[108].valueType", "NEURAL_VALUE_FORCE" },
            { "output[109].forceType", "NEURAL_FORCE_HEADING" },
            { "output[109].radius", "1411.446289" },
            { "output[109].useTangent", "FALSE" },
            { "output[109].valueType", "NEURAL_VALUE_FORCE" },
            { "output[110].forceType", "NEURAL_FORCE_COHERE" },
            { "output[110].radius", "2590.880371" },
            { "output[110].useTangent", "FALSE" },
            { "output[110].valueType", "NEURAL_VALUE_FORCE" },
            { "output[111].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[111].radius", "151.967468" },
            { "output[111].useTangent", "TRUE" },
            { "output[111].valueType", "NEURAL_VALUE_FORCE" },
            { "output[112].forceType", "NEURAL_FORCE_HEADING" },
            { "output[112].radius", "296.518951" },
            { "output[112].useTangent", "FALSE" },
            { "output[112].valueType", "NEURAL_VALUE_FORCE" },
            { "output[113].forceType", "NEURAL_FORCE_ZERO" },
            { "output[113].radius", "-1.000000" },
            { "output[113].useTangent", "TRUE" },
            { "output[113].valueType", "NEURAL_VALUE_FORCE" },
            { "output[114].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "output[114].radius", "322.285767" },
            { "output[114].useTangent", "FALSE" },
            { "output[114].valueType", "NEURAL_VALUE_FORCE" },
            { "output[115].forceType", "NEURAL_FORCE_HEADING" },
            { "output[115].radius", "-1.000000" },
            { "output[115].useTangent", "FALSE" },
            { "output[115].valueType", "NEURAL_VALUE_FORCE" },
            { "output[116].forceType", "NEURAL_FORCE_CORES" },
            { "output[116].radius", "0.000000" },
            { "output[116].useTangent", "TRUE" },
            { "output[116].valueType", "NEURAL_VALUE_FORCE" },
            { "output[117].forceType", "NEURAL_FORCE_COHERE" },
            { "output[117].radius", "1002.034180" },
            { "output[117].useTangent", "TRUE" },
            { "output[117].valueType", "NEURAL_VALUE_FORCE" },
            { "output[118].forceType", "NEURAL_FORCE_ENEMY_MISSILE" },
            { "output[118].radius", "298.878693" },
            { "output[118].useTangent", "FALSE" },
            { "output[118].valueType", "NEURAL_VALUE_FORCE" },
            { "output[119].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[119].radius", "2850.000000" },
            { "output[119].useTangent", "FALSE" },
            { "output[119].valueType", "NEURAL_VALUE_FORCE" },
            { "output[120].forceType", "NEURAL_FORCE_NEAREST_FRIEND" },
            { "output[120].radius", "2963.549072" },
            { "output[120].useTangent", "FALSE" },
            { "output[120].valueType", "NEURAL_VALUE_FORCE" },
            { "output[121].forceType", "NEURAL_FORCE_ENEMY" },
            { "output[121].radius", "-1.000000" },
            { "output[121].useTangent", "FALSE" },
            { "output[121].valueType", "NEURAL_VALUE_FORCE" },
            { "output[122].forceType", "NEURAL_FORCE_ENEMY_COHERE" },
            { "output[122].radius", "1693.586426" },
            { "output[122].useTangent", "FALSE" },
            { "output[122].valueType", "NEURAL_VALUE_FORCE" },
            { "output[123].forceType", "NEURAL_FORCE_BASE_DEFENSE" },
            { "output[123].radius", "1030.571045" },
            { "output[123].useTangent", "FALSE" },
            { "output[123].valueType", "NEURAL_VALUE_FORCE" },
            { "output[124].forceType", "NEURAL_FORCE_ALIGN" },
            { "output[124].radius", "-1.000000" },
            { "output[124].useTangent", "FALSE" },
            { "output[124].valueType", "NEURAL_VALUE_FORCE" },
            { "rotateStartingAngle", "TRUE" },
            { "sensorGrid.staleCoreTime", "0.000000" },
            { "sensorGrid.staleFighterTime", "0.000000" },
            { "startingMaxRadius", "1050.087036" },
            { "startingMinRadius", "521.772766" },
        };
        NeuralConfigValue configs12[] = {
            { "void", "void" },
        };

        struct {
            NeuralConfigValue *values;
            uint numValues;
        } configs[] = {
            { defaults,  ARRAYSIZE(defaults), },
            { configs1,  ARRAYSIZE(configs1), },
            { configs2,  ARRAYSIZE(configs2), },
            { configs3,  ARRAYSIZE(configs3), },
            { configs4,  ARRAYSIZE(configs4), },
            { configs5,  ARRAYSIZE(configs5), },
            { configs6,  ARRAYSIZE(configs6), },
            { configs7,  ARRAYSIZE(configs7), },
            { configs8,  ARRAYSIZE(configs8), },
            { configs9,  ARRAYSIZE(configs9), },
            { configs10, ARRAYSIZE(configs10), },
            { configs11, ARRAYSIZE(configs11), },
            { configs12, ARRAYSIZE(configs12), },
        };

        int neuralIndex = aiType - FLEET_AI_NEURAL1 + 1;
        VERIFY(aiType >= FLEET_AI_NEURAL1);
        VERIFY(aiType <= FLEET_AI_NEURAL12);
        VERIFY(neuralIndex >= 1 && neuralIndex < ARRAYSIZE(configs));

        int i = neuralIndex;
        NeuralConfigValue *curConfig = configs[i].values;
        uint size = configs[i].numValues;
        for (uint k = 0; k < size; k++) {
            if (curConfig[k].value != NULL &&
                !MBRegistry_ContainsKey(mreg, curConfig[k].key)) {
                MBRegistry_PutConst(mreg, curConfig[k].key,
                                    curConfig[k].value);
            }
        }

        i = 0;
        curConfig = configs[i].values;
        size = configs[i].numValues;
        for (uint k = 0; k < size; k++) {
            if (curConfig[k].value != NULL &&
                !MBRegistry_ContainsKey(mreg, curConfig[k].key)) {
                MBRegistry_PutConst(mreg, curConfig[k].key,
                                    curConfig[k].value);
            }
        }

        /*
         * Don't add all the earlier configs by default.
         */

        // for (int i = neuralIndex; i >= 0; i--) {
        //     NeuralConfigValue *curConfig = configs[i].values;
        //     uint size = configs[i].numValues;
        //     for (uint k = 0; k < size; k++) {
        //         if (curConfig[k].value != NULL &&
        //             !MBRegistry_ContainsKey(mreg, curConfig[k].key)) {
        //             MBRegistry_PutConst(mreg, curConfig[k].key,
        //                                 curConfig[k].value);
        //         }
        //     }
        // }
    }

    virtual void loadRegistry(MBRegistry *mreg) {
        myUseAttackForces = MBRegistry_GetBoolD(mreg, "useAttackForces", FALSE);

        if (MBRegistry_ContainsKey(mreg, "floatNet.numInputs") &&
            MBRegistry_GetUint(mreg, "floatNet.numInputs") > 0) {
            myNeuralNet.load(mreg, "floatNet.");
        } else {
            myNeuralNet.initialize(1, 1, 1);
            myNeuralNet.loadZeroNet();
        }

        uint numInputs = myNeuralNet.getNumInputs();
        uint numOutputs = myNeuralNet.getNumOutputs();
        myNumNodes = myNeuralNet.getNumNodes();

        myInputs.resize(numInputs);
        myOutputs.resize(numOutputs);

        myInputDescs.resize(numInputs);
        myOutputDescs.resize(numOutputs);

        for (uint i = 0; i < myOutputDescs.size(); i++) {
            char *str = NULL;
            int ret = asprintf(&str, "output[%d].",
                               i + myNeuralNet.getOutputOffset());
            VERIFY(ret > 0);
            NeuralValue_Load(mreg, &myOutputDescs[i], str);
            free(str);

            if (myOutputDescs[i].valueType != NEURAL_VALUE_FORCE) {
                myOutputDescs[i].valueType = NEURAL_VALUE_FORCE;
                myOutputDescs[i].forceDesc.forceType = NEURAL_FORCE_VOID;
                myOutputDescs[i].forceDesc.useTangent = FALSE;
                myOutputDescs[i].forceDesc.radius = 0.0f;
                myOutputDescs[i].forceDesc.doIdle = FALSE;
                myOutputDescs[i].forceDesc.doAttack = FALSE;
            }

            if (myOutputDescs[i].forceDesc.forceType == NEURAL_FORCE_ZERO ||
                myOutputDescs[i].forceDesc.forceType == NEURAL_FORCE_VOID) {
                myNeuralNet.voidOutputNode(i);
                myOutputDescs[i].forceDesc.forceType = NEURAL_FORCE_VOID;
            }
        }

        CPBitVector inputBV;
        inputBV.resize(numInputs);
        myNeuralNet.minimize(&inputBV);

        for (uint i = 0; i < myInputDescs.size(); i++) {
            if (inputBV.get(i)) {
                char *str = NULL;
                int ret = asprintf(&str, "input[%d].", i);
                VERIFY(ret > 0);
                NeuralValue_Load(mreg, &myInputDescs[i], str);
                free(str);
            } else {
                myInputDescs[i].valueType = NEURAL_VALUE_VOID;
            }
        }

        this->BasicAIGovernor::loadRegistry(mreg);
    }

    float getNeuralValue(Mob *mob, NeuralValueDesc *desc, uint i) {
        FRPoint force;
        RandomState *rs = &myRandomState;
        FleetAI *ai = myFleetAI;
        MappingSensorGrid *sg = (MappingSensorGrid *)mySensorGrid;

        FRPoint_Zero(&force);

        ASSERT(desc != NULL);
        switch (desc->valueType) {
            case NEURAL_VALUE_ZERO:
            case NEURAL_VALUE_VOID:
                return 0.0f;
            case NEURAL_VALUE_FORCE:
                return getRangeValue(mob, &desc->forceDesc);
            case NEURAL_VALUE_CROWD:
                return getCrowdValue(mob, &desc->crowdDesc);
            case NEURAL_VALUE_TICK:
                return getTickValue(&desc->tickDesc);
            case NEURAL_VALUE_MOBID: {
                RandomState lr;
                uint64 seed = mob->mobid;
                seed = (seed << 32) | i;
                RandomState_CreateWithSeed(&lr, seed);
                return RandomState_UnitFloat(&lr);
            }
            case NEURAL_VALUE_RANDOM_UNIT:
                return RandomState_UnitFloat(rs);
            case NEURAL_VALUE_CREDITS:
                return (float)ai->credits;
            case NEURAL_VALUE_FRIEND_SHIPS:
                return (float)sg->numFriends(MOB_FLAG_SHIP);

            default:
                NOT_IMPLEMENTED();
        }
    }

    NeuralNetContext *getNeuralNetContext(void) {
        ASSERT(myNNC.rs != NULL);
        ASSERT(myNNC.sg != NULL);
        ASSERT(myNNC.ai != NULL);
        return &myNNC;
    }

    float getCrowdValue(Mob *mob, NeuralCrowdDesc *desc) {
        //XXX cache?
        MappingSensorGrid *sg = (MappingSensorGrid *)mySensorGrid;

        if (desc->radius <= 0.0f) {
            return 0.0f;
        }

        if (desc->crowdType == NEURAL_CROWD_FRIEND_FIGHTER) {
            return sg->numFriendsInRange(MOB_FLAG_FIGHTER,
                                         &mob->pos, desc->radius);
        } else if (desc->crowdType == NEURAL_CROWD_ENEMY_SHIP) {
            return sg->numTargetsInRange(MOB_FLAG_SHIP,
                                         &mob->pos, desc->radius);
        } else if (desc->crowdType == NEURAL_CROWD_CORES) {
            return sg->numTargetsInRange(MOB_FLAG_POWER_CORE,
                                         &mob->pos, desc->radius);
        } else if  (desc->crowdType == NEURAL_CROWD_FRIEND_MISSILE) {
            return sg->numFriendsInRange(MOB_FLAG_MISSILE,
                                         &mob->pos, desc->radius);
        } else if (desc->crowdType == NEURAL_CROWD_ENEMY_MISSILE) {
            return sg->numTargetsInRange(MOB_FLAG_MISSILE,
                                         &mob->pos, desc->radius);
        } else if (desc->crowdType == NEURAL_CROWD_BASE_ENEMY_SHIP) {
            Mob *base = sg->friendBase();
            if (base != NULL) {
                return sg->numTargetsInRange(MOB_FLAG_SHIP,
                                             &base->pos, desc->radius);
            }
            return 0.0f;
        } else if (desc->crowdType == NEURAL_CROWD_BASE_FRIEND_SHIP) {
            Mob *base = sg->friendBase();
            if (base != NULL) {
                return sg->numFriendsInRange(MOB_FLAG_SHIP,
                                             &base->pos, desc->radius);
            }
            return 0.0f;
        } else {
            NOT_IMPLEMENTED();
        }
    }

    float getTickValue(NeuralTickDesc *desc) {
        FleetAI *ai = myFleetAI;

        //XXX cache?

        if (desc->waveType != NEURAL_WAVE_NONE &&
            desc->frequency == 0.0f) {
            return 0.0f;
        }

        float t = (float)ai->tick;

        if (desc->waveType == NEURAL_WAVE_NONE) {
            return t;
        } else if (desc->waveType == NEURAL_WAVE_SINE) {
            return sinf(t / desc->frequency);
        } else if (desc->waveType == NEURAL_WAVE_UNIT_SINE) {
            return 0.5f * sinf(t / desc->frequency) + 0.5f;
        } else if (desc->waveType == NEURAL_WAVE_ABS_SINE) {
            return fabsf(sinf(t / desc->frequency));
        } else if (desc->waveType == NEURAL_WAVE_FMOD) {
            return fmodf(t, desc->frequency);
        } else {
            NOT_IMPLEMENTED();
        }
    }

    float getRangeValue(Mob *mob, NeuralForceDesc *desc) {
        FPoint focusPoint;
        if (NeuralForce_GetFocus(getNeuralNetContext(),
                                 mob, desc, &focusPoint)) {
            return FPoint_Distance(&mob->pos, &focusPoint);
        } else {
            return 0.0f;
        }
    }

    void doForces(Mob *mob, BasicShipAIState state, FRPoint *outputForce) {
        uint x;
        float maxV = (1.0f / MICRON);

        ASSERT(myInputs.size() == myInputDescs.size());

        for (uint i = 0; i < myInputDescs.size(); i++) {
            myInputs[i] = getNeuralValue(mob, &myInputDescs[i], i);
        }

        ASSERT(myOutputs.size() == myOutputDescs.size());
        myNeuralNet.compute(myInputs, myOutputs);

        for (uint i = 0; i < myOutputs.size(); i++) {
            ASSERT(myOutputDescs[i].valueType == NEURAL_VALUE_FORCE);
            if ((state == BSAI_STATE_IDLE && !myOutputDescs[i].forceDesc.doIdle) ||
                (state == BSAI_STATE_ATTACK && !myOutputDescs[i].forceDesc.doAttack)) {
                myOutputs[i] = 0.0f;
            } else if (isnan(myOutputs[i])) {
                myOutputs[i] = 0.0f;
            } else if (myOutputs[i] > maxV) {
                myOutputs[i] = maxV;
            } else if (myOutputs[i] < -maxV) {
                myOutputs[i] = -maxV;
            }
        }

        x = 0;
        FRPoint_Zero(outputForce);
        for (uint i = 0; i < myOutputDescs.size(); i++) {
            FRPoint force;
            ASSERT(myOutputDescs[i].valueType == NEURAL_VALUE_FORCE);
            ASSERT(myOutputDescs[i].forceDesc.forceType != NEURAL_FORCE_ZERO);
            if (myOutputDescs[i].forceDesc.forceType != NEURAL_FORCE_VOID &&
                myOutputs[x] != 0.0f &&
                NeuralForce_GetForce(getNeuralNetContext(), mob,
                                     &myOutputDescs[i].forceDesc, &force)) {
                FRPoint_SetSpeed(&force, myOutputs[x]);
                FRPoint_Add(&force, outputForce, outputForce);
            }
            x++;
        }
        //XXX non-force outputs?
        ASSERT(x <= myOutputs.size());
    }

    void applyForceToMob(Mob *mob, FRPoint *rForce) {
        float speed = MobType_GetSpeed(MOB_TYPE_FIGHTER);
        ASSERT(mob->type == MOB_TYPE_FIGHTER);

        if (rForce->radius < MICRON) {
            /*
             * Continue on the current heading if we didn't get a strong-enough
             * force.
             */
            NeuralForceDesc desc;
            MBUtil_Zero(&desc, sizeof(desc));
            desc.forceType = NEURAL_FORCE_HEADING;
            desc.useTangent = FALSE;
            desc.radius = speed;
            NeuralForce_GetForce(getNeuralNetContext(), mob, &desc, rForce);
        }
        FRPoint_SetSpeed(rForce, speed);

        FRPoint_ToFPoint(rForce, &mob->pos, &mob->cmd.target);
    }

    virtual void doAttack(Mob *mob, Mob *enemyTarget) {
        if (myUseAttackForces) {
            NeuralShipAI *ship = (NeuralShipAI *)mob->aiMobHandle;
            ASSERT(ship == (NeuralShipAI *)getShip(mob->mobid));
            ASSERT(ship != NULL);

            FPoint origTarget = mob->cmd.target;
            BasicAIGovernor::doAttack(mob, enemyTarget);

            mob->cmd.target = origTarget;

            FRPoint rForce;
            doForces(mob, ship->state, &rForce);
            applyForceToMob(mob, &rForce);
        } else {
            BasicAIGovernor::doAttack(mob, enemyTarget);
        }
    }

    virtual void doIdle(Mob *mob, bool newlyIdle) {
        //RandomState *rs = &myRandomState;

        NeuralShipAI *ship = (NeuralShipAI *)mob->aiMobHandle;
        ASSERT(ship == (NeuralShipAI *)getShip(mob->mobid));
        ASSERT(ship != NULL);

        ship->state = BSAI_STATE_IDLE;

        if (mob->type != MOB_TYPE_FIGHTER) {
            BasicAIGovernor::doIdle(mob, newlyIdle);
            return;
        }

        FRPoint rForce;
        doForces(mob, ship->state, &rForce);
        applyForceToMob(mob, &rForce);

        ASSERT(!isnanf(mob->cmd.target.x));
        ASSERT(!isnanf(mob->cmd.target.y));
    }

    virtual void runTick() {
        BasicAIGovernor::runTick();
    }

    virtual void runMob(Mob *mob) {
        BasicAIGovernor::runMob(mob);
    }
};

class NeuralFleet {
public:
    NeuralFleet(FleetAI *ai)
    :sg(ai->bp.width, ai->bp.height, 0), gov(ai, &sg)
    {
        this->ai = ai;
        RandomState_CreateWithSeed(&this->rs, ai->seed);
        gov.setSeed(RandomState_Uint64(&this->rs));
        sg.setSeed(RandomState_Uint64(&this->rs));

        mreg = MBRegistry_AllocCopy(ai->player.mreg);

        this->gov.putDefaults(mreg, ai->player.aiType);
        this->gov.loadRegistry(mreg);
    }

    ~NeuralFleet() {
        RandomState_Destroy(&this->rs);
        MBRegistry_Free(mreg);
    }

    FleetAI *ai;
    RandomState rs;
    MappingSensorGrid sg;
    NeuralAIGovernor gov;
    MBRegistry *mreg;
};

static void *NeuralFleetCreate(FleetAI *ai);
static void NeuralFleetDestroy(void *aiHandle);
static void NeuralFleetRunAITick(void *aiHandle);
static void *NeuralFleetMobSpawned(void *aiHandle, Mob *m);
static void NeuralFleetMobDestroyed(void *aiHandle, Mob *m, void *aiMobHandle);
static void NeuralFleetMutate(FleetAIType aiType, MBRegistry *mreg);
static void NeuralFleetDumpSanitizedParams(void *aiHandle, MBRegistry *mreg);

void NeuralFleet_GetOps(FleetAIType aiType, FleetAIOps *ops)
{
    ASSERT(ops != NULL);
    MBUtil_Zero(ops, sizeof(*ops));

    if (aiType == FLEET_AI_NEURAL1) {
        ops->aiName = "NeuralFleet1";
    } else if (aiType == FLEET_AI_NEURAL2) {
        ops->aiName = "NeuralFleet2";
    } else if (aiType == FLEET_AI_NEURAL3) {
        ops->aiName = "NeuralFleet3";
    } else if (aiType == FLEET_AI_NEURAL4) {
        ops->aiName = "NeuralFleet4";
    } else if (aiType == FLEET_AI_NEURAL5) {
        ops->aiName = "NeuralFleet5";
    } else if (aiType == FLEET_AI_NEURAL6) {
        ops->aiName = "NeuralFleet6";
    } else if (aiType == FLEET_AI_NEURAL7) {
        ops->aiName = "NeuralFleet7";
    } else if (aiType == FLEET_AI_NEURAL8) {
        ops->aiName = "NeuralFleet8";
    } else if (aiType == FLEET_AI_NEURAL9) {
        ops->aiName = "NeuralFleet9";
    } else if (aiType == FLEET_AI_NEURAL10) {
        ops->aiName = "NeuralFleet10";
    } else if (aiType == FLEET_AI_NEURAL11) {
        ops->aiName = "NeuralFleet11";
    } else if (aiType == FLEET_AI_NEURAL12) {
        ops->aiName = "NeuralFleet12";
    } else {
        NOT_IMPLEMENTED();
    }

    ops->aiAuthor = "Michael Banack";

    ops->createFleet = &NeuralFleetCreate;
    ops->destroyFleet = &NeuralFleetDestroy;
    ops->runAITick = &NeuralFleetRunAITick;
    ops->mobSpawned = &NeuralFleetMobSpawned;
    ops->mobDestroyed = &NeuralFleetMobDestroyed;
    ops->mutateParams = &NeuralFleetMutate;
    ops->dumpSanitizedParams = &NeuralFleetDumpSanitizedParams;
}

static void NeuralFleetDumpSanitizedParams(void *aiHandle, MBRegistry *mreg)
{
    NeuralFleet *sf = (NeuralFleet *)aiHandle;
    MBRegistry_PutAll(mreg, sf->mreg, "");
    sf->gov.dumpSanitizedParams(mreg);

    /*
     * If we voided out the inputs/outputs when the FloatNet was minimized,
     * reflect that here.
     */
    for (uint i = 0; i < sf->gov.myInputDescs.size(); i++) {
        if (sf->gov.myInputDescs[i].valueType == NEURAL_VALUE_VOID) {
            char *str = NULL;
            const char *value;
            int ret = asprintf(&str, "input[%d].valueType", i);
            VERIFY(ret > 0);
            value = NeuralValue_ToString(sf->gov.myInputDescs[i].valueType);
            MBRegistry_PutCopy(mreg, str, value);
            free(str);
        }
    }
    for (uint i = 0; i < sf->gov.myOutputDescs.size(); i++) {
        if (sf->gov.myOutputDescs[i].valueType == NEURAL_VALUE_FORCE &&
            sf->gov.myOutputDescs[i].forceDesc.forceType == NEURAL_FORCE_VOID) {
            char *str = NULL;
            const char *value;
            int ret = asprintf(&str, "output[%d].forceType", i);
            VERIFY(ret > 0);
            value = NeuralForce_ToString(sf->gov.myOutputDescs[i].forceDesc.forceType);
            MBRegistry_PutCopy(mreg, str, value);
            free(str);
        }
    }
}

static void NeuralFleetMutate(FleetAIType aiType, MBRegistry *mreg)
{
    MutationFloatParams vf[] = {
        // key                     min     max       mag   jump   mutation
        { "evadeStrictDistance",  -1.0f,   500.0f,  0.05f, 0.10f, 0.20f},
        { "evadeRange",           -1.0f,   500.0f,  0.05f, 0.10f, 0.20f},
        { "attackRange",          -1.0f,   500.0f,  0.05f, 0.10f, 0.20f},
        { "guardRange",           -1.0f,   500.0f,  0.05f, 0.10f, 0.10f},
        { "gatherRange",          -1.0f,   500.0f,  0.05f, 0.10f, 0.20f},
        { "startingMaxRadius",    1000.0f, 2000.0f, 0.05f, 0.10f, 0.20f},
        { "startingMinRadius",    300.0f,  800.0f,  0.05f, 0.10f, 0.20f},

        { "sensorGrid.staleCoreTime",
                                   0.0f,   50.0f,   0.05f, 0.2f, 0.005f},
        { "sensorGrid.staleFighterTime",
                                   0.0f,   20.0f,   0.05f, 0.2f, 0.005f},
        { "creditReserve",       100.0f,  200.0f,   0.05f, 0.1f, 0.005f},
    };

    MutationBoolParams vb[] = {
        // key                          mutation
        { "evadeFighters",               0.05f },
        { "evadeUseStrictDistance",      0.05f },
        { "attackExtendedRange",         0.05f },
        { "rotateStartingAngle",         0.05f },
        { "gatherAbandonStale",          0.05f },
        { "useAttackForces",             0.05f },
    };

    float rate = 0.12;
    MBRegistry_PutCopy(mreg, NEURAL_SCRAMBLE_KEY, "FALSE");
    if (Random_Flip(0.01)) {
        MBRegistry_PutCopy(mreg, NEURAL_SCRAMBLE_KEY, "TRUE");

        for (uint i = 0; i < ARRAYSIZE(vf); i++) {
            vf[i].mutationRate = 1.0f;
            vf[i].jumpRate = 1.0f;
        }
        for (uint i = 0; i < ARRAYSIZE(vb); i++) {
            vb[i].flipRate = 0.5f;
        }
        rate = 1.0f;
    }

    FloatNet fn;
    if (MBRegistry_ContainsKey(mreg, "floatNet.numInputs") &&
        MBRegistry_GetUint(mreg, "floatNet.numInputs") > 0 &&
        !MBRegistry_GetBool(mreg, NEURAL_SCRAMBLE_KEY)) {
        fn.load(mreg, "floatNet.");
    } else {
        fn.initialize(NEURAL_MAX_INPUTS, NEURAL_MAX_OUTPUTS, NEURAL_MAX_NODES);
        fn.loadZeroNet();
    }

    fn.mutate(rate, NEURAL_MAX_NODE_DEGREE, NEURAL_MAX_NODES);
    fn.save(mreg, "floatNet.");

    for (uint i = 0; i < fn.getNumInputs(); i++) {
        NeuralValueDesc desc;
        char *str = NULL;
        int ret = asprintf(&str, "input[%d].", i);
        VERIFY(ret > 0);
        NeuralValue_Load(mreg, &desc, str);
        NeuralValue_Mutate(mreg, &desc, FALSE, rate, str);
        free(str);
    }

    for (uint i = 0; i < fn.getNumOutputs(); i++) {
        NeuralValueDesc desc;
        char *str = NULL;
        int ret = asprintf(&str, "output[%d].", i + fn.getOutputOffset());
        VERIFY(ret > 0);
        NeuralValue_Load(mreg, &desc, str);
        NeuralValue_Mutate(mreg, &desc, TRUE, rate, str);
        free(str);
    }

    Mutate_Float(mreg, vf, ARRAYSIZE(vf));
    Mutate_Bool(mreg, vb, ARRAYSIZE(vb));

    MBRegistry_Remove(mreg, NEURAL_SCRAMBLE_KEY);
}

static void *NeuralFleetCreate(FleetAI *ai)
{
    ASSERT(ai != NULL);
    return new NeuralFleet(ai);
}

static void NeuralFleetDestroy(void *handle)
{
    NeuralFleet *sf = (NeuralFleet *)handle;
    ASSERT(sf != NULL);
    delete(sf);
}

static void *NeuralFleetMobSpawned(void *aiHandle, Mob *m)
{
    NeuralFleet *sf = (NeuralFleet *)aiHandle;

    ASSERT(sf != NULL);
    ASSERT(m != NULL);

    sf->gov.addMobid(m->mobid);
    return sf->gov.getShipHandle(m->mobid);
}

/*
 * Potentially invalidates any outstanding ship references.
 */
static void NeuralFleetMobDestroyed(void *aiHandle, Mob *m, void *aiMobHandle)
{
    NeuralFleet *sf = (NeuralFleet *)aiHandle;

    sf->gov.removeMobid(m->mobid);
}

static void NeuralFleetRunAITick(void *aiHandle)
{
    NeuralFleet *sf = (NeuralFleet *)aiHandle;
    sf->gov.runTick();
}
